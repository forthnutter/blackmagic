
blackmagic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800594c  0800594c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800594c  0800594c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08005954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  2000017c  08005ad0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012f4  08005ad0  000212f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001147b  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b54  00000000  00000000  00031620  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  00034178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a10  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e56  00000000  00000000  000356f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c309  00000000  00000000  00039546  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072235  00000000  00000000  0004584f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c38  00000000  00000000  000b7b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080058c8 	.word	0x080058c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080058c8 	.word	0x080058c8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa30 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a2 	bl	80002a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f862 	bl	8000224 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f004 ff1c 	bl	8004f9c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b094      	sub	sp, #80	; 0x50
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f005 fb9f 	bl	80058b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	f107 0314 	add.w	r3, r7, #20
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 fdc7 	bl	8001d50 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c8:	f000 f8f2 	bl	80003b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e2:	f107 0314 	add.w	r3, r7, #20
 80001e6:	2101      	movs	r1, #1
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 f831 	bl	8002250 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f4:	f000 f8dc 	bl	80003b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80001f8:	2312      	movs	r3, #18
 80001fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80001fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000200:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000206:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f98a 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000216:	f000 f8cb 	bl	80003b0 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3750      	adds	r7, #80	; 0x50
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <MX_ADC1_Init+0x74>)
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <MX_ADC1_Init+0x78>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_ADC1_Init+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_ADC1_Init+0x74>)
 800024e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000252:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <MX_ADC1_Init+0x74>)
 8000262:	f000 fa09 	bl	8000678 <HAL_ADC_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 f8a0 	bl	80003b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000270:	2308      	movs	r3, #8
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4619      	mov	r1, r3
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_ADC1_Init+0x74>)
 8000282:	f000 fad1 	bl	8000828 <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800028c:	f000 f890 	bl	80003b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	200003bc 	.word	0x200003bc
 800029c:	40012400 	.word	0x40012400

080002a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b4:	4b3b      	ldr	r3, [pc, #236]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a3a      	ldr	r2, [pc, #232]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0320 	and.w	r3, r3, #32
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b35      	ldr	r3, [pc, #212]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a34      	ldr	r2, [pc, #208]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	4b2f      	ldr	r3, [pc, #188]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a2e      	ldr	r2, [pc, #184]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b2c      	ldr	r3, [pc, #176]	; (80003a4 <MX_GPIO_Init+0x104>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 80002fc:	2200      	movs	r2, #0
 80002fe:	f240 212e 	movw	r1, #558	; 0x22e
 8000302:	4829      	ldr	r0, [pc, #164]	; (80003a8 <MX_GPIO_Init+0x108>)
 8000304:	f000 fe2a 	bl	8000f5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|LED_IDLE_RUN_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f640 4106 	movw	r1, #3078	; 0xc06
 800030e:	4827      	ldr	r0, [pc, #156]	; (80003ac <MX_GPIO_Init+0x10c>)
 8000310:	f000 fe24 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 8000314:	f240 232e 	movw	r3, #558	; 0x22e
 8000318:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	481e      	ldr	r0, [pc, #120]	; (80003a8 <MX_GPIO_Init+0x108>)
 800032e:	f000 fcbb 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000332:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 8000336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	4818      	ldr	r0, [pc, #96]	; (80003a8 <MX_GPIO_Init+0x108>)
 8000348:	f000 fcae 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 LED_IDLE_RUN_Pin PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|LED_IDLE_RUN_Pin|GPIO_PIN_11;
 800034c:	f640 4306 	movw	r3, #3078	; 0xc06
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4811      	ldr	r0, [pc, #68]	; (80003ac <MX_GPIO_Init+0x10c>)
 8000366:	f000 fc9f 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800036a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	480b      	ldr	r0, [pc, #44]	; (80003ac <MX_GPIO_Init+0x10c>)
 8000380:	f000 fc92 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800038a:	2303      	movs	r3, #3
 800038c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_GPIO_Init+0x10c>)
 8000396:	f000 fc87 	bl	8000ca8 <HAL_GPIO_Init>

}
 800039a:	bf00      	nop
 800039c:	3720      	adds	r7, #32
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_MspInit+0x5c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x5c>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_MspInit+0x60>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_MspInit+0x60>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a14      	ldr	r2, [pc, #80]	; (800048c <HAL_ADC_MspInit+0x6c>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d121      	bne.n	8000484 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <HAL_ADC_MspInit+0x70>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <HAL_ADC_MspInit+0x70>)
 8000446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <HAL_ADC_MspInit+0x70>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_ADC_MspInit+0x70>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a0c      	ldr	r2, [pc, #48]	; (8000490 <HAL_ADC_MspInit+0x70>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_ADC_MspInit+0x70>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000470:	2301      	movs	r3, #1
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000474:	2303      	movs	r3, #3
 8000476:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <HAL_ADC_MspInit+0x74>)
 8000480:	f000 fc12 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40012400 	.word	0x40012400
 8000490:	40021000 	.word	0x40021000
 8000494:	40010c00 	.word	0x40010c00

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <HardFault_Handler+0x4>

080004aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <MemManage_Handler+0x4>

080004b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <BusFault_Handler+0x4>

080004b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <UsageFault_Handler+0x4>

080004bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e4:	f000 f8ac 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004f2:	f000 fe52 	bl	800119a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20001088 	.word	0x20001088

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <SystemInit+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <SystemInit+0x5c>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <SystemInit+0x5c>)
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	4911      	ldr	r1, [pc, #68]	; (800055c <SystemInit+0x5c>)
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <SystemInit+0x60>)
 8000518:	4013      	ands	r3, r2
 800051a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <SystemInit+0x5c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <SystemInit+0x5c>)
 8000522:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <SystemInit+0x5c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <SystemInit+0x5c>)
 8000532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000536:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <SystemInit+0x5c>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <SystemInit+0x5c>)
 800053e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000542:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <SystemInit+0x5c>)
 8000546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800054a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SystemInit+0x64>)
 800054e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000552:	609a      	str	r2, [r3, #8]
#endif 
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	f8ff0000 	.word	0xf8ff0000
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000568:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800056a:	e003      	b.n	8000574 <LoopCopyDataInit>

0800056c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800056e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000570:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000572:	3104      	adds	r1, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000578:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800057a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800057c:	d3f6      	bcc.n	800056c <CopyDataInit>
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000580:	e002      	b.n	8000588 <LoopFillZerobss>

08000582 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000584:	f842 3b04 	str.w	r3, [r2], #4

08000588 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800058a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800058c:	d3f9      	bcc.n	8000582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800058e:	f7ff ffb7 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000592:	f005 f96d 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff fdd9 	bl	800014c <main>
  bx lr
 800059a:	4770      	bx	lr
  ldr r3, =_sidata
 800059c:	08005954 	.word	0x08005954
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005a4:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80005a8:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80005ac:	200012f4 	.word	0x200012f4

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_Init+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_Init+0x28>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 fb2d 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f808 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d0:	f7ff fef4 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40022000 	.word	0x40022000

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x54>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb45 	bl	8000c8e <HAL_SYSTICK_Config>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	e00e      	b.n	800062c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d80a      	bhi.n	800062a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800061c:	f000 fb0d 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <HAL_InitTick+0x5c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x1c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x20>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x20>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000008 	.word	0x20000008
 8000660:	200003f0 	.word	0x200003f0

08000664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <HAL_GetTick+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	200003f0 	.word	0x200003f0

08000678 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e0be      	b.n	8000818 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d109      	bne.n	80006bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff feb2 	bl	8000420 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f9ab 	bl	8000a18 <ADC_ConversionStop_Disable>
 80006c2:	4603      	mov	r3, r0
 80006c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f040 8099 	bne.w	8000806 <HAL_ADC_Init+0x18e>
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f040 8095 	bne.w	8000806 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006e4:	f023 0302 	bic.w	r3, r3, #2
 80006e8:	f043 0202 	orr.w	r2, r3, #2
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7b1b      	ldrb	r3, [r3, #12]
 80006fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000700:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	4313      	orrs	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000710:	d003      	beq.n	800071a <HAL_ADC_Init+0xa2>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d102      	bne.n	8000720 <HAL_ADC_Init+0xa8>
 800071a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071e:	e000      	b.n	8000722 <HAL_ADC_Init+0xaa>
 8000720:	2300      	movs	r3, #0
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	4313      	orrs	r3, r2
 8000726:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7d1b      	ldrb	r3, [r3, #20]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d119      	bne.n	8000764 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7b1b      	ldrb	r3, [r3, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d109      	bne.n	800074c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	3b01      	subs	r3, #1
 800073e:	035a      	lsls	r2, r3, #13
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	4313      	orrs	r3, r2
 8000744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	e00b      	b.n	8000764 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000750:	f043 0220 	orr.w	r2, r3, #32
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075c:	f043 0201 	orr.w	r2, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	430a      	orrs	r2, r1
 8000776:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <HAL_ADC_Init+0x1a8>)
 8000780:	4013      	ands	r3, r2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	430b      	orrs	r3, r1
 800078a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000794:	d003      	beq.n	800079e <HAL_ADC_Init+0x126>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d104      	bne.n	80007a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	051b      	lsls	r3, r3, #20
 80007a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_ADC_Init+0x1ac>)
 80007c4:	4013      	ands	r3, r2
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d10b      	bne.n	80007e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d6:	f023 0303 	bic.w	r3, r3, #3
 80007da:	f043 0201 	orr.w	r2, r3, #1
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007e2:	e018      	b.n	8000816 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	f023 0312 	bic.w	r3, r3, #18
 80007ec:	f043 0210 	orr.w	r2, r3, #16
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	f043 0201 	orr.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000804:	e007      	b.n	8000816 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080a:	f043 0210 	orr.w	r2, r3, #16
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000816:	7dfb      	ldrb	r3, [r7, #23]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	ffe1f7fd 	.word	0xffe1f7fd
 8000824:	ff1f0efe 	.word	0xff1f0efe

08000828 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000840:	2b01      	cmp	r3, #1
 8000842:	d101      	bne.n	8000848 <HAL_ADC_ConfigChannel+0x20>
 8000844:	2302      	movs	r3, #2
 8000846:	e0dc      	b.n	8000a02 <HAL_ADC_ConfigChannel+0x1da>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b06      	cmp	r3, #6
 8000856:	d81c      	bhi.n	8000892 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	3b05      	subs	r3, #5
 800086a:	221f      	movs	r2, #31
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	4019      	ands	r1, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	3b05      	subs	r3, #5
 8000884:	fa00 f203 	lsl.w	r2, r0, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	430a      	orrs	r2, r1
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
 8000890:	e03c      	b.n	800090c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b0c      	cmp	r3, #12
 8000898:	d81c      	bhi.n	80008d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	3b23      	subs	r3, #35	; 0x23
 80008ac:	221f      	movs	r2, #31
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	4019      	ands	r1, r3
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	3b23      	subs	r3, #35	; 0x23
 80008c6:	fa00 f203 	lsl.w	r2, r0, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
 80008d2:	e01b      	b.n	800090c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	3b41      	subs	r3, #65	; 0x41
 80008e6:	221f      	movs	r2, #31
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	4019      	ands	r1, r3
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	3b41      	subs	r3, #65	; 0x41
 8000900:	fa00 f203 	lsl.w	r2, r0, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	430a      	orrs	r2, r1
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b09      	cmp	r3, #9
 8000912:	d91c      	bls.n	800094e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	68d9      	ldr	r1, [r3, #12]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	3b1e      	subs	r3, #30
 8000926:	2207      	movs	r2, #7
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	4019      	ands	r1, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	6898      	ldr	r0, [r3, #8]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	3b1e      	subs	r3, #30
 8000940:	fa00 f203 	lsl.w	r2, r0, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	e019      	b.n	8000982 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6919      	ldr	r1, [r3, #16]
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	2207      	movs	r2, #7
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	4019      	ands	r1, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	6898      	ldr	r0, [r3, #8]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	fa00 f203 	lsl.w	r2, r0, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	430a      	orrs	r2, r1
 8000980:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b10      	cmp	r3, #16
 8000988:	d003      	beq.n	8000992 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800098e:	2b11      	cmp	r3, #17
 8000990:	d132      	bne.n	80009f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <HAL_ADC_ConfigChannel+0x1e4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d125      	bne.n	80009e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d126      	bne.n	80009f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80009b8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b10      	cmp	r3, #16
 80009c0:	d11a      	bne.n	80009f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_ADC_ConfigChannel+0x1e8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <HAL_ADC_ConfigChannel+0x1ec>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	0c9a      	lsrs	r2, r3, #18
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009d8:	e002      	b.n	80009e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	3b01      	subs	r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f9      	bne.n	80009da <HAL_ADC_ConfigChannel+0x1b2>
 80009e6:	e007      	b.n	80009f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	f043 0220 	orr.w	r2, r3, #32
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40012400 	.word	0x40012400
 8000a10:	20000000 	.word	0x20000000
 8000a14:	431bde83 	.word	0x431bde83

08000a18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d127      	bne.n	8000a82 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0201 	bic.w	r2, r2, #1
 8000a40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a42:	f7ff fe0f 	bl	8000664 <HAL_GetTick>
 8000a46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a48:	e014      	b.n	8000a74 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a4a:	f7ff fe0b 	bl	8000664 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d90d      	bls.n	8000a74 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f043 0210 	orr.w	r2, r3, #16
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	f043 0201 	orr.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e007      	b.n	8000a84 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d0e3      	beq.n	8000a4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4906      	ldr	r1, [pc, #24]	; (8000b24 <__NVIC_EnableIRQ+0x34>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c04:	f7ff ff90 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff2d 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff42 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff90 	bl	8000b7c <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5f 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff35 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	; 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e127      	b.n	8000f0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8116 	bne.w	8000f06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d034      	beq.n	8000d4c <HAL_GPIO_Init+0xa4>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d80d      	bhi.n	8000d02 <HAL_GPIO_Init+0x5a>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d02b      	beq.n	8000d42 <HAL_GPIO_Init+0x9a>
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d804      	bhi.n	8000cf8 <HAL_GPIO_Init+0x50>
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d031      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d01c      	beq.n	8000d30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf6:	e048      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d043      	beq.n	8000d84 <HAL_GPIO_Init+0xdc>
 8000cfc:	2b11      	cmp	r3, #17
 8000cfe:	d01b      	beq.n	8000d38 <HAL_GPIO_Init+0x90>
          break;
 8000d00:	e043      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d02:	4a89      	ldr	r2, [pc, #548]	; (8000f28 <HAL_GPIO_Init+0x280>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d026      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d08:	4a87      	ldr	r2, [pc, #540]	; (8000f28 <HAL_GPIO_Init+0x280>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d806      	bhi.n	8000d1c <HAL_GPIO_Init+0x74>
 8000d0e:	4a87      	ldr	r2, [pc, #540]	; (8000f2c <HAL_GPIO_Init+0x284>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d020      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d14:	4a86      	ldr	r2, [pc, #536]	; (8000f30 <HAL_GPIO_Init+0x288>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01d      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
          break;
 8000d1a:	e036      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d1c:	4a85      	ldr	r2, [pc, #532]	; (8000f34 <HAL_GPIO_Init+0x28c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d22:	4a85      	ldr	r2, [pc, #532]	; (8000f38 <HAL_GPIO_Init+0x290>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d016      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d28:	4a84      	ldr	r2, [pc, #528]	; (8000f3c <HAL_GPIO_Init+0x294>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
          break;
 8000d2e:	e02c      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e028      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e023      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	3308      	adds	r3, #8
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e01e      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	330c      	adds	r3, #12
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e019      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e012      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d105      	bne.n	8000d78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	611a      	str	r2, [r3, #16]
          break;
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	615a      	str	r2, [r3, #20]
          break;
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2bff      	cmp	r3, #255	; 0xff
 8000d8e:	d801      	bhi.n	8000d94 <HAL_GPIO_Init+0xec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	e001      	b.n	8000d98 <HAL_GPIO_Init+0xf0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3304      	adds	r3, #4
 8000d98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d802      	bhi.n	8000da6 <HAL_GPIO_Init+0xfe>
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x104>
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b08      	subs	r3, #8
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	210f      	movs	r1, #15
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	6a39      	ldr	r1, [r7, #32]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8096 	beq.w	8000f06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000df2:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x19e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x19a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x196>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x192>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e46:	2300      	movs	r3, #0
 8000e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e4a:	f002 0203 	and.w	r2, r2, #3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e58:	493a      	ldr	r1, [pc, #232]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4938      	ldr	r1, [pc, #224]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4933      	ldr	r1, [pc, #204]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	492e      	ldr	r1, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4929      	ldr	r1, [pc, #164]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	608b      	str	r3, [r1, #8]
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	491f      	ldr	r1, [pc, #124]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	491a      	ldr	r1, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60cb      	str	r3, [r1, #12]
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4915      	ldr	r1, [pc, #84]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3301      	adds	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f aed0 	bne.w	8000cbc <HAL_GPIO_Init+0x14>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	372c      	adds	r7, #44	; 0x2c
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	10210000 	.word	0x10210000
 8000f2c:	10110000 	.word	0x10110000
 8000f30:	10120000 	.word	0x10120000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	10320000 	.word	0x10320000
 8000f3c:	10220000 	.word	0x10220000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	b08b      	sub	sp, #44	; 0x2c
 8000f90:	af06      	add	r7, sp, #24
 8000f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0d3      	b.n	8001146 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f004 f9be 	bl	8005334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2203      	movs	r2, #3
 8000fbc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fb8a 	bl	80026de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	687e      	ldr	r6, [r7, #4]
 8000fd2:	466d      	mov	r5, sp
 8000fd4:	f106 0410 	add.w	r4, r6, #16
 8000fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	1d33      	adds	r3, r6, #4
 8000fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe4:	6838      	ldr	r0, [r7, #0]
 8000fe6:	f001 fb53 	bl	8002690 <USB_CoreInit>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0a4      	b.n	8001146 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fb87 	bl	8002716 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e035      	b.n	800107a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	015b      	lsls	r3, r3, #5
 8001014:	4413      	add	r3, r2
 8001016:	3329      	adds	r3, #41	; 0x29
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	015b      	lsls	r3, r3, #5
 8001022:	4413      	add	r3, r2
 8001024:	3328      	adds	r3, #40	; 0x28
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	b291      	uxth	r1, r2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	4413      	add	r3, r2
 8001036:	3336      	adds	r3, #54	; 0x36
 8001038:	460a      	mov	r2, r1
 800103a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	4413      	add	r3, r2
 8001044:	332b      	adds	r3, #43	; 0x2b
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	015b      	lsls	r3, r3, #5
 8001050:	4413      	add	r3, r2
 8001052:	3338      	adds	r3, #56	; 0x38
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	015b      	lsls	r3, r3, #5
 800105e:	4413      	add	r3, r2
 8001060:	333c      	adds	r3, #60	; 0x3c
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	015b      	lsls	r3, r3, #5
 800106e:	4413      	add	r3, r2
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3c4      	bcc.n	800100e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e031      	b.n	80010ee <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	4413      	add	r3, r2
 8001092:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	015b      	lsls	r3, r3, #5
 80010a0:	4413      	add	r3, r2
 80010a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	015b      	lsls	r3, r3, #5
 80010b0:	4413      	add	r3, r2
 80010b2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	4413      	add	r3, r2
 80010c2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	4413      	add	r3, r2
 80010d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	330a      	adds	r3, #10
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	4413      	add	r3, r2
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	3301      	adds	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3c8      	bcc.n	800108a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	687e      	ldr	r6, [r7, #4]
 8001100:	466d      	mov	r5, sp
 8001102:	f106 0410 	add.w	r4, r6, #16
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	1d33      	adds	r3, r6, #4
 8001110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	f001 fb0b 	bl	800272e <USB_DevInit>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2202      	movs	r2, #2
 8001122:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00d      	b.n	8001146 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fb49 	bl	80037d6 <USB_DevDisconnect>

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800114e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_PCD_Start+0x16>
 8001160:	2302      	movs	r3, #2
 8001162:	e016      	b.n	8001192 <HAL_PCD_Start+0x44>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f004 fb47 	bl	8005802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fb22 	bl	80037c2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fa94 	bl	80026b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fb1f 	bl	80037ea <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011b6:	d102      	bne.n	80011be <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 faf3 	bl	80017a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fb11 	bl	80037ea <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d2:	d112      	bne.n	80011fa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f004 f916 	bl	800541e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f8de 	bl	80013b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 faf3 	bl	80037ea <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800120e:	d10b      	bne.n	8001228 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001222:	b292      	uxth	r2, r2
 8001224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fadc 	bl	80037ea <USB_ReadInterrupts>
 8001232:	4603      	mov	r3, r0
 8001234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800123c:	d10b      	bne.n	8001256 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001250:	b292      	uxth	r2, r2
 8001252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fac5 	bl	80037ea <USB_ReadInterrupts>
 8001260:	4603      	mov	r3, r0
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126a:	d126      	bne.n	80012ba <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0204 	bic.w	r2, r2, #4
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0208 	bic.w	r2, r2, #8
 8001296:	b292      	uxth	r2, r2
 8001298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f004 f8f7 	bl	8005490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012b4:	b292      	uxth	r2, r2
 80012b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fa93 	bl	80037ea <USB_ReadInterrupts>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ce:	d13d      	bne.n	800134c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0204 	orr.w	r2, r2, #4
 8001312:	b292      	uxth	r2, r2
 8001314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fa64 	bl	80037ea <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800132c:	d10b      	bne.n	8001346 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f004 f888 	bl	800545c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fa4a 	bl	80037ea <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001360:	d10e      	bne.n	8001380 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001374:	b292      	uxth	r2, r2
 8001376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f004 f841 	bl	8005402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fa30 	bl	80037ea <USB_ReadInterrupts>
 800138a:	4603      	mov	r3, r0
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001394:	d10b      	bne.n	80013ae <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a8:	b292      	uxth	r2, r2
 80013aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_PCD_SetAddress+0x1a>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e013      	b.n	80013f8 <HAL_PCD_SetAddress+0x42>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	78fa      	ldrb	r2, [r7, #3]
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f9d7 	bl	800379c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4603      	mov	r3, r0
 8001410:	70fb      	strb	r3, [r7, #3]
 8001412:	460b      	mov	r3, r1
 8001414:	803b      	strh	r3, [r7, #0]
 8001416:	4613      	mov	r3, r2
 8001418:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800141e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da0b      	bge.n	800143e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	015b      	lsls	r3, r3, #5
 800142e:	3328      	adds	r3, #40	; 0x28
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	705a      	strb	r2, [r3, #1]
 800143c:	e00b      	b.n	8001456 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	015b      	lsls	r3, r3, #5
 8001446:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	b2da      	uxtb	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001462:	883a      	ldrh	r2, [r7, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	78ba      	ldrb	r2, [r7, #2]
 800146c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b29a      	uxth	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001480:	78bb      	ldrb	r3, [r7, #2]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d102      	bne.n	800148c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_PCD_EP_Open+0x9a>
 8001496:	2302      	movs	r3, #2
 8001498:	e00e      	b.n	80014b8 <HAL_PCD_EP_Open+0xb8>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68f9      	ldr	r1, [r7, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f965 	bl	8002778 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80014b6:	7afb      	ldrb	r3, [r7, #11]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da0b      	bge.n	80014ec <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	3328      	adds	r3, #40	; 0x28
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2201      	movs	r2, #1
 80014e8:	705a      	strb	r2, [r3, #1]
 80014ea:	e00b      	b.n	8001504 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	015b      	lsls	r3, r3, #5
 80014f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2da      	uxtb	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_PCD_EP_Close+0x5e>
 800151a:	2302      	movs	r3, #2
 800151c:	e00e      	b.n	800153c <HAL_PCD_EP_Close+0x7c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fc11 	bl	8002d54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	460b      	mov	r3, r1
 8001552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2200      	movs	r2, #0
 800157c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	b2da      	uxtb	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6979      	ldr	r1, [r7, #20]
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fd70 	bl	8003080 <USB_EPStartXfer>
 80015a0:	e005      	b.n	80015ae <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fd69 	bl	8003080 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	330a      	adds	r3, #10
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	4413      	add	r3, r2
 80015d2:	3304      	adds	r3, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	460b      	mov	r3, r1
 80015ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	3328      	adds	r3, #40	; 0x28
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2201      	movs	r2, #1
 8001616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	b2da      	uxtb	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6979      	ldr	r1, [r7, #20]
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fd23 	bl	8003080 <USB_EPStartXfer>
 800163a:	e005      	b.n	8001648 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6979      	ldr	r1, [r7, #20]
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fd1c 	bl	8003080 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	f003 0207 	and.w	r2, r3, #7
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d901      	bls.n	8001670 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e046      	b.n	80016fe <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	da0b      	bge.n	8001690 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	3328      	adds	r3, #40	; 0x28
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	705a      	strb	r2, [r3, #1]
 800168e:	e009      	b.n	80016a4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_PCD_EP_SetStall+0x72>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e01c      	b.n	80016fe <HAL_PCD_EP_SetStall+0xac>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 ff8c 	bl	80035f0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f002 f88a 	bl	8003808 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	d901      	bls.n	8001724 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e03a      	b.n	800179a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da0b      	bge.n	8001744 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	015b      	lsls	r3, r3, #5
 8001734:	3328      	adds	r3, #40	; 0x28
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	705a      	strb	r2, [r3, #1]
 8001742:	e00b      	b.n	800175c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	015b      	lsls	r3, r3, #5
 800174c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_PCD_EP_ClrStall+0x76>
 8001778:	2302      	movs	r3, #2
 800177a:	e00e      	b.n	800179a <HAL_PCD_EP_ClrStall+0x94>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68f9      	ldr	r1, [r7, #12]
 800178a:	4618      	mov	r0, r3
 800178c:	f001 ff72 	bl	8003674 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017ac:	e282      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80017c2:	7d7b      	ldrb	r3, [r7, #21]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f040 8142 	bne.w	8001a4e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017ca:	8afb      	ldrh	r3, [r7, #22]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d151      	bne.n	8001878 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e4:	b29c      	uxth	r4, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80017ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3328      	adds	r3, #40	; 0x28
 80017fa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001804:	b29b      	uxth	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	3302      	adds	r3, #2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	441a      	add	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001836:	2100      	movs	r1, #0
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f003 fdcb 	bl	80053d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8234 	beq.w	8001cb4 <PCD_EP_ISR_Handler+0x510>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 822f 	bne.w	8001cb4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b292      	uxth	r2, r2
 800186a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001876:	e21d      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800187e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001888:	8a7b      	ldrh	r3, [r7, #18]
 800188a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188e:	2b00      	cmp	r3, #0
 8001890:	d033      	beq.n	80018fa <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	3306      	adds	r3, #6
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f001 ffe8 	bl	80038a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018e2:	4013      	ands	r3, r2
 80018e4:	b29c      	uxth	r4, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80018ee:	b292      	uxth	r2, r2
 80018f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f003 fd44 	bl	8005380 <HAL_PCD_SetupStageCallback>
 80018f8:	e1dc      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f280 81d8 	bge.w	8001cb4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	b29a      	uxth	r2, r3
 800190c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001910:	4013      	ands	r3, r2
 8001912:	b29c      	uxth	r4, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800191c:	b292      	uxth	r2, r2
 800191e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001928:	b29b      	uxth	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	3306      	adds	r3, #6
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d019      	beq.n	8001988 <PCD_EP_ISR_Handler+0x1e4>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6959      	ldr	r1, [r3, #20]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800196c:	b29b      	uxth	r3, r3
 800196e:	f001 ff9a 	bl	80038a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	441a      	add	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f003 fd0e 	bl	80053a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461c      	mov	r4, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001996:	b29b      	uxth	r3, r3
 8001998:	441c      	add	r4, r3
 800199a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800199e:	461c      	mov	r4, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10e      	bne.n	80019c6 <PCD_EP_ISR_Handler+0x222>
 80019a8:	8823      	ldrh	r3, [r4, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	8023      	strh	r3, [r4, #0]
 80019b4:	8823      	ldrh	r3, [r4, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	8023      	strh	r3, [r4, #0]
 80019c4:	e02d      	b.n	8001a22 <PCD_EP_ISR_Handler+0x27e>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b3e      	cmp	r3, #62	; 0x3e
 80019cc:	d812      	bhi.n	80019f4 <PCD_EP_ISR_Handler+0x250>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <PCD_EP_ISR_Handler+0x244>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	029b      	lsls	r3, r3, #10
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	8023      	strh	r3, [r4, #0]
 80019f2:	e016      	b.n	8001a22 <PCD_EP_ISR_Handler+0x27e>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <PCD_EP_ISR_Handler+0x26a>
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a32:	b29c      	uxth	r4, r3
 8001a34:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001a38:	b29c      	uxth	r4, r3
 8001a3a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001a3e:	b29c      	uxth	r4, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4ba2      	ldr	r3, [pc, #648]	; (8001cd0 <PCD_EP_ISR_Handler+0x52c>)
 8001a46:	4323      	orrs	r3, r4
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	8013      	strh	r3, [r2, #0]
 8001a4c:	e132      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f280 80d1 	bge.w	8001c0a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b29c      	uxth	r4, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	7d7b      	ldrb	r3, [r7, #21]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001a90:	b292      	uxth	r2, r2
 8001a92:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a94:	7d7b      	ldrb	r3, [r7, #21]
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	7b1b      	ldrb	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	3306      	adds	r3, #6
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001ad4:	8bfb      	ldrh	r3, [r7, #30]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d072      	beq.n	8001bc0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6959      	ldr	r1, [r3, #20]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88da      	ldrh	r2, [r3, #6]
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	f001 fedd 	bl	80038a6 <USB_ReadPMA>
 8001aec:	e068      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d021      	beq.n	8001b4c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b30:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b32:	8bfb      	ldrh	r3, [r7, #30]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02a      	beq.n	8001b8e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6959      	ldr	r1, [r3, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	891a      	ldrh	r2, [r3, #8]
 8001b44:	8bfb      	ldrh	r3, [r7, #30]
 8001b46:	f001 feae 	bl	80038a6 <USB_ReadPMA>
 8001b4a:	e020      	b.n	8001b8e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3306      	adds	r3, #6
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b74:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b76:	8bfb      	ldrh	r3, [r7, #30]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	895a      	ldrh	r2, [r3, #10]
 8001b88:	8bfb      	ldrh	r3, [r7, #30]
 8001b8a:	f001 fe8c 	bl	80038a6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba8:	b29c      	uxth	r4, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	441a      	add	r2, r3
 8001bb8:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <PCD_EP_ISR_Handler+0x530>)
 8001bba:	4323      	orrs	r3, r4
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	8bfb      	ldrh	r3, [r7, #30]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	441a      	add	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <PCD_EP_ISR_Handler+0x446>
 8001be0:	8bfa      	ldrh	r2, [r7, #30]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d206      	bcs.n	8001bf8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f003 fbd7 	bl	80053a4 <HAL_PCD_DataOutStageCallback>
 8001bf6:	e008      	b.n	8001c0a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	7819      	ldrb	r1, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fc9d 	bl	8001544 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c0a:	8a7b      	ldrh	r3, [r7, #18]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d04f      	beq.n	8001cb4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c14:	7d7b      	ldrb	r3, [r7, #21]
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	3328      	adds	r3, #40	; 0x28
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	7d7b      	ldrb	r3, [r7, #21]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c38:	b29c      	uxth	r4, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	7d7b      	ldrb	r3, [r7, #21]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	441a      	add	r2, r3
 8001c46:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	3302      	adds	r3, #2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	441a      	add	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d106      	bne.n	8001ca2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f003 fb9a 	bl	80053d4 <HAL_PCD_DataInStageCallback>
 8001ca0:	e008      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	7819      	ldrb	r1, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fc96 	bl	80015e0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f6ff ad74 	blt.w	80017ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3724      	adds	r7, #36	; 0x24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	ffff8080 	.word	0xffff8080
 8001cd4:	ffff80c0 	.word	0xffff80c0

08001cd8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	817b      	strh	r3, [r7, #10]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	3328      	adds	r3, #40	; 0x28
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e006      	b.n	8001d16 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	015b      	lsls	r3, r3, #5
 8001d0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001d16:	893b      	ldrh	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	80da      	strh	r2, [r3, #6]
 8001d2a:	e00b      	b.n	8001d44 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e26c      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d70:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d112      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d06c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x12c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d168      	bne.n	8001e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e246      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x76>
 8001db8:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e02e      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a77      	ldr	r2, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0xbc>
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a71      	ldr	r2, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a67      	ldr	r2, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fc1a 	bl	8000664 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7fe fc16 	bl	8000664 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1fa      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xe4>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe fc06 	bl	8000664 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fc02 	bl	8000664 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1e6      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x10c>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1ba      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4939      	ldr	r1, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fbbb 	bl	8000664 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fbb7 	bl	8000664 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e19b      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fb9a 	bl	8000664 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7fe fb96 	bl	8000664 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e17a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d03a      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7fe fb7a 	bl	8000664 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7fe fb76 	bl	8000664 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e15a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 faa8 	bl	80024e8 <RCC_Delay>
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fb60 	bl	8000664 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa6:	e00f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fb5c 	bl	8000664 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e140      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	42420000 	.word	0x42420000
 8001fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e9      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a6 	beq.w	800212e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b97      	ldr	r3, [pc, #604]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a93      	ldr	r2, [pc, #588]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a8a      	ldr	r2, [pc, #552]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002026:	f7fe fb1d 	bl	8000664 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe fb19 	bl	8000664 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0fd      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x312>
 8002054:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e02d      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x334>
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	e01c      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x356>
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6c      	ldr	r2, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a69      	ldr	r2, [pc, #420]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e00b      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a66      	ldr	r2, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b64      	ldr	r3, [pc, #400]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a63      	ldr	r2, [pc, #396]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d015      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe facd 	bl	8000664 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe fac9 	bl	8000664 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0ab      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCC_OscConfig+0x37e>
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fab7 	bl	8000664 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fab3 	bl	8000664 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e095      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8081 	beq.w	800223a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d061      	beq.n	8002208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d146      	bne.n	80021da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fa87 	bl	8000664 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe fa83 	bl	8000664 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e067      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a19      	ldr	r1, [r3, #32]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	430b      	orrs	r3, r1
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fa57 	bl	8000664 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fa53 	bl	8000664 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e037      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x46a>
 80021d8:	e02f      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fa40 	bl	8000664 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fa3c 	bl	8000664 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e020      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x498>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
 800224c:	42420060 	.word	0x42420060

08002250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0d0      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4965      	ldr	r1, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d040      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d115      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e073      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06b      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4936      	ldr	r1, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe f990 	bl	8000664 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe f98c 	bl	8000664 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e053      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	fa21 f303 	lsr.w	r3, r1, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1cc>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8ee 	bl	80005e0 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40022000 	.word	0x40022000
 8002414:	40021000 	.word	0x40021000
 8002418:	0800593c 	.word	0x0800593c
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004

08002424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b490      	push	{r4, r7}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800242c:	1d3c      	adds	r4, r7, #4
 800242e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x40>
 800245e:	2b08      	cmp	r3, #8
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x46>
 8002462:	e02d      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002466:	623b      	str	r3, [r7, #32]
      break;
 8002468:	e02d      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	0c9b      	lsrs	r3, r3, #18
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002476:	4413      	add	r3, r2
 8002478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800247c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c5b      	lsrs	r3, r3, #17
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002496:	4413      	add	r3, r2
 8002498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800249c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a2:	fb02 f203 	mul.w	r2, r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	e004      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	623b      	str	r3, [r7, #32]
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c2:	623b      	str	r3, [r7, #32]
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3728      	adds	r7, #40	; 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc90      	pop	{r4, r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	080058e0 	.word	0x080058e0
 80024d8:	080058f0 	.word	0x080058f0
 80024dc:	40021000 	.word	0x40021000
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	003d0900 	.word	0x003d0900

080024e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <RCC_Delay+0x34>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <RCC_Delay+0x38>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a5b      	lsrs	r3, r3, #9
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002504:	bf00      	nop
  }
  while (Delay --);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	60fa      	str	r2, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f9      	bne.n	8002504 <RCC_Delay+0x1c>
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000
 8002520:	10624dd3 	.word	0x10624dd3

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d07d      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	61d3      	str	r3, [r2, #28]
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d118      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a42      	ldr	r2, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002584:	f7fe f86e 	bl	8000664 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	e008      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe f86a 	bl	8000664 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e06d      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025aa:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02e      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d027      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d014      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe f839 	bl	8000664 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe f835 	bl	8000664 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4917      	ldr	r1, [pc, #92]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	4313      	orrs	r3, r2
 8002628:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	490b      	ldr	r1, [pc, #44]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420440 	.word	0x42420440

08002690 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002690:	b084      	sub	sp, #16
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	f107 0014 	add.w	r0, r7, #20
 800269e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	b004      	add	sp, #16
 80026ae:	4770      	bx	lr

080026b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80026b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80026bc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80026e6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80026ea:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	4013      	ands	r3, r2
 8002700:	b21b      	sxth	r3, r3
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800272e:	b084      	sub	sp, #16
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	f107 0014 	add.w	r0, r7, #20
 800273c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffa5 	bl	80026b0 <USB_EnableGlobalInt>

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002772:	b004      	add	sp, #16
 8002774:	4770      	bx	lr
	...

08002778 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002778:	b490      	push	{r4, r7}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d819      	bhi.n	80027da <USB_ActivateEndpoint+0x62>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <USB_ActivateEndpoint+0x34>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027d1 	.word	0x080027d1
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027c7 	.word	0x080027c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80027bc:	89bb      	ldrh	r3, [r7, #12]
 80027be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c2:	81bb      	strh	r3, [r7, #12]
      break;
 80027c4:	e00d      	b.n	80027e2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80027c6:	89bb      	ldrh	r3, [r7, #12]
 80027c8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80027cc:	81bb      	strh	r3, [r7, #12]
      break;
 80027ce:	e008      	b.n	80027e2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80027d0:	89bb      	ldrh	r3, [r7, #12]
 80027d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d6:	81bb      	strh	r3, [r7, #12]
      break;
 80027d8:	e003      	b.n	80027e2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      break;
 80027de:	e000      	b.n	80027e2 <USB_ActivateEndpoint+0x6a>
      break;
 80027e0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	441a      	add	r2, r3
 80027ec:	89bb      	ldrh	r3, [r7, #12]
 80027ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fe:	b29b      	uxth	r3, r3
 8002800:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	b29a      	uxth	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b29c      	uxth	r4, r3
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	4b8a      	ldr	r3, [pc, #552]	; (8002a58 <USB_ActivateEndpoint+0x2e0>)
 8002830:	4323      	orrs	r3, r4
 8002832:	b29b      	uxth	r3, r3
 8002834:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	7b1b      	ldrb	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 8112 	bne.w	8002a64 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d067      	beq.n	8002918 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002848:	687c      	ldr	r4, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	441c      	add	r4, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	4423      	add	r3, r4
 800285c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002860:	461c      	mov	r4, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	88db      	ldrh	r3, [r3, #6]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29c      	uxth	r4, r3
 800287e:	4623      	mov	r3, r4
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d014      	beq.n	80028b2 <USB_ActivateEndpoint+0x13a>
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	b29c      	uxth	r4, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <USB_ActivateEndpoint+0x2e4>)
 80028ac:	4323      	orrs	r3, r4
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	78db      	ldrb	r3, [r3, #3]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d018      	beq.n	80028ec <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d0:	b29c      	uxth	r4, r3
 80028d2:	f084 0320 	eor.w	r3, r4, #32
 80028d6:	b29c      	uxth	r4, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <USB_ActivateEndpoint+0x2e0>)
 80028e4:	4323      	orrs	r3, r4
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8013      	strh	r3, [r2, #0]
 80028ea:	e22b      	b.n	8002d44 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002902:	b29c      	uxth	r4, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <USB_ActivateEndpoint+0x2e0>)
 8002910:	4323      	orrs	r3, r4
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]
 8002916:	e215      	b.n	8002d44 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002918:	687c      	ldr	r4, [r7, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	441c      	add	r4, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	4423      	add	r3, r4
 800292c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002930:	461c      	mov	r4, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	88db      	ldrh	r3, [r3, #6]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	b29b      	uxth	r3, r3
 800293e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002940:	687c      	ldr	r4, [r7, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	441c      	add	r4, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4423      	add	r3, r4
 8002954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002958:	461c      	mov	r4, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10e      	bne.n	8002980 <USB_ActivateEndpoint+0x208>
 8002962:	8823      	ldrh	r3, [r4, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800296a:	b29b      	uxth	r3, r3
 800296c:	8023      	strh	r3, [r4, #0]
 800296e:	8823      	ldrh	r3, [r4, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297a:	b29b      	uxth	r3, r3
 800297c:	8023      	strh	r3, [r4, #0]
 800297e:	e02d      	b.n	80029dc <USB_ActivateEndpoint+0x264>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b3e      	cmp	r3, #62	; 0x3e
 8002986:	d812      	bhi.n	80029ae <USB_ActivateEndpoint+0x236>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <USB_ActivateEndpoint+0x22a>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3301      	adds	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	8023      	strh	r3, [r4, #0]
 80029ac:	e016      	b.n	80029dc <USB_ActivateEndpoint+0x264>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <USB_ActivateEndpoint+0x250>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29c      	uxth	r4, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d014      	beq.n	8002a1e <USB_ActivateEndpoint+0x2a6>
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	b29c      	uxth	r4, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <USB_ActivateEndpoint+0x2e8>)
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	b29c      	uxth	r4, r3
 8002a36:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002a3a:	b29c      	uxth	r4, r3
 8002a3c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002a40:	b29c      	uxth	r4, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	441a      	add	r2, r3
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <USB_ActivateEndpoint+0x2e0>)
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	8013      	strh	r3, [r2, #0]
 8002a54:	e176      	b.n	8002d44 <USB_ActivateEndpoint+0x5cc>
 8002a56:	bf00      	nop
 8002a58:	ffff8080 	.word	0xffff8080
 8002a5c:	ffff80c0 	.word	0xffff80c0
 8002a60:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	b29c      	uxth	r4, r3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	4b96      	ldr	r3, [pc, #600]	; (8002ce0 <USB_ActivateEndpoint+0x568>)
 8002a88:	4323      	orrs	r3, r4
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002a8e:	687c      	ldr	r4, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	441c      	add	r4, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4423      	add	r3, r4
 8002aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	891b      	ldrh	r3, [r3, #8]
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8023      	strh	r3, [r4, #0]
 8002ab6:	687c      	ldr	r4, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	441c      	add	r4, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	4423      	add	r3, r4
 8002aca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002ace:	461c      	mov	r4, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	895b      	ldrh	r3, [r3, #10]
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 8088 	bne.w	8002bf8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29c      	uxth	r4, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d014      	beq.n	8002b2a <USB_ActivateEndpoint+0x3b2>
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	b29c      	uxth	r4, r3
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <USB_ActivateEndpoint+0x56c>)
 8002b24:	4323      	orrs	r3, r4
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29c      	uxth	r4, r3
 8002b38:	4623      	mov	r3, r4
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d014      	beq.n	8002b6c <USB_ActivateEndpoint+0x3f4>
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	b29c      	uxth	r4, r3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <USB_ActivateEndpoint+0x570>)
 8002b66:	4323      	orrs	r3, r4
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	b29c      	uxth	r4, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <USB_ActivateEndpoint+0x570>)
 8002b90:	4323      	orrs	r3, r4
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	b29c      	uxth	r4, r3
 8002bae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002bb2:	b29c      	uxth	r4, r3
 8002bb4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002bb8:	b29c      	uxth	r4, r3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	441a      	add	r2, r3
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <USB_ActivateEndpoint+0x574>)
 8002bc6:	4323      	orrs	r3, r4
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be2:	b29c      	uxth	r4, r3
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <USB_ActivateEndpoint+0x574>)
 8002bf0:	4323      	orrs	r3, r4
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	8013      	strh	r3, [r2, #0]
 8002bf6:	e0a5      	b.n	8002d44 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29c      	uxth	r4, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d014      	beq.n	8002c3a <USB_ActivateEndpoint+0x4c2>
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	b29c      	uxth	r4, r3
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <USB_ActivateEndpoint+0x56c>)
 8002c34:	4323      	orrs	r3, r4
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29c      	uxth	r4, r3
 8002c48:	4623      	mov	r3, r4
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <USB_ActivateEndpoint+0x504>
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	b29c      	uxth	r4, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	441a      	add	r2, r3
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <USB_ActivateEndpoint+0x570>)
 8002c76:	4323      	orrs	r3, r4
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	b29c      	uxth	r4, r3
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <USB_ActivateEndpoint+0x56c>)
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	78db      	ldrb	r3, [r3, #3]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d020      	beq.n	8002cf0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	b29c      	uxth	r4, r3
 8002cc6:	f084 0320 	eor.w	r3, r4, #32
 8002cca:	b29c      	uxth	r4, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <USB_ActivateEndpoint+0x574>)
 8002cd8:	4323      	orrs	r3, r4
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8013      	strh	r3, [r2, #0]
 8002cde:	e01c      	b.n	8002d1a <USB_ActivateEndpoint+0x5a2>
 8002ce0:	ffff8180 	.word	0xffff8180
 8002ce4:	ffffc080 	.word	0xffffc080
 8002ce8:	ffff80c0 	.word	0xffff80c0
 8002cec:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d06:	b29c      	uxth	r4, r3
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <USB_ActivateEndpoint+0x5d8>)
 8002d14:	4323      	orrs	r3, r4
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d30:	b29c      	uxth	r4, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	441a      	add	r2, r3
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <USB_ActivateEndpoint+0x5d8>)
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc90      	pop	{r4, r7}
 8002d4e:	4770      	bx	lr
 8002d50:	ffff8080 	.word	0xffff8080

08002d54 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d54:	b490      	push	{r4, r7}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	7b1b      	ldrb	r3, [r3, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d171      	bne.n	8002e4a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d036      	beq.n	8002ddc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29c      	uxth	r4, r3
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <USB_DeactivateEndpoint+0x5c>
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9c:	b29c      	uxth	r4, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <USB_DeactivateEndpoint+0x204>)
 8002daa:	4323      	orrs	r3, r4
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc6:	b29c      	uxth	r4, r3
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <USB_DeactivateEndpoint+0x208>)
 8002dd4:	4323      	orrs	r3, r4
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8013      	strh	r3, [r2, #0]
 8002dda:	e144      	b.n	8003066 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29c      	uxth	r4, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d014      	beq.n	8002e1e <USB_DeactivateEndpoint+0xca>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	b29c      	uxth	r4, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <USB_DeactivateEndpoint+0x20c>)
 8002e18:	4323      	orrs	r3, r4
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	b29c      	uxth	r4, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <USB_DeactivateEndpoint+0x208>)
 8002e42:	4323      	orrs	r3, r4
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	8013      	strh	r3, [r2, #0]
 8002e48:	e10d      	b.n	8003066 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 8088 	bne.w	8002f64 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29c      	uxth	r4, r3
 8002e62:	4623      	mov	r3, r4
 8002e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d014      	beq.n	8002e96 <USB_DeactivateEndpoint+0x142>
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	b29c      	uxth	r4, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <USB_DeactivateEndpoint+0x20c>)
 8002e90:	4323      	orrs	r3, r4
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29c      	uxth	r4, r3
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d014      	beq.n	8002ed8 <USB_DeactivateEndpoint+0x184>
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	b29c      	uxth	r4, r3
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <USB_DeactivateEndpoint+0x204>)
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	b29c      	uxth	r4, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <USB_DeactivateEndpoint+0x204>)
 8002efc:	4323      	orrs	r3, r4
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f18:	b29c      	uxth	r4, r3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <USB_DeactivateEndpoint+0x208>)
 8002f26:	4323      	orrs	r3, r4
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f42:	b29c      	uxth	r4, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <USB_DeactivateEndpoint+0x208>)
 8002f50:	4323      	orrs	r3, r4
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	8013      	strh	r3, [r2, #0]
 8002f56:	e086      	b.n	8003066 <USB_DeactivateEndpoint+0x312>
 8002f58:	ffff80c0 	.word	0xffff80c0
 8002f5c:	ffff8080 	.word	0xffff8080
 8002f60:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29c      	uxth	r4, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d014      	beq.n	8002fa6 <USB_DeactivateEndpoint+0x252>
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	b29c      	uxth	r4, r3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	4b35      	ldr	r3, [pc, #212]	; (8003074 <USB_DeactivateEndpoint+0x320>)
 8002fa0:	4323      	orrs	r3, r4
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29c      	uxth	r4, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d014      	beq.n	8002fe8 <USB_DeactivateEndpoint+0x294>
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	b29c      	uxth	r4, r3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	441a      	add	r2, r3
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <USB_DeactivateEndpoint+0x324>)
 8002fe2:	4323      	orrs	r3, r4
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	b29c      	uxth	r4, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <USB_DeactivateEndpoint+0x320>)
 800300c:	4323      	orrs	r3, r4
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003028:	b29c      	uxth	r4, r3
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	441a      	add	r2, r3
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <USB_DeactivateEndpoint+0x328>)
 8003036:	4323      	orrs	r3, r4
 8003038:	b29b      	uxth	r3, r3
 800303a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	b29c      	uxth	r4, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <USB_DeactivateEndpoint+0x328>)
 8003060:	4323      	orrs	r3, r4
 8003062:	b29b      	uxth	r3, r3
 8003064:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bc90      	pop	{r4, r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	ffffc080 	.word	0xffffc080
 8003078:	ffff80c0 	.word	0xffff80c0
 800307c:	ffff8080 	.word	0xffff8080

08003080 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b08d      	sub	sp, #52	; 0x34
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	2b01      	cmp	r3, #1
 8003090:	f040 8160 	bne.w	8003354 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d909      	bls.n	80030b4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	1ad2      	subs	r2, r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	619a      	str	r2, [r3, #24]
 80030b2:	e005      	b.n	80030c0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	7b1b      	ldrb	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d119      	bne.n	80030fc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	88da      	ldrh	r2, [r3, #6]
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fba2 	bl	800381e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80030da:	687c      	ldr	r4, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	441c      	add	r4, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	4423      	add	r3, r4
 80030ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030f2:	461c      	mov	r4, r3
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8023      	strh	r3, [r4, #0]
 80030fa:	e10f      	b.n	800331c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d065      	beq.n	80031de <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003112:	687c      	ldr	r4, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d148      	bne.n	80031ae <USB_EPStartXfer+0x12e>
 800311c:	687c      	ldr	r4, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	441c      	add	r4, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4423      	add	r3, r4
 8003130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003134:	461c      	mov	r4, r3
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10e      	bne.n	800315a <USB_EPStartXfer+0xda>
 800313c:	8823      	ldrh	r3, [r4, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003144:	b29b      	uxth	r3, r3
 8003146:	8023      	strh	r3, [r4, #0]
 8003148:	8823      	ldrh	r3, [r4, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003154:	b29b      	uxth	r3, r3
 8003156:	8023      	strh	r3, [r4, #0]
 8003158:	e03d      	b.n	80031d6 <USB_EPStartXfer+0x156>
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	2b3e      	cmp	r3, #62	; 0x3e
 800315e:	d810      	bhi.n	8003182 <USB_EPStartXfer+0x102>
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <USB_EPStartXfer+0xf6>
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	3301      	adds	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	b29b      	uxth	r3, r3
 800317a:	029b      	lsls	r3, r3, #10
 800317c:	b29b      	uxth	r3, r3
 800317e:	8023      	strh	r3, [r4, #0]
 8003180:	e029      	b.n	80031d6 <USB_EPStartXfer+0x156>
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <USB_EPStartXfer+0x118>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	3b01      	subs	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	b29b      	uxth	r3, r3
 800319c:	029b      	lsls	r3, r3, #10
 800319e:	b29b      	uxth	r3, r3
 80031a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	8023      	strh	r3, [r4, #0]
 80031ac:	e013      	b.n	80031d6 <USB_EPStartXfer+0x156>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d10f      	bne.n	80031d6 <USB_EPStartXfer+0x156>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031bc:	b29b      	uxth	r3, r3
 80031be:	441c      	add	r4, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	4423      	add	r3, r4
 80031c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	895b      	ldrh	r3, [r3, #10]
 80031da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031dc:	e063      	b.n	80032a6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d148      	bne.n	8003278 <USB_EPStartXfer+0x1f8>
 80031e6:	687c      	ldr	r4, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	441c      	add	r4, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4423      	add	r3, r4
 80031fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031fe:	461c      	mov	r4, r3
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <USB_EPStartXfer+0x1a4>
 8003206:	8823      	ldrh	r3, [r4, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800320e:	b29b      	uxth	r3, r3
 8003210:	8023      	strh	r3, [r4, #0]
 8003212:	8823      	ldrh	r3, [r4, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321e:	b29b      	uxth	r3, r3
 8003220:	8023      	strh	r3, [r4, #0]
 8003222:	e03d      	b.n	80032a0 <USB_EPStartXfer+0x220>
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2b3e      	cmp	r3, #62	; 0x3e
 8003228:	d810      	bhi.n	800324c <USB_EPStartXfer+0x1cc>
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	623b      	str	r3, [r7, #32]
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <USB_EPStartXfer+0x1c0>
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	3301      	adds	r3, #1
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	b29b      	uxth	r3, r3
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	b29b      	uxth	r3, r3
 8003248:	8023      	strh	r3, [r4, #0]
 800324a:	e029      	b.n	80032a0 <USB_EPStartXfer+0x220>
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <USB_EPStartXfer+0x1e2>
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	3b01      	subs	r3, #1
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	b29b      	uxth	r3, r3
 8003266:	029b      	lsls	r3, r3, #10
 8003268:	b29b      	uxth	r3, r3
 800326a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800326e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003272:	b29b      	uxth	r3, r3
 8003274:	8023      	strh	r3, [r4, #0]
 8003276:	e013      	b.n	80032a0 <USB_EPStartXfer+0x220>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10f      	bne.n	80032a0 <USB_EPStartXfer+0x220>
 8003280:	687c      	ldr	r4, [r7, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003288:	b29b      	uxth	r3, r3
 800328a:	441c      	add	r4, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4423      	add	r3, r4
 8003294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003298:	461c      	mov	r4, r3
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	b29b      	uxth	r3, r3
 800329e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	891b      	ldrh	r3, [r3, #8]
 80032a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6959      	ldr	r1, [r3, #20]
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fab4 	bl	800381e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <USB_EPStartXfer+0x26a>
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d4:	b29c      	uxth	r4, r3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	4b9a      	ldr	r3, [pc, #616]	; (800354c <USB_EPStartXfer+0x4cc>)
 80032e2:	4323      	orrs	r3, r4
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8013      	strh	r3, [r2, #0]
 80032e8:	e018      	b.n	800331c <USB_EPStartXfer+0x29c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d114      	bne.n	800331c <USB_EPStartXfer+0x29c>
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003308:	b29c      	uxth	r4, r3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	441a      	add	r2, r3
 8003314:	4b8e      	ldr	r3, [pc, #568]	; (8003550 <USB_EPStartXfer+0x4d0>)
 8003316:	4323      	orrs	r3, r4
 8003318:	b29b      	uxth	r3, r3
 800331a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003332:	b29c      	uxth	r4, r3
 8003334:	f084 0310 	eor.w	r3, r4, #16
 8003338:	b29c      	uxth	r4, r3
 800333a:	f084 0320 	eor.w	r3, r4, #32
 800333e:	b29c      	uxth	r4, r3
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	4b82      	ldr	r3, [pc, #520]	; (8003554 <USB_EPStartXfer+0x4d4>)
 800334c:	4323      	orrs	r3, r4
 800334e:	b29b      	uxth	r3, r3
 8003350:	8013      	strh	r3, [r2, #0]
 8003352:	e146      	b.n	80035e2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d909      	bls.n	8003374 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	619a      	str	r2, [r3, #24]
 8003372:	e005      	b.n	8003380 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	7b1b      	ldrb	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d148      	bne.n	800341a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003388:	687c      	ldr	r4, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003390:	b29b      	uxth	r3, r3
 8003392:	441c      	add	r4, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4423      	add	r3, r4
 800339c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033a0:	461c      	mov	r4, r3
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10e      	bne.n	80033c6 <USB_EPStartXfer+0x346>
 80033a8:	8823      	ldrh	r3, [r4, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	8023      	strh	r3, [r4, #0]
 80033b4:	8823      	ldrh	r3, [r4, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	8023      	strh	r3, [r4, #0]
 80033c4:	e0f2      	b.n	80035ac <USB_EPStartXfer+0x52c>
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	2b3e      	cmp	r3, #62	; 0x3e
 80033ca:	d810      	bhi.n	80033ee <USB_EPStartXfer+0x36e>
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <USB_EPStartXfer+0x362>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8023      	strh	r3, [r4, #0]
 80033ec:	e0de      	b.n	80035ac <USB_EPStartXfer+0x52c>
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <USB_EPStartXfer+0x384>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3b01      	subs	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	b29b      	uxth	r3, r3
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	b29b      	uxth	r3, r3
 800340c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003414:	b29b      	uxth	r3, r3
 8003416:	8023      	strh	r3, [r4, #0]
 8003418:	e0c8      	b.n	80035ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d148      	bne.n	80034b4 <USB_EPStartXfer+0x434>
 8003422:	687c      	ldr	r4, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	441c      	add	r4, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	4423      	add	r3, r4
 8003436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800343a:	461c      	mov	r4, r3
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10e      	bne.n	8003460 <USB_EPStartXfer+0x3e0>
 8003442:	8823      	ldrh	r3, [r4, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800344a:	b29b      	uxth	r3, r3
 800344c:	8023      	strh	r3, [r4, #0]
 800344e:	8823      	ldrh	r3, [r4, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345a:	b29b      	uxth	r3, r3
 800345c:	8023      	strh	r3, [r4, #0]
 800345e:	e03d      	b.n	80034dc <USB_EPStartXfer+0x45c>
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	2b3e      	cmp	r3, #62	; 0x3e
 8003464:	d810      	bhi.n	8003488 <USB_EPStartXfer+0x408>
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <USB_EPStartXfer+0x3fc>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	3301      	adds	r3, #1
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	b29b      	uxth	r3, r3
 8003480:	029b      	lsls	r3, r3, #10
 8003482:	b29b      	uxth	r3, r3
 8003484:	8023      	strh	r3, [r4, #0]
 8003486:	e029      	b.n	80034dc <USB_EPStartXfer+0x45c>
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <USB_EPStartXfer+0x41e>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	3b01      	subs	r3, #1
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	029b      	lsls	r3, r3, #10
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8023      	strh	r3, [r4, #0]
 80034b2:	e013      	b.n	80034dc <USB_EPStartXfer+0x45c>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10f      	bne.n	80034dc <USB_EPStartXfer+0x45c>
 80034bc:	687c      	ldr	r4, [r7, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	441c      	add	r4, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4423      	add	r3, r4
 80034d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034d4:	461c      	mov	r4, r3
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	b29b      	uxth	r3, r3
 80034da:	8023      	strh	r3, [r4, #0]
 80034dc:	687c      	ldr	r4, [r7, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d14e      	bne.n	8003584 <USB_EPStartXfer+0x504>
 80034e6:	687c      	ldr	r4, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	441c      	add	r4, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4423      	add	r3, r4
 80034fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034fe:	461c      	mov	r4, r3
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10e      	bne.n	8003524 <USB_EPStartXfer+0x4a4>
 8003506:	8823      	ldrh	r3, [r4, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800350e:	b29b      	uxth	r3, r3
 8003510:	8023      	strh	r3, [r4, #0]
 8003512:	8823      	ldrh	r3, [r4, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351e:	b29b      	uxth	r3, r3
 8003520:	8023      	strh	r3, [r4, #0]
 8003522:	e043      	b.n	80035ac <USB_EPStartXfer+0x52c>
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	2b3e      	cmp	r3, #62	; 0x3e
 8003528:	d816      	bhi.n	8003558 <USB_EPStartXfer+0x4d8>
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <USB_EPStartXfer+0x4c0>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3301      	adds	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	b29b      	uxth	r3, r3
 8003544:	029b      	lsls	r3, r3, #10
 8003546:	b29b      	uxth	r3, r3
 8003548:	8023      	strh	r3, [r4, #0]
 800354a:	e02f      	b.n	80035ac <USB_EPStartXfer+0x52c>
 800354c:	ffff80c0 	.word	0xffff80c0
 8003550:	ffffc080 	.word	0xffffc080
 8003554:	ffff8080 	.word	0xffff8080
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <USB_EPStartXfer+0x4ee>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3b01      	subs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	b29b      	uxth	r3, r3
 8003572:	029b      	lsls	r3, r3, #10
 8003574:	b29b      	uxth	r3, r3
 8003576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800357a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357e:	b29b      	uxth	r3, r3
 8003580:	8023      	strh	r3, [r4, #0]
 8003582:	e013      	b.n	80035ac <USB_EPStartXfer+0x52c>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d10f      	bne.n	80035ac <USB_EPStartXfer+0x52c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003592:	b29b      	uxth	r3, r3
 8003594:	441c      	add	r4, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4423      	add	r3, r4
 800359e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	b29c      	uxth	r4, r3
 80035c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80035c8:	b29c      	uxth	r4, r3
 80035ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80035ce:	b29c      	uxth	r4, r3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <USB_EPStartXfer+0x56c>)
 80035dc:	4323      	orrs	r3, r4
 80035de:	b29b      	uxth	r3, r3
 80035e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3734      	adds	r7, #52	; 0x34
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	ffff8080 	.word	0xffff8080

080035f0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035f0:	b490      	push	{r4, r7}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	b29c      	uxth	r4, r3
 800361a:	f084 0310 	eor.w	r3, r4, #16
 800361e:	b29c      	uxth	r4, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <USB_EPSetStall+0x80>)
 800362c:	4323      	orrs	r3, r4
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]
 8003632:	e017      	b.n	8003664 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	b29c      	uxth	r4, r3
 800364c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003650:	b29c      	uxth	r4, r3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <USB_EPSetStall+0x80>)
 800365e:	4323      	orrs	r3, r4
 8003660:	b29b      	uxth	r3, r3
 8003662:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bc90      	pop	{r4, r7}
 800366e:	4770      	bx	lr
 8003670:	ffff8080 	.word	0xffff8080

08003674 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003674:	b490      	push	{r4, r7}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	7b1b      	ldrb	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d17d      	bne.n	8003782 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d03d      	beq.n	800370a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29c      	uxth	r4, r3
 800369c:	4623      	mov	r3, r4
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d014      	beq.n	80036d0 <USB_EPClearStall+0x5c>
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	b29c      	uxth	r4, r3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <USB_EPClearStall+0x11c>)
 80036ca:	4323      	orrs	r3, r4
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	78db      	ldrb	r3, [r3, #3]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d054      	beq.n	8003782 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	b29c      	uxth	r4, r3
 80036f0:	f084 0320 	eor.w	r3, r4, #32
 80036f4:	b29c      	uxth	r4, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	441a      	add	r2, r3
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <USB_EPClearStall+0x120>)
 8003702:	4323      	orrs	r3, r4
 8003704:	b29b      	uxth	r3, r3
 8003706:	8013      	strh	r3, [r2, #0]
 8003708:	e03b      	b.n	8003782 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29c      	uxth	r4, r3
 8003718:	4623      	mov	r3, r4
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d014      	beq.n	800374c <USB_EPClearStall+0xd8>
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	b29c      	uxth	r4, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <USB_EPClearStall+0x124>)
 8003746:	4323      	orrs	r3, r4
 8003748:	b29b      	uxth	r3, r3
 800374a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	b29c      	uxth	r4, r3
 8003764:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003768:	b29c      	uxth	r4, r3
 800376a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800376e:	b29c      	uxth	r4, r3
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <USB_EPClearStall+0x120>)
 800377c:	4323      	orrs	r3, r4
 800377e:	b29b      	uxth	r3, r3
 8003780:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bc90      	pop	{r4, r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	ffff80c0 	.word	0xffff80c0
 8003794:	ffff8080 	.word	0xffff8080
 8003798:	ffffc080 	.word	0xffffc080

0800379c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800381e:	b480      	push	{r7}
 8003820:	b08d      	sub	sp, #52	; 0x34
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	4611      	mov	r1, r2
 800382a:	461a      	mov	r2, r3
 800382c:	460b      	mov	r3, r1
 800382e:	80fb      	strh	r3, [r7, #6]
 8003830:	4613      	mov	r3, r2
 8003832:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003834:	88bb      	ldrh	r3, [r7, #4]
 8003836:	3301      	adds	r3, #1
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	005a      	lsls	r2, r3, #1
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003856:	e01e      	b.n	8003896 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	3301      	adds	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	b29b      	uxth	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	b29a      	uxth	r2, r3
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	3302      	adds	r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	3302      	adds	r3, #2
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	3301      	adds	r3, #1
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	3b01      	subs	r3, #1
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1dd      	bne.n	8003858 <USB_WritePMA+0x3a>
  }
}
 800389c:	bf00      	nop
 800389e:	3734      	adds	r7, #52	; 0x34
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b08b      	sub	sp, #44	; 0x2c
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	4611      	mov	r1, r2
 80038b2:	461a      	mov	r2, r3
 80038b4:	460b      	mov	r3, r1
 80038b6:	80fb      	strh	r3, [r7, #6]
 80038b8:	4613      	mov	r3, r2
 80038ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80038bc:	88bb      	ldrh	r3, [r7, #4]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	005a      	lsls	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
 80038de:	e01b      	b.n	8003918 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	3302      	adds	r3, #2
 80038ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	b2da      	uxtb	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	3302      	adds	r3, #2
 8003910:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	3b01      	subs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e0      	bne.n	80038e0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800391e:	88bb      	ldrh	r3, [r7, #4]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	701a      	strb	r2, [r3, #0]
  }
}
 800393a:	bf00      	nop
 800393c:	372c      	adds	r7, #44	; 0x2c
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7c1b      	ldrb	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d115      	bne.n	8003988 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800395c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003960:	2202      	movs	r2, #2
 8003962:	2181      	movs	r1, #129	; 0x81
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f001 fe16 	bl	8005596 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003974:	2202      	movs	r2, #2
 8003976:	2101      	movs	r1, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f001 fe0c 	bl	8005596 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003986:	e012      	b.n	80039ae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	2202      	movs	r2, #2
 800398c:	2181      	movs	r1, #129	; 0x81
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f001 fe01 	bl	8005596 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800399a:	2340      	movs	r3, #64	; 0x40
 800399c:	2202      	movs	r2, #2
 800399e:	2101      	movs	r1, #1
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f001 fdf8 	bl	8005596 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80039ae:	2308      	movs	r3, #8
 80039b0:	2203      	movs	r2, #3
 80039b2:	2182      	movs	r1, #130	; 0x82
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f001 fdee 	bl	8005596 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80039c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80039c4:	f001 ff08 	bl	80057d8 <USBD_static_malloc>
 80039c8:	4602      	mov	r2, r0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	e026      	b.n	8003a2e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039e6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7c1b      	ldrb	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a14:	2101      	movs	r1, #1
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 fea7 	bl	800576a <USBD_LL_PrepareReceive>
 8003a1c:	e007      	b.n	8003a2e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a24:	2340      	movs	r3, #64	; 0x40
 8003a26:	2101      	movs	r1, #1
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f001 fe9e 	bl	800576a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003a48:	2181      	movs	r1, #129	; 0x81
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f001 fdc9 	bl	80055e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003a56:	2101      	movs	r1, #1
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f001 fdc2 	bl	80055e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003a66:	2182      	movs	r1, #130	; 0x82
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f001 fdba 	bl	80055e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 feae 	bl	80057f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ab6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d039      	beq.n	8003b44 <USBD_CDC_Setup+0x9e>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d17c      	bne.n	8003bce <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	88db      	ldrh	r3, [r3, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d029      	beq.n	8003b30 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da11      	bge.n	8003b0a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003af2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	88d2      	ldrh	r2, [r2, #6]
 8003af8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003afa:	6939      	ldr	r1, [r7, #16]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	88db      	ldrh	r3, [r3, #6]
 8003b00:	461a      	mov	r2, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 f9c6 	bl	8004e94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003b08:	e068      	b.n	8003bdc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	785a      	ldrb	r2, [r3, #1]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	88db      	ldrh	r3, [r3, #6]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	88db      	ldrh	r3, [r3, #6]
 8003b26:	461a      	mov	r2, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f001 f9e1 	bl	8004ef0 <USBD_CtlPrepareRx>
      break;
 8003b2e:	e055      	b.n	8003bdc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	7850      	ldrb	r0, [r2, #1]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	6839      	ldr	r1, [r7, #0]
 8003b40:	4798      	blx	r3
      break;
 8003b42:	e04b      	b.n	8003bdc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b0a      	cmp	r3, #10
 8003b4a:	d017      	beq.n	8003b7c <USBD_CDC_Setup+0xd6>
 8003b4c:	2b0b      	cmp	r3, #11
 8003b4e:	d029      	beq.n	8003ba4 <USBD_CDC_Setup+0xfe>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d133      	bne.n	8003bbc <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d107      	bne.n	8003b6e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003b5e:	f107 030c 	add.w	r3, r7, #12
 8003b62:	2202      	movs	r2, #2
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f001 f994 	bl	8004e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003b6c:	e02e      	b.n	8003bcc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f001 f925 	bl	8004dc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003b76:	2302      	movs	r3, #2
 8003b78:	75fb      	strb	r3, [r7, #23]
          break;
 8003b7a:	e027      	b.n	8003bcc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003b86:	f107 030f 	add.w	r3, r7, #15
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f001 f980 	bl	8004e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003b94:	e01a      	b.n	8003bcc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003b96:	6839      	ldr	r1, [r7, #0]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f001 f911 	bl	8004dc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8003ba2:	e013      	b.n	8003bcc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d00d      	beq.n	8003bca <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003bae:	6839      	ldr	r1, [r7, #0]
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f001 f905 	bl	8004dc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003bba:	e006      	b.n	8003bca <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f001 f8fe 	bl	8004dc0 <USBD_CtlError>
          ret = USBD_FAIL;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	75fb      	strb	r3, [r7, #23]
          break;
 8003bc8:	e000      	b.n	8003bcc <USBD_CDC_Setup+0x126>
          break;
 8003bca:	bf00      	nop
      }
      break;
 8003bcc:	e006      	b.n	8003bdc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f001 f8f5 	bl	8004dc0 <USBD_CtlError>
      ret = USBD_FAIL;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bda:	bf00      	nop
  }

  return ret;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003bf8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003c00:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d037      	beq.n	8003c7c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	331c      	adds	r3, #28
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d026      	beq.n	8003c70 <USBD_CDC_DataIn+0x8a>
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	331c      	adds	r3, #28
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	0152      	lsls	r2, r2, #5
 8003c3a:	440a      	add	r2, r1
 8003c3c:	3238      	adds	r2, #56	; 0x38
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c44:	fb02 f201 	mul.w	r2, r2, r1
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d110      	bne.n	8003c70 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	331c      	adds	r3, #28
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c62:	78f9      	ldrb	r1, [r7, #3]
 8003c64:	2300      	movs	r3, #0
 8003c66:	2200      	movs	r2, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fd5b 	bl	8005724 <USBD_LL_Transmit>
 8003c6e:	e003      	b.n	8003c78 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fd86 	bl	80057b0 <USBD_LL_GetRxDataSize>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4798      	blx	r3

    return USBD_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d015      	beq.n	8003d22 <USBD_CDC_EP0_RxReady+0x46>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003cfc:	2bff      	cmp	r3, #255	; 0xff
 8003cfe:	d010      	beq.n	8003d22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003d0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003d16:	b292      	uxth	r2, r2
 8003d18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	22ff      	movs	r2, #255	; 0xff
 8003d1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2243      	movs	r2, #67	; 0x43
 8003d38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003d3a:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000094 	.word	0x20000094

08003d4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2243      	movs	r2, #67	; 0x43
 8003d58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000050 	.word	0x20000050

08003d6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2243      	movs	r2, #67	; 0x43
 8003d78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003d7a:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	200000d8 	.word	0x200000d8

08003d8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	220a      	movs	r2, #10
 8003d98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003d9a:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000000c 	.word	0x2000000c

08003dac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003db6:	2302      	movs	r3, #2
 8003db8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e1a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d017      	beq.n	8003e7a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7c1b      	ldrb	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f001 fc83 	bl	800576a <USBD_LL_PrepareReceive>
 8003e64:	e007      	b.n	8003e76 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e6c:	2340      	movs	r3, #64	; 0x40
 8003e6e:	2101      	movs	r1, #1
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f001 fc7a 	bl	800576a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e01a      	b.n	8003ed2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	79fa      	ldrb	r2, [r7, #7]
 8003ec8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f001 faee 	bl	80054ac <USBD_LL_Init>

  return USBD_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	e001      	b.n	8003f00 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003efc:	2302      	movs	r3, #2
 8003efe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f001 fb23 	bl	8005560 <USBD_LL_Start>

  return USBD_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003f44:	2302      	movs	r3, #2
 8003f46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00c      	beq.n	8003f6c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3

  return USBD_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 feca 	bl	8004d48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d00c      	beq.n	8003ff2 <USBD_LL_SetupStage+0x56>
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d302      	bcc.n	8003fe2 <USBD_LL_SetupStage+0x46>
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d010      	beq.n	8004002 <USBD_LL_SetupStage+0x66>
 8003fe0:	e017      	b.n	8004012 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f9ca 	bl	8004384 <USBD_StdDevReq>
      break;
 8003ff0:	e01a      	b.n	8004028 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa2c 	bl	8004458 <USBD_StdItfReq>
      break;
 8004000:	e012      	b.n	8004028 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa6a 	bl	80044e4 <USBD_StdEPReq>
      break;
 8004010:	e00a      	b.n	8004028 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004018:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f001 fafd 	bl	8005620 <USBD_LL_StallEP>
      break;
 8004026:	bf00      	nop
  }

  return USBD_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	460b      	mov	r3, r1
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14b      	bne.n	80040de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800404c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004054:	2b03      	cmp	r3, #3
 8004056:	d134      	bne.n	80040c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	429a      	cmp	r2, r3
 8004062:	d919      	bls.n	8004098 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	1ad2      	subs	r2, r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800407a:	429a      	cmp	r2, r3
 800407c:	d203      	bcs.n	8004086 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004082:	b29b      	uxth	r3, r3
 8004084:	e002      	b.n	800408c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 ff4b 	bl	8004f2c <USBD_CtlContinueRx>
 8004096:	e038      	b.n	800410a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d105      	bne.n	80040ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 ff48 	bl	8004f50 <USBD_CtlSendStatus>
 80040c0:	e023      	b.n	800410a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d11e      	bne.n	800410a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80040d4:	2100      	movs	r1, #0
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f001 faa2 	bl	8005620 <USBD_LL_StallEP>
 80040dc:	e015      	b.n	800410a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d108      	bne.n	8004106 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	7afa      	ldrb	r2, [r7, #11]
 80040fe:	4611      	mov	r1, r2
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	4798      	blx	r3
 8004104:	e001      	b.n	800410a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004106:	2302      	movs	r3, #2
 8004108:	e000      	b.n	800410c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	460b      	mov	r3, r1
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d17f      	bne.n	8004228 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3314      	adds	r3, #20
 800412c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004134:	2b02      	cmp	r3, #2
 8004136:	d15c      	bne.n	80041f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	429a      	cmp	r2, r3
 8004142:	d915      	bls.n	8004170 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	1ad2      	subs	r2, r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	b29b      	uxth	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 feb5 	bl	8004ecc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004162:	2300      	movs	r3, #0
 8004164:	2200      	movs	r2, #0
 8004166:	2100      	movs	r1, #0
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f001 fafe 	bl	800576a <USBD_LL_PrepareReceive>
 800416e:	e04e      	b.n	800420e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6912      	ldr	r2, [r2, #16]
 8004178:	fbb3 f1f2 	udiv	r1, r3, r2
 800417c:	fb02 f201 	mul.w	r2, r2, r1
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11c      	bne.n	80041c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800418e:	429a      	cmp	r2, r3
 8004190:	d316      	bcc.n	80041c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800419c:	429a      	cmp	r2, r3
 800419e:	d20f      	bcs.n	80041c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80041a0:	2200      	movs	r2, #0
 80041a2:	2100      	movs	r1, #0
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fe91 	bl	8004ecc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80041b2:	2300      	movs	r3, #0
 80041b4:	2200      	movs	r2, #0
 80041b6:	2100      	movs	r1, #0
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f001 fad6 	bl	800576a <USBD_LL_PrepareReceive>
 80041be:	e026      	b.n	800420e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d105      	bne.n	80041e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 fa1b 	bl	8005620 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fec3 	bl	8004f76 <USBD_CtlReceiveStatus>
 80041f0:	e00d      	b.n	800420e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d004      	beq.n	8004206 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f001 fa09 	bl	8005620 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d11d      	bne.n	8004254 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff fe83 	bl	8003f24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004226:	e015      	b.n	8004254 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800423a:	2b03      	cmp	r3, #3
 800423c:	d108      	bne.n	8004250 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	7afa      	ldrb	r2, [r7, #11]
 8004248:	4611      	mov	r1, r2
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	4798      	blx	r3
 800424e:	e001      	b.n	8004254 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004250:	2302      	movs	r3, #2
 8004252:	e000      	b.n	8004256 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	2200      	movs	r2, #0
 800426a:	2100      	movs	r1, #0
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f001 f992 	bl	8005596 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2240      	movs	r2, #64	; 0x40
 800427e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	2200      	movs	r2, #0
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f001 f984 	bl	8005596 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2240      	movs	r2, #64	; 0x40
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6852      	ldr	r2, [r2, #4]
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	4611      	mov	r1, r2
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
  }

  return USBD_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004334:	2b04      	cmp	r3, #4
 8004336:	d105      	bne.n	8004344 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800435e:	2b03      	cmp	r3, #3
 8004360:	d10b      	bne.n	800437a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800439a:	2b20      	cmp	r3, #32
 800439c:	d004      	beq.n	80043a8 <USBD_StdDevReq+0x24>
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d002      	beq.n	80043a8 <USBD_StdDevReq+0x24>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <USBD_StdDevReq+0x34>
 80043a6:	e04c      	b.n	8004442 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
      break;
 80043b6:	e049      	b.n	800444c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d83a      	bhi.n	8004436 <USBD_StdDevReq+0xb2>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <USBD_StdDevReq+0x44>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	08004419 	.word	0x08004419
 80043cc:	0800442d 	.word	0x0800442d
 80043d0:	08004437 	.word	0x08004437
 80043d4:	08004423 	.word	0x08004423
 80043d8:	08004437 	.word	0x08004437
 80043dc:	080043fb 	.word	0x080043fb
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004437 	.word	0x08004437
 80043e8:	0800440f 	.word	0x0800440f
 80043ec:	08004405 	.word	0x08004405
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9d4 	bl	80047a0 <USBD_GetDescriptor>
          break;
 80043f8:	e022      	b.n	8004440 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80043fa:	6839      	ldr	r1, [r7, #0]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fb37 	bl	8004a70 <USBD_SetAddress>
          break;
 8004402:	e01d      	b.n	8004440 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb74 	bl	8004af4 <USBD_SetConfig>
          break;
 800440c:	e018      	b.n	8004440 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fbfd 	bl	8004c10 <USBD_GetConfig>
          break;
 8004416:	e013      	b.n	8004440 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fc2c 	bl	8004c78 <USBD_GetStatus>
          break;
 8004420:	e00e      	b.n	8004440 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004422:	6839      	ldr	r1, [r7, #0]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fc5a 	bl	8004cde <USBD_SetFeature>
          break;
 800442a:	e009      	b.n	8004440 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800442c:	6839      	ldr	r1, [r7, #0]
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fc69 	bl	8004d06 <USBD_ClrFeature>
          break;
 8004434:	e004      	b.n	8004440 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fcc1 	bl	8004dc0 <USBD_CtlError>
          break;
 800443e:	bf00      	nop
      }
      break;
 8004440:	e004      	b.n	800444c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fcbb 	bl	8004dc0 <USBD_CtlError>
      break;
 800444a:	bf00      	nop
  }

  return ret;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800446e:	2b20      	cmp	r3, #32
 8004470:	d003      	beq.n	800447a <USBD_StdItfReq+0x22>
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d001      	beq.n	800447a <USBD_StdItfReq+0x22>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d12a      	bne.n	80044d0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004480:	3b01      	subs	r3, #1
 8004482:	2b02      	cmp	r3, #2
 8004484:	d81d      	bhi.n	80044c2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	889b      	ldrh	r3, [r3, #4]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d813      	bhi.n	80044b8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
 800449e:	4603      	mov	r3, r0
 80044a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	88db      	ldrh	r3, [r3, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d110      	bne.n	80044cc <USBD_StdItfReq+0x74>
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fd4d 	bl	8004f50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80044b6:	e009      	b.n	80044cc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fc80 	bl	8004dc0 <USBD_CtlError>
          break;
 80044c0:	e004      	b.n	80044cc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fc7b 	bl	8004dc0 <USBD_CtlError>
          break;
 80044ca:	e000      	b.n	80044ce <USBD_StdItfReq+0x76>
          break;
 80044cc:	bf00      	nop
      }
      break;
 80044ce:	e004      	b.n	80044da <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fc74 	bl	8004dc0 <USBD_CtlError>
      break;
 80044d8:	bf00      	nop
  }

  return USBD_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	889b      	ldrh	r3, [r3, #4]
 80044f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004500:	2b20      	cmp	r3, #32
 8004502:	d004      	beq.n	800450e <USBD_StdEPReq+0x2a>
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d002      	beq.n	800450e <USBD_StdEPReq+0x2a>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <USBD_StdEPReq+0x3a>
 800450c:	e13d      	b.n	800478a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
      break;
 800451c:	e13a      	b.n	8004794 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004526:	2b20      	cmp	r3, #32
 8004528:	d10a      	bne.n	8004540 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	6839      	ldr	r1, [r7, #0]
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	e12a      	b.n	8004796 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d03e      	beq.n	80045c6 <USBD_StdEPReq+0xe2>
 8004548:	2b03      	cmp	r3, #3
 800454a:	d002      	beq.n	8004552 <USBD_StdEPReq+0x6e>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d070      	beq.n	8004632 <USBD_StdEPReq+0x14e>
 8004550:	e115      	b.n	800477e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004558:	2b02      	cmp	r3, #2
 800455a:	d002      	beq.n	8004562 <USBD_StdEPReq+0x7e>
 800455c:	2b03      	cmp	r3, #3
 800455e:	d015      	beq.n	800458c <USBD_StdEPReq+0xa8>
 8004560:	e02b      	b.n	80045ba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004562:	7bbb      	ldrb	r3, [r7, #14]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <USBD_StdEPReq+0x9e>
 8004568:	7bbb      	ldrb	r3, [r7, #14]
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d009      	beq.n	8004582 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	4619      	mov	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 f854 	bl	8005620 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004578:	2180      	movs	r1, #128	; 0x80
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 f850 	bl	8005620 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004580:	e020      	b.n	80045c4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fc1b 	bl	8004dc0 <USBD_CtlError>
              break;
 800458a:	e01b      	b.n	80045c4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	885b      	ldrh	r3, [r3, #2]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10e      	bne.n	80045b2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <USBD_StdEPReq+0xce>
 800459a:	7bbb      	ldrb	r3, [r7, #14]
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d008      	beq.n	80045b2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	88db      	ldrh	r3, [r3, #6]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f001 f837 	bl	8005620 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fccc 	bl	8004f50 <USBD_CtlSendStatus>

              break;
 80045b8:	e004      	b.n	80045c4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fbff 	bl	8004dc0 <USBD_CtlError>
              break;
 80045c2:	bf00      	nop
          }
          break;
 80045c4:	e0e0      	b.n	8004788 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d002      	beq.n	80045d6 <USBD_StdEPReq+0xf2>
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d015      	beq.n	8004600 <USBD_StdEPReq+0x11c>
 80045d4:	e026      	b.n	8004624 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80045d6:	7bbb      	ldrb	r3, [r7, #14]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <USBD_StdEPReq+0x112>
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d009      	beq.n	80045f6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80045e2:	7bbb      	ldrb	r3, [r7, #14]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f81a 	bl	8005620 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f001 f816 	bl	8005620 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80045f4:	e01c      	b.n	8004630 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fbe1 	bl	8004dc0 <USBD_CtlError>
              break;
 80045fe:	e017      	b.n	8004630 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	885b      	ldrh	r3, [r3, #2]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d112      	bne.n	800462e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004608:	7bbb      	ldrb	r3, [r7, #14]
 800460a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004612:	7bbb      	ldrb	r3, [r7, #14]
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 f821 	bl	800565e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fc97 	bl	8004f50 <USBD_CtlSendStatus>
              }
              break;
 8004622:	e004      	b.n	800462e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fbca 	bl	8004dc0 <USBD_CtlError>
              break;
 800462c:	e000      	b.n	8004630 <USBD_StdEPReq+0x14c>
              break;
 800462e:	bf00      	nop
          }
          break;
 8004630:	e0aa      	b.n	8004788 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004638:	2b02      	cmp	r3, #2
 800463a:	d002      	beq.n	8004642 <USBD_StdEPReq+0x15e>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d032      	beq.n	80046a6 <USBD_StdEPReq+0x1c2>
 8004640:	e097      	b.n	8004772 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004642:	7bbb      	ldrb	r3, [r7, #14]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <USBD_StdEPReq+0x174>
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	2b80      	cmp	r3, #128	; 0x80
 800464c:	d004      	beq.n	8004658 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fbb5 	bl	8004dc0 <USBD_CtlError>
                break;
 8004656:	e091      	b.n	800477c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800465c:	2b00      	cmp	r3, #0
 800465e:	da0b      	bge.n	8004678 <USBD_StdEPReq+0x194>
 8004660:	7bbb      	ldrb	r3, [r7, #14]
 8004662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	3310      	adds	r3, #16
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	e00b      	b.n	8004690 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	3304      	adds	r3, #4
 8004690:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2202      	movs	r2, #2
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fbf8 	bl	8004e94 <USBD_CtlSendData>
              break;
 80046a4:	e06a      	b.n	800477c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80046a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da11      	bge.n	80046d2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	f003 020f 	and.w	r2, r3, #15
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3318      	adds	r3, #24
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d117      	bne.n	80046f8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fb78 	bl	8004dc0 <USBD_CtlError>
                  break;
 80046d0:	e054      	b.n	800477c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80046d2:	7bbb      	ldrb	r3, [r7, #14]
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb65 	bl	8004dc0 <USBD_CtlError>
                  break;
 80046f6:	e041      	b.n	800477c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da0b      	bge.n	8004718 <USBD_StdEPReq+0x234>
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	3310      	adds	r3, #16
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3304      	adds	r3, #4
 8004716:	e00b      	b.n	8004730 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004718:	7bbb      	ldrb	r3, [r7, #14]
 800471a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	3304      	adds	r3, #4
 8004730:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <USBD_StdEPReq+0x25a>
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d103      	bne.n	8004746 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e00e      	b.n	8004764 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ffa6 	bl	800569c <USBD_LL_IsStallEP>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e002      	b.n	8004764 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2202      	movs	r2, #2
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fb92 	bl	8004e94 <USBD_CtlSendData>
              break;
 8004770:	e004      	b.n	800477c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb23 	bl	8004dc0 <USBD_CtlError>
              break;
 800477a:	bf00      	nop
          }
          break;
 800477c:	e004      	b.n	8004788 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb1d 	bl	8004dc0 <USBD_CtlError>
          break;
 8004786:	bf00      	nop
      }
      break;
 8004788:	e004      	b.n	8004794 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fb17 	bl	8004dc0 <USBD_CtlError>
      break;
 8004792:	bf00      	nop
  }

  return ret;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	885b      	ldrh	r3, [r3, #2]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	f200 8128 	bhi.w	8004a16 <USBD_GetDescriptor+0x276>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <USBD_GetDescriptor+0x2c>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047e9 	.word	0x080047e9
 80047d0:	08004801 	.word	0x08004801
 80047d4:	08004841 	.word	0x08004841
 80047d8:	08004a17 	.word	0x08004a17
 80047dc:	08004a17 	.word	0x08004a17
 80047e0:	080049b7 	.word	0x080049b7
 80047e4:	080049e3 	.word	0x080049e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	7c12      	ldrb	r2, [r2, #16]
 80047f4:	f107 0108 	add.w	r1, r7, #8
 80047f8:	4610      	mov	r0, r2
 80047fa:	4798      	blx	r3
 80047fc:	60f8      	str	r0, [r7, #12]
      break;
 80047fe:	e112      	b.n	8004a26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7c1b      	ldrb	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f107 0208 	add.w	r2, r7, #8
 8004814:	4610      	mov	r0, r2
 8004816:	4798      	blx	r3
 8004818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004822:	e100      	b.n	8004a26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f107 0208 	add.w	r2, r7, #8
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
 8004834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	2202      	movs	r2, #2
 800483c:	701a      	strb	r2, [r3, #0]
      break;
 800483e:	e0f2      	b.n	8004a26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	885b      	ldrh	r3, [r3, #2]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b05      	cmp	r3, #5
 8004848:	f200 80ac 	bhi.w	80049a4 <USBD_GetDescriptor+0x204>
 800484c:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <USBD_GetDescriptor+0xb4>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	0800486d 	.word	0x0800486d
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048d5 	.word	0x080048d5
 8004860:	08004909 	.word	0x08004909
 8004864:	0800493d 	.word	0x0800493d
 8004868:	08004971 	.word	0x08004971
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	7c12      	ldrb	r2, [r2, #16]
 8004884:	f107 0108 	add.w	r1, r7, #8
 8004888:	4610      	mov	r0, r2
 800488a:	4798      	blx	r3
 800488c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800488e:	e091      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa94 	bl	8004dc0 <USBD_CtlError>
            err++;
 8004898:	7afb      	ldrb	r3, [r7, #11]
 800489a:	3301      	adds	r3, #1
 800489c:	72fb      	strb	r3, [r7, #11]
          break;
 800489e:	e089      	b.n	80049b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	7c12      	ldrb	r2, [r2, #16]
 80048b8:	f107 0108 	add.w	r1, r7, #8
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
 80048c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80048c2:	e077      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa7a 	bl	8004dc0 <USBD_CtlError>
            err++;
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	3301      	adds	r3, #1
 80048d0:	72fb      	strb	r3, [r7, #11]
          break;
 80048d2:	e06f      	b.n	80049b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	7c12      	ldrb	r2, [r2, #16]
 80048ec:	f107 0108 	add.w	r1, r7, #8
 80048f0:	4610      	mov	r0, r2
 80048f2:	4798      	blx	r3
 80048f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80048f6:	e05d      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa60 	bl	8004dc0 <USBD_CtlError>
            err++;
 8004900:	7afb      	ldrb	r3, [r7, #11]
 8004902:	3301      	adds	r3, #1
 8004904:	72fb      	strb	r3, [r7, #11]
          break;
 8004906:	e055      	b.n	80049b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	7c12      	ldrb	r2, [r2, #16]
 8004920:	f107 0108 	add.w	r1, r7, #8
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800492a:	e043      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa46 	bl	8004dc0 <USBD_CtlError>
            err++;
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	3301      	adds	r3, #1
 8004938:	72fb      	strb	r3, [r7, #11]
          break;
 800493a:	e03b      	b.n	80049b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	7c12      	ldrb	r2, [r2, #16]
 8004954:	f107 0108 	add.w	r1, r7, #8
 8004958:	4610      	mov	r0, r2
 800495a:	4798      	blx	r3
 800495c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800495e:	e029      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa2c 	bl	8004dc0 <USBD_CtlError>
            err++;
 8004968:	7afb      	ldrb	r3, [r7, #11]
 800496a:	3301      	adds	r3, #1
 800496c:	72fb      	strb	r3, [r7, #11]
          break;
 800496e:	e021      	b.n	80049b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	7c12      	ldrb	r2, [r2, #16]
 8004988:	f107 0108 	add.w	r1, r7, #8
 800498c:	4610      	mov	r0, r2
 800498e:	4798      	blx	r3
 8004990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004992:	e00f      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa12 	bl	8004dc0 <USBD_CtlError>
            err++;
 800499c:	7afb      	ldrb	r3, [r7, #11]
 800499e:	3301      	adds	r3, #1
 80049a0:	72fb      	strb	r3, [r7, #11]
          break;
 80049a2:	e007      	b.n	80049b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa0a 	bl	8004dc0 <USBD_CtlError>
          err++;
 80049ac:	7afb      	ldrb	r3, [r7, #11]
 80049ae:	3301      	adds	r3, #1
 80049b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80049b2:	e038      	b.n	8004a26 <USBD_GetDescriptor+0x286>
 80049b4:	e037      	b.n	8004a26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7c1b      	ldrb	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	f107 0208 	add.w	r2, r7, #8
 80049ca:	4610      	mov	r0, r2
 80049cc:	4798      	blx	r3
 80049ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80049d0:	e029      	b.n	8004a26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f9f3 	bl	8004dc0 <USBD_CtlError>
        err++;
 80049da:	7afb      	ldrb	r3, [r7, #11]
 80049dc:	3301      	adds	r3, #1
 80049de:	72fb      	strb	r3, [r7, #11]
      break;
 80049e0:	e021      	b.n	8004a26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7c1b      	ldrb	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	f107 0208 	add.w	r2, r7, #8
 80049f6:	4610      	mov	r0, r2
 80049f8:	4798      	blx	r3
 80049fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	2207      	movs	r2, #7
 8004a02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a04:	e00f      	b.n	8004a26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f9d9 	bl	8004dc0 <USBD_CtlError>
        err++;
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
 8004a10:	3301      	adds	r3, #1
 8004a12:	72fb      	strb	r3, [r7, #11]
      break;
 8004a14:	e007      	b.n	8004a26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9d1 	bl	8004dc0 <USBD_CtlError>
      err++;
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	3301      	adds	r3, #1
 8004a22:	72fb      	strb	r3, [r7, #11]
      break;
 8004a24:	bf00      	nop
  }

  if (err != 0U)
 8004a26:	7afb      	ldrb	r3, [r7, #11]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11c      	bne.n	8004a66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004a2c:	893b      	ldrh	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <USBD_GetDescriptor+0x2b6>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	88db      	ldrh	r3, [r3, #6]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	88da      	ldrh	r2, [r3, #6]
 8004a3e:	893b      	ldrh	r3, [r7, #8]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	bf28      	it	cs
 8004a44:	4613      	movcs	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa1f 	bl	8004e94 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	88db      	ldrh	r3, [r3, #6]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d104      	bne.n	8004a68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa76 	bl	8004f50 <USBD_CtlSendStatus>
 8004a64:	e000      	b.n	8004a68 <USBD_GetDescriptor+0x2c8>
    return;
 8004a66:	bf00      	nop
    }
  }
}
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop

08004a70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	889b      	ldrh	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d130      	bne.n	8004ae4 <USBD_SetAddress+0x74>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	88db      	ldrh	r3, [r3, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d12c      	bne.n	8004ae4 <USBD_SetAddress+0x74>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	885b      	ldrh	r3, [r3, #2]
 8004a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a90:	d828      	bhi.n	8004ae4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	885b      	ldrh	r3, [r3, #2]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d104      	bne.n	8004ab2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004aa8:	6839      	ldr	r1, [r7, #0]
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f988 	bl	8004dc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab0:	e01c      	b.n	8004aec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fe11 	bl	80056e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa43 	bl	8004f50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d004      	beq.n	8004ada <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ad8:	e008      	b.n	8004aec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae2:	e003      	b.n	8004aec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f96a 	bl	8004dc0 <USBD_CtlError>
  }
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	885b      	ldrh	r3, [r3, #2]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004b08:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d904      	bls.n	8004b1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f954 	bl	8004dc0 <USBD_CtlError>
 8004b18:	e075      	b.n	8004c06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d002      	beq.n	8004b2a <USBD_SetConfig+0x36>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d023      	beq.n	8004b70 <USBD_SetConfig+0x7c>
 8004b28:	e062      	b.n	8004bf0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004b2a:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01a      	beq.n	8004b68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004b44:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff f9f4 	bl	8003f38 <USBD_SetClassConfig>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d104      	bne.n	8004b60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f931 	bl	8004dc0 <USBD_CtlError>
            return;
 8004b5e:	e052      	b.n	8004c06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f9f5 	bl	8004f50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004b66:	e04e      	b.n	8004c06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f9f1 	bl	8004f50 <USBD_CtlSendStatus>
        break;
 8004b6e:	e04a      	b.n	8004c06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d112      	bne.n	8004b9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004b80:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <USBD_SetConfig+0x118>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff f9f0 	bl	8003f76 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9da 	bl	8004f50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004b9c:	e033      	b.n	8004c06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <USBD_SetConfig+0x118>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d01d      	beq.n	8004be8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff f9de 	bl	8003f76 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <USBD_SetConfig+0x118>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <USBD_SetConfig+0x118>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff f9b4 	bl	8003f38 <USBD_SetClassConfig>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d104      	bne.n	8004be0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8f1 	bl	8004dc0 <USBD_CtlError>
            return;
 8004bde:	e012      	b.n	8004c06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f9b5 	bl	8004f50 <USBD_CtlSendStatus>
        break;
 8004be6:	e00e      	b.n	8004c06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f9b1 	bl	8004f50 <USBD_CtlSendStatus>
        break;
 8004bee:	e00a      	b.n	8004c06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8e4 	bl	8004dc0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <USBD_SetConfig+0x118>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff f9b9 	bl	8003f76 <USBD_ClrClassConfig>
        break;
 8004c04:	bf00      	nop
    }
  }
}
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000198 	.word	0x20000198

08004c10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d004      	beq.n	8004c2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8cb 	bl	8004dc0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004c2a:	e021      	b.n	8004c70 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	db17      	blt.n	8004c66 <USBD_GetConfig+0x56>
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	dd02      	ble.n	8004c40 <USBD_GetConfig+0x30>
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d00b      	beq.n	8004c56 <USBD_GetConfig+0x46>
 8004c3e:	e012      	b.n	8004c66 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f920 	bl	8004e94 <USBD_CtlSendData>
        break;
 8004c54:	e00c      	b.n	8004c70 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f918 	bl	8004e94 <USBD_CtlSendData>
        break;
 8004c64:	e004      	b.n	8004c70 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8a9 	bl	8004dc0 <USBD_CtlError>
        break;
 8004c6e:	bf00      	nop
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d81e      	bhi.n	8004ccc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	88db      	ldrh	r3, [r3, #6]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d004      	beq.n	8004ca0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f891 	bl	8004dc0 <USBD_CtlError>
        break;
 8004c9e:	e01a      	b.n	8004cd6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f043 0202 	orr.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8e5 	bl	8004e94 <USBD_CtlSendData>
      break;
 8004cca:	e004      	b.n	8004cd6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f876 	bl	8004dc0 <USBD_CtlError>
      break;
 8004cd4:	bf00      	nop
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	885b      	ldrh	r3, [r3, #2]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f929 	bl	8004f50 <USBD_CtlSendStatus>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d16:	3b01      	subs	r3, #1
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d80b      	bhi.n	8004d34 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	885b      	ldrh	r3, [r3, #2]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10c      	bne.n	8004d3e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f90f 	bl	8004f50 <USBD_CtlSendStatus>
      }
      break;
 8004d32:	e004      	b.n	8004d3e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f842 	bl	8004dc0 <USBD_CtlError>
      break;
 8004d3c:	e000      	b.n	8004d40 <USBD_ClrFeature+0x3a>
      break;
 8004d3e:	bf00      	nop
  }
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	785a      	ldrb	r2, [r3, #1]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	3302      	adds	r3, #2
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	3303      	adds	r3, #3
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	3304      	adds	r3, #4
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	3305      	adds	r3, #5
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	3306      	adds	r3, #6
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	3307      	adds	r3, #7
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	80da      	strh	r2, [r3, #6]

}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fc27 	bl	8005620 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fc23 	bl	8005620 <USBD_LL_StallEP>
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d032      	beq.n	8004e5e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f834 	bl	8004e66 <USBD_GetLen>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	3301      	adds	r3, #1
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	75fa      	strb	r2, [r7, #23]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4413      	add	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	75fa      	strb	r2, [r7, #23]
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004e2e:	e012      	b.n	8004e56 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	60fa      	str	r2, [r7, #12]
 8004e36:	7dfa      	ldrb	r2, [r7, #23]
 8004e38:	1c51      	adds	r1, r2, #1
 8004e3a:	75f9      	strb	r1, [r7, #23]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	440a      	add	r2, r1
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	75fa      	strb	r2, [r7, #23]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4413      	add	r3, r2
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e8      	bne.n	8004e30 <USBD_GetString+0x4e>
    }
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004e72:	e005      	b.n	8004e80 <USBD_GetLen+0x1a>
  {
    len++;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	3301      	adds	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f5      	bne.n	8004e74 <USBD_GetLen+0xe>
  }

  return len;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fc31 	bl	8005724 <USBD_LL_Transmit>

  return USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fc1f 	bl	8005724 <USBD_LL_Transmit>

  return USBD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2203      	movs	r2, #3
 8004f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fc24 	bl	800576a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	2100      	movs	r1, #0
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fc12 	bl	800576a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004f60:	2300      	movs	r3, #0
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fbdc 	bl	8005724 <USBD_LL_Transmit>

  return USBD_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2205      	movs	r2, #5
 8004f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f86:	2300      	movs	r3, #0
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fbec 	bl	800576a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4912      	ldr	r1, [pc, #72]	; (8004fec <MX_USB_DEVICE_Init+0x50>)
 8004fa4:	4812      	ldr	r0, [pc, #72]	; (8004ff0 <MX_USB_DEVICE_Init+0x54>)
 8004fa6:	f7fe ff6d 	bl	8003e84 <USBD_Init>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004fb0:	f7fb f9fe 	bl	80003b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004fb4:	490f      	ldr	r1, [pc, #60]	; (8004ff4 <MX_USB_DEVICE_Init+0x58>)
 8004fb6:	480e      	ldr	r0, [pc, #56]	; (8004ff0 <MX_USB_DEVICE_Init+0x54>)
 8004fb8:	f7fe ff8f 	bl	8003eda <USBD_RegisterClass>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004fc2:	f7fb f9f5 	bl	80003b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004fc6:	490c      	ldr	r1, [pc, #48]	; (8004ff8 <MX_USB_DEVICE_Init+0x5c>)
 8004fc8:	4809      	ldr	r0, [pc, #36]	; (8004ff0 <MX_USB_DEVICE_Init+0x54>)
 8004fca:	f7fe feef 	bl	8003dac <USBD_CDC_RegisterInterface>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004fd4:	f7fb f9ec 	bl	80003b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004fd8:	4805      	ldr	r0, [pc, #20]	; (8004ff0 <MX_USB_DEVICE_Init+0x54>)
 8004fda:	f7fe ff97 	bl	8003f0c <USBD_Start>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004fe4:	f7fb f9e4 	bl	80003b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004fe8:	bf00      	nop
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	2000012c 	.word	0x2000012c
 8004ff0:	200003f4 	.word	0x200003f4
 8004ff4:	20000018 	.word	0x20000018
 8004ff8:	2000011c 	.word	0x2000011c

08004ffc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005000:	2200      	movs	r2, #0
 8005002:	4905      	ldr	r1, [pc, #20]	; (8005018 <CDC_Init_FS+0x1c>)
 8005004:	4805      	ldr	r0, [pc, #20]	; (800501c <CDC_Init_FS+0x20>)
 8005006:	f7fe fee7 	bl	8003dd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800500a:	4905      	ldr	r1, [pc, #20]	; (8005020 <CDC_Init_FS+0x24>)
 800500c:	4803      	ldr	r0, [pc, #12]	; (800501c <CDC_Init_FS+0x20>)
 800500e:	f7fe fefc 	bl	8003e0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005012:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000aa0 	.word	0x20000aa0
 800501c:	200003f4 	.word	0x200003f4
 8005020:	200006b8 	.word	0x200006b8

08005024 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005028:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
	...

08005034 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	71fb      	strb	r3, [r7, #7]
 8005040:	4613      	mov	r3, r2
 8005042:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2b23      	cmp	r3, #35	; 0x23
 8005048:	d84a      	bhi.n	80050e0 <CDC_Control_FS+0xac>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <CDC_Control_FS+0x1c>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	080050e1 	.word	0x080050e1
 8005054:	080050e1 	.word	0x080050e1
 8005058:	080050e1 	.word	0x080050e1
 800505c:	080050e1 	.word	0x080050e1
 8005060:	080050e1 	.word	0x080050e1
 8005064:	080050e1 	.word	0x080050e1
 8005068:	080050e1 	.word	0x080050e1
 800506c:	080050e1 	.word	0x080050e1
 8005070:	080050e1 	.word	0x080050e1
 8005074:	080050e1 	.word	0x080050e1
 8005078:	080050e1 	.word	0x080050e1
 800507c:	080050e1 	.word	0x080050e1
 8005080:	080050e1 	.word	0x080050e1
 8005084:	080050e1 	.word	0x080050e1
 8005088:	080050e1 	.word	0x080050e1
 800508c:	080050e1 	.word	0x080050e1
 8005090:	080050e1 	.word	0x080050e1
 8005094:	080050e1 	.word	0x080050e1
 8005098:	080050e1 	.word	0x080050e1
 800509c:	080050e1 	.word	0x080050e1
 80050a0:	080050e1 	.word	0x080050e1
 80050a4:	080050e1 	.word	0x080050e1
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	080050e1 	.word	0x080050e1
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e1 	.word	0x080050e1
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	080050e1 	.word	0x080050e1
 80050cc:	080050e1 	.word	0x080050e1
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050e1 	.word	0x080050e1
 80050d8:	080050e1 	.word	0x080050e1
 80050dc:	080050e1 	.word	0x080050e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80050e0:	bf00      	nop
  }

  return (USBD_OK);
 80050e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop

080050f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4805      	ldr	r0, [pc, #20]	; (8005114 <CDC_Receive_FS+0x24>)
 80050fe:	f7fe fe84 	bl	8003e0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005102:	4804      	ldr	r0, [pc, #16]	; (8005114 <CDC_Receive_FS+0x24>)
 8005104:	f7fe fe94 	bl	8003e30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005108:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	200003f4 	.word	0x200003f4

08005118 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	6039      	str	r1, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2212      	movs	r2, #18
 8005128:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800512a:	4b03      	ldr	r3, [pc, #12]	; (8005138 <USBD_FS_DeviceDescriptor+0x20>)
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000148 	.word	0x20000148

0800513c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800514e:	4b03      	ldr	r3, [pc, #12]	; (800515c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	2000015c 	.word	0x2000015c

08005160 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <USBD_FS_ProductStrDescriptor+0x34>)
 8005176:	4808      	ldr	r0, [pc, #32]	; (8005198 <USBD_FS_ProductStrDescriptor+0x38>)
 8005178:	f7ff fe33 	bl	8004de2 <USBD_GetString>
 800517c:	e004      	b.n	8005188 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <USBD_FS_ProductStrDescriptor+0x34>)
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <USBD_FS_ProductStrDescriptor+0x38>)
 8005184:	f7ff fe2d 	bl	8004de2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000e88 	.word	0x20000e88
 8005198:	080058f4 	.word	0x080058f4

0800519c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	4904      	ldr	r1, [pc, #16]	; (80051bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80051ac:	4804      	ldr	r0, [pc, #16]	; (80051c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80051ae:	f7ff fe18 	bl	8004de2 <USBD_GetString>
  return USBD_StrDesc;
 80051b2:	4b02      	ldr	r3, [pc, #8]	; (80051bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000e88 	.word	0x20000e88
 80051c0:	0800590c 	.word	0x0800590c

080051c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	6039      	str	r1, [r7, #0]
 80051ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	221a      	movs	r2, #26
 80051d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80051d6:	f000 f843 	bl	8005260 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80051da:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000160 	.word	0x20000160

080051e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d105      	bne.n	8005206 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	4907      	ldr	r1, [pc, #28]	; (800521c <USBD_FS_ConfigStrDescriptor+0x34>)
 80051fe:	4808      	ldr	r0, [pc, #32]	; (8005220 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005200:	f7ff fdef 	bl	8004de2 <USBD_GetString>
 8005204:	e004      	b.n	8005210 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	4904      	ldr	r1, [pc, #16]	; (800521c <USBD_FS_ConfigStrDescriptor+0x34>)
 800520a:	4805      	ldr	r0, [pc, #20]	; (8005220 <USBD_FS_ConfigStrDescriptor+0x38>)
 800520c:	f7ff fde9 	bl	8004de2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000e88 	.word	0x20000e88
 8005220:	08005920 	.word	0x08005920

08005224 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	4907      	ldr	r1, [pc, #28]	; (8005258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800523a:	4808      	ldr	r0, [pc, #32]	; (800525c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800523c:	f7ff fdd1 	bl	8004de2 <USBD_GetString>
 8005240:	e004      	b.n	800524c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	4904      	ldr	r1, [pc, #16]	; (8005258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005246:	4805      	ldr	r0, [pc, #20]	; (800525c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005248:	f7ff fdcb 	bl	8004de2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000e88 	.word	0x20000e88
 800525c:	0800592c 	.word	0x0800592c

08005260 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <Get_SerialNum+0x44>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800526c:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <Get_SerialNum+0x48>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <Get_SerialNum+0x4c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005286:	2208      	movs	r2, #8
 8005288:	4909      	ldr	r1, [pc, #36]	; (80052b0 <Get_SerialNum+0x50>)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f814 	bl	80052b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005290:	2204      	movs	r2, #4
 8005292:	4908      	ldr	r1, [pc, #32]	; (80052b4 <Get_SerialNum+0x54>)
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f000 f80f 	bl	80052b8 <IntToUnicode>
  }
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	1ffff7e8 	.word	0x1ffff7e8
 80052a8:	1ffff7ec 	.word	0x1ffff7ec
 80052ac:	1ffff7f0 	.word	0x1ffff7f0
 80052b0:	20000162 	.word	0x20000162
 80052b4:	20000172 	.word	0x20000172

080052b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]
 80052ce:	e027      	b.n	8005320 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	0f1b      	lsrs	r3, r3, #28
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d80b      	bhi.n	80052f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	0f1b      	lsrs	r3, r3, #28
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4619      	mov	r1, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	440b      	add	r3, r1
 80052e8:	3230      	adds	r2, #48	; 0x30
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e00a      	b.n	8005306 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	0f1b      	lsrs	r3, r3, #28
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4619      	mov	r1, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	440b      	add	r3, r1
 8005300:	3237      	adds	r2, #55	; 0x37
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	3301      	adds	r3, #1
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	3301      	adds	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
 8005320:	7dfa      	ldrb	r2, [r7, #23]
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	429a      	cmp	r2, r3
 8005326:	d3d3      	bcc.n	80052d0 <IntToUnicode+0x18>
  }
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
	...

08005334 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <HAL_PCD_MspInit+0x44>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d113      	bne.n	800536e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <HAL_PCD_MspInit+0x48>)
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4a0c      	ldr	r2, [pc, #48]	; (800537c <HAL_PCD_MspInit+0x48>)
 800534c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005350:	61d3      	str	r3, [r2, #28]
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_PCD_MspInit+0x48>)
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800535e:	2200      	movs	r2, #0
 8005360:	2100      	movs	r1, #0
 8005362:	2014      	movs	r0, #20
 8005364:	f7fb fc69 	bl	8000c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005368:	2014      	movs	r0, #20
 800536a:	f7fb fc82 	bl	8000c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40005c00 	.word	0x40005c00
 800537c:	40021000 	.word	0x40021000

08005380 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7fe fe00 	bl	8003f9c <USBD_LL_SetupStage>
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	015b      	lsls	r3, r3, #5
 80053bc:	4413      	add	r3, r2
 80053be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	4619      	mov	r1, r3
 80053c8:	f7fe fe33 	bl	8004032 <USBD_LL_DataOutStage>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	015b      	lsls	r3, r3, #5
 80053ec:	4413      	add	r3, r2
 80053ee:	333c      	adds	r3, #60	; 0x3c
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7fe fe8d 	bl	8004114 <USBD_LL_DataInStage>
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe ff9d 	bl	8004350 <USBD_LL_SOF>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d001      	beq.n	8005436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005432:	f7fa ffbd 	bl	80003b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe ff4d 	bl	80042e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe ff06 	bl	800425e <USBD_LL_Reset>
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe ff47 	bl	80042fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <HAL_PCD_SuspendCallback+0x30>)
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4a03      	ldr	r2, [pc, #12]	; (800548c <HAL_PCD_SuspendCallback+0x30>)
 800547e:	f043 0306 	orr.w	r3, r3, #6
 8005482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe ff41 	bl	8004326 <USBD_LL_Resume>
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80054b4:	4a28      	ldr	r2, [pc, #160]	; (8005558 <USBD_LL_Init+0xac>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a26      	ldr	r2, [pc, #152]	; (8005558 <USBD_LL_Init+0xac>)
 80054c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80054c4:	4b24      	ldr	r3, [pc, #144]	; (8005558 <USBD_LL_Init+0xac>)
 80054c6:	4a25      	ldr	r2, [pc, #148]	; (800555c <USBD_LL_Init+0xb0>)
 80054c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <USBD_LL_Init+0xac>)
 80054cc:	2208      	movs	r2, #8
 80054ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80054d0:	4b21      	ldr	r3, [pc, #132]	; (8005558 <USBD_LL_Init+0xac>)
 80054d2:	2202      	movs	r2, #2
 80054d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80054d6:	4b20      	ldr	r3, [pc, #128]	; (8005558 <USBD_LL_Init+0xac>)
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80054dc:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <USBD_LL_Init+0xac>)
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80054e2:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <USBD_LL_Init+0xac>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80054e8:	481b      	ldr	r0, [pc, #108]	; (8005558 <USBD_LL_Init+0xac>)
 80054ea:	f7fb fd4f 	bl	8000f8c <HAL_PCD_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80054f4:	f7fa ff5c 	bl	80003b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80054fe:	2318      	movs	r3, #24
 8005500:	2200      	movs	r2, #0
 8005502:	2100      	movs	r1, #0
 8005504:	f7fc fbe8 	bl	8001cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800550e:	2358      	movs	r3, #88	; 0x58
 8005510:	2200      	movs	r2, #0
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	f7fc fbe0 	bl	8001cd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800551e:	23c0      	movs	r3, #192	; 0xc0
 8005520:	2200      	movs	r2, #0
 8005522:	2181      	movs	r1, #129	; 0x81
 8005524:	f7fc fbd8 	bl	8001cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800552e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005532:	2200      	movs	r2, #0
 8005534:	2101      	movs	r1, #1
 8005536:	f7fc fbcf 	bl	8001cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005544:	2200      	movs	r2, #0
 8005546:	2182      	movs	r1, #130	; 0x82
 8005548:	f7fc fbc6 	bl	8001cd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20001088 	.word	0x20001088
 800555c:	40005c00 	.word	0x40005c00

08005560 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005576:	4618      	mov	r0, r3
 8005578:	f7fb fde9 	bl	800114e <HAL_PCD_Start>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f948 	bl	8005818 <USBD_Get_USB_Status>
 8005588:	4603      	mov	r3, r0
 800558a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800558c:	7bbb      	ldrb	r3, [r7, #14]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	461a      	mov	r2, r3
 80055a4:	4603      	mov	r3, r0
 80055a6:	70fb      	strb	r3, [r7, #3]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70bb      	strb	r3, [r7, #2]
 80055ac:	4613      	mov	r3, r2
 80055ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80055be:	78bb      	ldrb	r3, [r7, #2]
 80055c0:	883a      	ldrh	r2, [r7, #0]
 80055c2:	78f9      	ldrb	r1, [r7, #3]
 80055c4:	f7fb ff1c 	bl	8001400 <HAL_PCD_EP_Open>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f922 	bl	8005818 <USBD_Get_USB_Status>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7fb ff5d 	bl	80014c0 <HAL_PCD_EP_Close>
 8005606:	4603      	mov	r3, r0
 8005608:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f903 	bl	8005818 <USBD_Get_USB_Status>
 8005612:	4603      	mov	r3, r0
 8005614:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005616:	7bbb      	ldrb	r3, [r7, #14]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f7fc f807 	bl	8001652 <HAL_PCD_EP_SetStall>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f8e4 	bl	8005818 <USBD_Get_USB_Status>
 8005650:	4603      	mov	r3, r0
 8005652:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005654:	7bbb      	ldrb	r3, [r7, #14]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	4611      	mov	r1, r2
 800567c:	4618      	mov	r0, r3
 800567e:	f7fc f842 	bl	8001706 <HAL_PCD_EP_ClrStall>
 8005682:	4603      	mov	r3, r0
 8005684:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f8c5 	bl	8005818 <USBD_Get_USB_Status>
 800568e:	4603      	mov	r3, r0
 8005690:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005692:	7bbb      	ldrb	r3, [r7, #14]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056ae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80056b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da08      	bge.n	80056ca <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	015b      	lsls	r3, r3, #5
 80056c2:	4413      	add	r3, r2
 80056c4:	332a      	adds	r3, #42	; 0x2a
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	e008      	b.n	80056dc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	015b      	lsls	r3, r3, #5
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80056da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr

080056e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f7fb fe56 	bl	80013b6 <HAL_PCD_SetAddress>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f881 	bl	8005818 <USBD_Get_USB_Status>
 8005716:	4603      	mov	r3, r0
 8005718:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800571a:	7bbb      	ldrb	r3, [r7, #14]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	607a      	str	r2, [r7, #4]
 800572e:	461a      	mov	r2, r3
 8005730:	460b      	mov	r3, r1
 8005732:	72fb      	strb	r3, [r7, #11]
 8005734:	4613      	mov	r3, r2
 8005736:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	7af9      	ldrb	r1, [r7, #11]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	f7fb ff48 	bl	80015e0 <HAL_PCD_EP_Transmit>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f85e 	bl	8005818 <USBD_Get_USB_Status>
 800575c:	4603      	mov	r3, r0
 800575e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005760:	7dbb      	ldrb	r3, [r7, #22]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	461a      	mov	r2, r3
 8005776:	460b      	mov	r3, r1
 8005778:	72fb      	strb	r3, [r7, #11]
 800577a:	4613      	mov	r3, r2
 800577c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800578c:	893b      	ldrh	r3, [r7, #8]
 800578e:	7af9      	ldrb	r1, [r7, #11]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	f7fb fed7 	bl	8001544 <HAL_PCD_EP_Receive>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f83b 	bl	8005818 <USBD_Get_USB_Status>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80057a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fb fef6 	bl	80015b8 <HAL_PCD_EP_GetRxCount>
 80057cc:	4603      	mov	r3, r0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80057e0:	4b02      	ldr	r3, [pc, #8]	; (80057ec <USBD_static_malloc+0x14>)
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	2000019c 	.word	0x2000019c

080057f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d817      	bhi.n	800585c <USBD_Get_USB_Status+0x44>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USBD_Get_USB_Status+0x1c>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005845 	.word	0x08005845
 8005838:	0800584b 	.word	0x0800584b
 800583c:	08005851 	.word	0x08005851
 8005840:	08005857 	.word	0x08005857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]
    break;
 8005848:	e00b      	b.n	8005862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800584a:	2302      	movs	r3, #2
 800584c:	73fb      	strb	r3, [r7, #15]
    break;
 800584e:	e008      	b.n	8005862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
    break;
 8005854:	e005      	b.n	8005862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005856:	2302      	movs	r3, #2
 8005858:	73fb      	strb	r3, [r7, #15]
    break;
 800585a:	e002      	b.n	8005862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800585c:	2302      	movs	r3, #2
 800585e:	73fb      	strb	r3, [r7, #15]
    break;
 8005860:	bf00      	nop
  }
  return usb_status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	2500      	movs	r5, #0
 8005874:	4e0c      	ldr	r6, [pc, #48]	; (80058a8 <__libc_init_array+0x38>)
 8005876:	4c0d      	ldr	r4, [pc, #52]	; (80058ac <__libc_init_array+0x3c>)
 8005878:	1ba4      	subs	r4, r4, r6
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	42a5      	cmp	r5, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	f000 f822 	bl	80058c8 <_init>
 8005884:	2500      	movs	r5, #0
 8005886:	4e0a      	ldr	r6, [pc, #40]	; (80058b0 <__libc_init_array+0x40>)
 8005888:	4c0a      	ldr	r4, [pc, #40]	; (80058b4 <__libc_init_array+0x44>)
 800588a:	1ba4      	subs	r4, r4, r6
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	42a5      	cmp	r5, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005898:	4798      	blx	r3
 800589a:	3501      	adds	r5, #1
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058a2:	4798      	blx	r3
 80058a4:	3501      	adds	r5, #1
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	0800594c 	.word	0x0800594c
 80058ac:	0800594c 	.word	0x0800594c
 80058b0:	0800594c 	.word	0x0800594c
 80058b4:	08005950 	.word	0x08005950

080058b8 <memset>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4402      	add	r2, r0
 80058bc:	4293      	cmp	r3, r2
 80058be:	d100      	bne.n	80058c2 <memset+0xa>
 80058c0:	4770      	bx	lr
 80058c2:	f803 1b01 	strb.w	r1, [r3], #1
 80058c6:	e7f9      	b.n	80058bc <memset+0x4>

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
