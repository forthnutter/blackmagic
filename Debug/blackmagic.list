
blackmagic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ddc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  0002038c  2**0
                  CONTENTS
  4 .ARM          00000000  08008390  08008390  0002038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008390  08008390  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  08008398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000162c  2000038c  08008724  0002038c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019b8  08008724  000219b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d8a  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003be8  00000000  00000000  0003813f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0003ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a1c  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010716  00000000  00000000  00056044  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074b77  00000000  00000000  0006675a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db2d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c38  00000000  00000000  000db34c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000038c 	.word	0x2000038c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ed0 	.word	0x08007ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000390 	.word	0x20000390
 8000148:	08007ed0 	.word	0x08007ed0

0800014c <setjmp>:
 800014c:	46ec      	mov	ip, sp
 800014e:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000152:	f04f 0000 	mov.w	r0, #0
 8000156:	4770      	bx	lr

08000158 <longjmp>:
 8000158:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800015c:	46e5      	mov	sp, ip
 800015e:	0008      	movs	r0, r1
 8000160:	bf08      	it	eq
 8000162:	2001      	moveq	r0, #1
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop

08000168 <strcmp>:
 8000168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800016c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000170:	2a01      	cmp	r2, #1
 8000172:	bf28      	it	cs
 8000174:	429a      	cmpcs	r2, r3
 8000176:	d0f7      	beq.n	8000168 <strcmp>
 8000178:	1ad0      	subs	r0, r2, r3
 800017a:	4770      	bx	lr

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <hostio_reply>:
#include "gdb_packet.h"

int gdb_main_loop(struct target_controller *, bool in_syscall);

int hostio_reply(struct target_controller *tc, char *pbuf, int len)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08c      	sub	sp, #48	; 0x30
 8000190:	af02      	add	r7, sp, #8
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
	(void)len;
	int retcode, items, errno_;
	char c, *p;
	if (pbuf[1] == '-')
 8000198:	68bb      	ldr	r3, [r7, #8]
 800019a:	3301      	adds	r3, #1
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	2b2d      	cmp	r3, #45	; 0x2d
 80001a0:	d103      	bne.n	80001aa <hostio_reply+0x1e>
		p = &pbuf[2];
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	3302      	adds	r3, #2
 80001a6:	627b      	str	r3, [r7, #36]	; 0x24
 80001a8:	e002      	b.n	80001b0 <hostio_reply+0x24>
	else
		p = &pbuf[1];
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	3301      	adds	r3, #1
 80001ae:	627b      	str	r3, [r7, #36]	; 0x24
	items = sscanf(p, "%x,%x,%c", &retcode, &errno_, &c);
 80001b0:	f107 0118 	add.w	r1, r7, #24
 80001b4:	f107 021c 	add.w	r2, r7, #28
 80001b8:	f107 0317 	add.w	r3, r7, #23
 80001bc:	9300      	str	r3, [sp, #0]
 80001be:	460b      	mov	r3, r1
 80001c0:	4912      	ldr	r1, [pc, #72]	; (800020c <hostio_reply+0x80>)
 80001c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80001c4:	f006 fe06 	bl	8006dd4 <siscanf>
 80001c8:	6238      	str	r0, [r7, #32]
	if (pbuf[1] == '-')
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	3301      	adds	r3, #1
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b2d      	cmp	r3, #45	; 0x2d
 80001d2:	d102      	bne.n	80001da <hostio_reply+0x4e>
		retcode = -retcode;
 80001d4:	69fb      	ldr	r3, [r7, #28]
 80001d6:	425b      	negs	r3, r3
 80001d8:	61fb      	str	r3, [r7, #28]

	/* if break is requested */
	tc->interrupted = items == 3 && c == 'C';
 80001da:	6a3b      	ldr	r3, [r7, #32]
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d104      	bne.n	80001ea <hostio_reply+0x5e>
 80001e0:	7dfb      	ldrb	r3, [r7, #23]
 80001e2:	2b43      	cmp	r3, #67	; 0x43
 80001e4:	d101      	bne.n	80001ea <hostio_reply+0x5e>
 80001e6:	2301      	movs	r3, #1
 80001e8:	e000      	b.n	80001ec <hostio_reply+0x60>
 80001ea:	2300      	movs	r3, #0
 80001ec:	f003 0301 	and.w	r3, r3, #1
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tc->errno_ = errno_;
 80001f8:	69bb      	ldr	r3, [r7, #24]
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return retcode;
 8000202:	69fb      	ldr	r3, [r7, #28]
}
 8000204:	4618      	mov	r0, r3
 8000206:	3728      	adds	r7, #40	; 0x28
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	08007ee8 	.word	0x08007ee8

08000210 <hostio_open>:

/* Interface to host system calls */
int hostio_open(struct target_controller *tc,
	        target_addr path, size_t path_len,
                enum target_open_flags flags, mode_t mode)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af02      	add	r7, sp, #8
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
 800021c:	807b      	strh	r3, [r7, #2]
	gdb_putpacket_f("Fopen,%08X/%X,%08X,%08X", path, path_len, flags, mode);;;;
 800021e:	887a      	ldrh	r2, [r7, #2]
 8000220:	69bb      	ldr	r3, [r7, #24]
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	4613      	mov	r3, r2
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	68b9      	ldr	r1, [r7, #8]
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <hostio_open+0x34>)
 800022c:	f000 ff7e 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 8000230:	2101      	movs	r1, #1
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f000 f9b6 	bl	80005a4 <gdb_main_loop>
 8000238:	4603      	mov	r3, r0
}
 800023a:	4618      	mov	r0, r3
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	08007ef4 	.word	0x08007ef4

08000248 <hostio_close>:

int hostio_close(struct target_controller *tc, int fd)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
	gdb_putpacket_f("Fclose,%08X", fd);
 8000252:	6839      	ldr	r1, [r7, #0]
 8000254:	4805      	ldr	r0, [pc, #20]	; (800026c <hostio_close+0x24>)
 8000256:	f000 ff69 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 800025a:	2101      	movs	r1, #1
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 f9a1 	bl	80005a4 <gdb_main_loop>
 8000262:	4603      	mov	r3, r0
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	08007f0c 	.word	0x08007f0c

08000270 <hostio_read>:

int hostio_read(struct target_controller *tc,
	         int fd, target_addr buf, unsigned int count)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
	gdb_putpacket_f("Fread,%08X,%08X,%08X", fd, buf, count);
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	68b9      	ldr	r1, [r7, #8]
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <hostio_read+0x2c>)
 8000286:	f000 ff51 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 800028a:	2101      	movs	r1, #1
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f000 f989 	bl	80005a4 <gdb_main_loop>
 8000292:	4603      	mov	r3, r0
}
 8000294:	4618      	mov	r0, r3
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	08007f18 	.word	0x08007f18

080002a0 <hostio_write>:

int hostio_write(struct target_controller *tc,
	          int fd, target_addr buf, unsigned int count)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	603b      	str	r3, [r7, #0]
	gdb_putpacket_f("Fwrite,%08X,%08X,%08X", fd, buf, count);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	68b9      	ldr	r1, [r7, #8]
 80002b4:	4805      	ldr	r0, [pc, #20]	; (80002cc <hostio_write+0x2c>)
 80002b6:	f000 ff39 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 80002ba:	2101      	movs	r1, #1
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f000 f971 	bl	80005a4 <gdb_main_loop>
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08007f30 	.word	0x08007f30

080002d0 <hostio_lseek>:

long hostio_lseek(struct target_controller *tc,
	           int fd, long offset, enum target_seek_flag flag)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
 80002dc:	70fb      	strb	r3, [r7, #3]
	gdb_putpacket_f("Flseek,%08X,%08X,%08X", fd, offset, flag);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	68b9      	ldr	r1, [r7, #8]
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <hostio_lseek+0x2c>)
 80002e6:	f000 ff21 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 80002ea:	2101      	movs	r1, #1
 80002ec:	68f8      	ldr	r0, [r7, #12]
 80002ee:	f000 f959 	bl	80005a4 <gdb_main_loop>
 80002f2:	4603      	mov	r3, r0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	08007f48 	.word	0x08007f48

08000300 <hostio_rename>:

int hostio_rename(struct target_controller *tc,
	           target_addr oldpath, size_t old_len,
	           target_addr newpath, size_t new_len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	603b      	str	r3, [r7, #0]
	gdb_putpacket_f("Frename,%08X/%X,%08X/%X",
 800030e:	69bb      	ldr	r3, [r7, #24]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	68b9      	ldr	r1, [r7, #8]
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <hostio_rename+0x30>)
 800031a:	f000 ff07 	bl	800112c <gdb_putpacket_f>
	                oldpath, old_len, newpath, new_len);
	return gdb_main_loop(tc, true);
 800031e:	2101      	movs	r1, #1
 8000320:	68f8      	ldr	r0, [r7, #12]
 8000322:	f000 f93f 	bl	80005a4 <gdb_main_loop>
 8000326:	4603      	mov	r3, r0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	08007f60 	.word	0x08007f60

08000334 <hostio_unlink>:

int hostio_unlink(struct target_controller *tc,
	           target_addr path, size_t path_len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
	gdb_putpacket_f("Funlink,%08X/%X", path, path_len);
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	68b9      	ldr	r1, [r7, #8]
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <hostio_unlink+0x28>)
 8000346:	f000 fef1 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 800034a:	2101      	movs	r1, #1
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f000 f929 	bl	80005a4 <gdb_main_loop>
 8000352:	4603      	mov	r3, r0
}
 8000354:	4618      	mov	r0, r3
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	08007f78 	.word	0x08007f78

08000360 <hostio_stat>:

int hostio_stat(struct target_controller *tc,
	         target_addr path, size_t path_len, target_addr buf)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	603b      	str	r3, [r7, #0]
	gdb_putpacket_f("Fstat,%08X/%X,%08X", path, path_len, buf);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <hostio_stat+0x2c>)
 8000376:	f000 fed9 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 800037a:	2101      	movs	r1, #1
 800037c:	68f8      	ldr	r0, [r7, #12]
 800037e:	f000 f911 	bl	80005a4 <gdb_main_loop>
 8000382:	4603      	mov	r3, r0
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	08007f88 	.word	0x08007f88

08000390 <hostio_fstat>:

int hostio_fstat(struct target_controller *tc, int fd, target_addr buf)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
	gdb_putpacket_f("Ffstat,%X,%08X", fd, buf);
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	68b9      	ldr	r1, [r7, #8]
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <hostio_fstat+0x28>)
 80003a2:	f000 fec3 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 80003a6:	2101      	movs	r1, #1
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f000 f8fb 	bl	80005a4 <gdb_main_loop>
 80003ae:	4603      	mov	r3, r0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08007f9c 	.word	0x08007f9c

080003bc <hostio_gettimeofday>:

int hostio_gettimeofday(struct target_controller *tc,
		         target_addr tv, target_addr tz)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	gdb_putpacket_f("Fgettimeofday,%08X,%08X", tv, tz);
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	68b9      	ldr	r1, [r7, #8]
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <hostio_gettimeofday+0x28>)
 80003ce:	f000 fead 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 80003d2:	2101      	movs	r1, #1
 80003d4:	68f8      	ldr	r0, [r7, #12]
 80003d6:	f000 f8e5 	bl	80005a4 <gdb_main_loop>
 80003da:	4603      	mov	r3, r0
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	08007fac 	.word	0x08007fac

080003e8 <hostio_isatty>:

int hostio_isatty(struct target_controller *tc, int fd)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	gdb_putpacket_f("Fisatty,%08X", fd);
 80003f2:	6839      	ldr	r1, [r7, #0]
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <hostio_isatty+0x24>)
 80003f6:	f000 fe99 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 80003fa:	2101      	movs	r1, #1
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 f8d1 	bl	80005a4 <gdb_main_loop>
 8000402:	4603      	mov	r3, r0
}
 8000404:	4618      	mov	r0, r3
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	08007fc4 	.word	0x08007fc4

08000410 <hostio_system>:

int hostio_system(struct target_controller *tc,
	          target_addr cmd, size_t cmd_len)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	gdb_putpacket_f("Fsystem,%08X/%X", cmd, cmd_len);
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	68b9      	ldr	r1, [r7, #8]
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <hostio_system+0x28>)
 8000422:	f000 fe83 	bl	800112c <gdb_putpacket_f>
	return gdb_main_loop(tc, true);
 8000426:	2101      	movs	r1, #1
 8000428:	68f8      	ldr	r0, [r7, #12]
 800042a:	f000 f8bb 	bl	80005a4 <gdb_main_loop>
 800042e:	4603      	mov	r3, r0
}
 8000430:	4618      	mov	r0, r3
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	08007fd4 	.word	0x08007fd4

0800043c <gdb_if_putchar>:
static volatile uint32_t count_new;
static uint8_t double_buffer_out[CDCACM_PACKET_SIZE];
#endif

void gdb_if_putchar(unsigned char c, int flush)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	6039      	str	r1, [r7, #0]
 8000446:	71fb      	strb	r3, [r7, #7]
	buffer_in[count_in++] = c;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <gdb_if_putchar+0x6c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	4916      	ldr	r1, [pc, #88]	; (80004a8 <gdb_if_putchar+0x6c>)
 8000450:	600a      	str	r2, [r1, #0]
 8000452:	4916      	ldr	r1, [pc, #88]	; (80004ac <gdb_if_putchar+0x70>)
 8000454:	79fa      	ldrb	r2, [r7, #7]
 8000456:	54ca      	strb	r2, [r1, r3]
	if(flush || (count_in == CDC_DATA_FS_MAX_PACKET_SIZE)) //CDCACM_PACKET_SIZE))
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d103      	bne.n	8000466 <gdb_if_putchar+0x2a>
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <gdb_if_putchar+0x6c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b40      	cmp	r3, #64	; 0x40
 8000464:	d11c      	bne.n	80004a0 <gdb_if_putchar+0x64>
//		{
//			count_in = 0;
//			return;
//		}
//		while(usbd_ep_write_packet(usbdev, CDCACM_GDB_ENDPOINT, buffer_in, count_in) <= 0);
		while(CDC_Transmit_FS(buffer_in, count_in) == USBD_BUSY);
 8000466:	bf00      	nop
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <gdb_if_putchar+0x6c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b29b      	uxth	r3, r3
 800046e:	4619      	mov	r1, r3
 8000470:	480e      	ldr	r0, [pc, #56]	; (80004ac <gdb_if_putchar+0x70>)
 8000472:	f005 ffa5 	bl	80063c0 <CDC_Transmit_FS>
 8000476:	4603      	mov	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	d0f5      	beq.n	8000468 <gdb_if_putchar+0x2c>
		if (flush && (count_in == CDC_DATA_FS_MAX_PACKET_SIZE))   //CDCACM_PACKET_SIZE))
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d00b      	beq.n	800049a <gdb_if_putchar+0x5e>
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <gdb_if_putchar+0x6c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b40      	cmp	r3, #64	; 0x40
 8000488:	d107      	bne.n	800049a <gdb_if_putchar+0x5e>
			/* libopencm3 needs a change for us to confirm when
			 * that transfer is complete, so we just send a packet
			 * containing a null byte for now.
			 */
//			while (usbd_ep_write_packet(usbdev, CDCACM_GDB_ENDPOINT,"\0", 1) <= 0);
			while (CDC_Transmit_FS((uint8_t*)"\0", 1) == USBD_BUSY);
 800048a:	bf00      	nop
 800048c:	2101      	movs	r1, #1
 800048e:	4808      	ldr	r0, [pc, #32]	; (80004b0 <gdb_if_putchar+0x74>)
 8000490:	f005 ff96 	bl	80063c0 <CDC_Transmit_FS>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	d0f8      	beq.n	800048c <gdb_if_putchar+0x50>
		}
		count_in = 0;
 800049a:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <gdb_if_putchar+0x6c>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
	}
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200003ac 	.word	0x200003ac
 80004ac:	200003f4 	.word	0x200003f4
 80004b0:	08007fe4 	.word	0x08007fe4

080004b4 <gdb_if_update_buf>:
	}
}
#endif

static void gdb_if_update_buf(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	while (cdcacm_get_config() != 1);
 80004b8:	bf00      	nop
 80004ba:	f006 fb53 	bl	8006b64 <cdcacm_get_config>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d1fa      	bne.n	80004ba <gdb_if_update_buf+0x6>
	asm volatile ("cpsie i; isb");
#else
//	count_out = usbd_ep_read_packet(usbdev, CDCACM_GDB_ENDPOINT,
//	                                buffer_out, CDCACM_PACKET_SIZE);
	//CDC_Receive_FS(buffer_out, CDC_DATA_FS_MAX_PACKET_SIZE);
	out_ptr = 0;
 80004c4:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <gdb_if_update_buf+0x1c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
#endif
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200003b0 	.word	0x200003b0

080004d4 <gdb_if_getchar>:

unsigned char gdb_if_getchar(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

	while (!(out_ptr < count_out)) {
 80004d8:	e008      	b.n	80004ec <gdb_if_getchar+0x18>
		/* Detach if port closed */
		if (!cdcacm_get_dtr())
 80004da:	f006 fb4d 	bl	8006b78 <cdcacm_get_dtr>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d101      	bne.n	80004e8 <gdb_if_getchar+0x14>
			return 0x04;
 80004e4:	2304      	movs	r3, #4
 80004e6:	e00e      	b.n	8000506 <gdb_if_getchar+0x32>

		gdb_if_update_buf();
 80004e8:	f7ff ffe4 	bl	80004b4 <gdb_if_update_buf>
	while (!(out_ptr < count_out)) {
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <gdb_if_getchar+0x38>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <gdb_if_getchar+0x3c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d2f0      	bcs.n	80004da <gdb_if_getchar+0x6>
	}

	return buffer_out[out_ptr++];
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <gdb_if_getchar+0x38>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	4903      	ldr	r1, [pc, #12]	; (800050c <gdb_if_getchar+0x38>)
 8000500:	600a      	str	r2, [r1, #0]
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <gdb_if_getchar+0x40>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200003b0 	.word	0x200003b0
 8000510:	200003a8 	.word	0x200003a8
 8000514:	200003b4 	.word	0x200003b4

08000518 <gdb_if_getchar_to>:

unsigned char gdb_if_getchar_to(int timeout)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
//	if (!(out_ptr < count_out)) do {
		/* Detach if port closed */
//		if (!cdcacm_get_dtr())
//			return 0x04;

		gdb_if_update_buf();
 8000520:	f7ff ffc8 	bl	80004b4 <gdb_if_update_buf>
//	} while (!platform_timeout_is_expired(&t) && !(out_ptr < count_out));

	if(out_ptr < count_out)
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <gdb_if_getchar_to+0x2c>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <gdb_if_getchar_to+0x30>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	d203      	bcs.n	8000538 <gdb_if_getchar_to+0x20>
		return gdb_if_getchar();
 8000530:	f7ff ffd0 	bl	80004d4 <gdb_if_getchar>
 8000534:	4603      	mov	r3, r0
 8000536:	e000      	b.n	800053a <gdb_if_getchar_to+0x22>

	return -1;
 8000538:	23ff      	movs	r3, #255	; 0xff
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200003b0 	.word	0x200003b0
 8000548:	200003a8 	.word	0x200003a8

0800054c <gdb_target_destroy_callback>:
static void handle_q_packet(char *packet, int len);
static void handle_v_packet(char *packet, int len);
static void handle_z_packet(char *packet, int len);

static void gdb_target_destroy_callback(struct target_controller *tc, target *t)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	(void)tc;
	if (cur_target == t)
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <gdb_target_destroy_callback+0x34>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d102      	bne.n	8000566 <gdb_target_destroy_callback+0x1a>
		cur_target = NULL;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <gdb_target_destroy_callback+0x34>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]

	if (last_target == t)
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <gdb_target_destroy_callback+0x38>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d102      	bne.n	8000576 <gdb_target_destroy_callback+0x2a>
		last_target = NULL;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <gdb_target_destroy_callback+0x38>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	20000838 	.word	0x20000838
 8000584:	2000083c 	.word	0x2000083c

08000588 <gdb_target_printf>:

static void gdb_target_printf(struct target_controller *tc,
                              const char *fmt, va_list ap)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	(void)tc;
	gdb_voutf(fmt, ap);
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f000 fe14 	bl	80011c4 <gdb_voutf>
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <gdb_main_loop>:
	.isatty = hostio_isatty,
	.system = hostio_system,
};

int gdb_main_loop(struct target_controller *tc, bool in_syscall)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
	int size;
	//bool single_step = false;

	/* GDB protocol main loop */
	while(1) {
		SET_IDLE_STATE(1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b6:	48d6      	ldr	r0, [pc, #856]	; (8000910 <gdb_main_loop+0x36c>)
 80005b8:	f001 fdf4 	bl	80021a4 <HAL_GPIO_WritePin>
		size = gdb_getpacket(pbuf, BUF_SIZE);
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	48d4      	ldr	r0, [pc, #848]	; (8000914 <gdb_main_loop+0x370>)
 80005c2:	f000 fc89 	bl	8000ed8 <gdb_getpacket>
 80005c6:	6478      	str	r0, [r7, #68]	; 0x44
		SET_IDLE_STATE(0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48d0      	ldr	r0, [pc, #832]	; (8000910 <gdb_main_loop+0x36c>)
 80005d0:	f001 fde8 	bl	80021a4 <HAL_GPIO_WritePin>
		switch(pbuf[0]) {
 80005d4:	4bcf      	ldr	r3, [pc, #828]	; (8000914 <gdb_main_loop+0x370>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3b04      	subs	r3, #4
 80005da:	2b76      	cmp	r3, #118	; 0x76
 80005dc:	f200 826d 	bhi.w	8000aba <gdb_main_loop+0x516>
 80005e0:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <gdb_main_loop+0x44>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	08000a09 	.word	0x08000a09
 80005ec:	08000abb 	.word	0x08000abb
 80005f0:	08000abb 	.word	0x08000abb
 80005f4:	08000abb 	.word	0x08000abb
 80005f8:	08000abb 	.word	0x08000abb
 80005fc:	08000abb 	.word	0x08000abb
 8000600:	08000abb 	.word	0x08000abb
 8000604:	08000abb 	.word	0x08000abb
 8000608:	08000abb 	.word	0x08000abb
 800060c:	08000abb 	.word	0x08000abb
 8000610:	08000abb 	.word	0x08000abb
 8000614:	08000abb 	.word	0x08000abb
 8000618:	08000abb 	.word	0x08000abb
 800061c:	08000abb 	.word	0x08000abb
 8000620:	08000abb 	.word	0x08000abb
 8000624:	08000abb 	.word	0x08000abb
 8000628:	08000abb 	.word	0x08000abb
 800062c:	08000abb 	.word	0x08000abb
 8000630:	08000abb 	.word	0x08000abb
 8000634:	08000abb 	.word	0x08000abb
 8000638:	08000abb 	.word	0x08000abb
 800063c:	08000abb 	.word	0x08000abb
 8000640:	08000abb 	.word	0x08000abb
 8000644:	08000abb 	.word	0x08000abb
 8000648:	08000abb 	.word	0x08000abb
 800064c:	08000abb 	.word	0x08000abb
 8000650:	08000abb 	.word	0x08000abb
 8000654:	08000abb 	.word	0x08000abb
 8000658:	08000abb 	.word	0x08000abb
 800065c:	080009ff 	.word	0x080009ff
 8000660:	08000abb 	.word	0x08000abb
 8000664:	08000abb 	.word	0x08000abb
 8000668:	08000abb 	.word	0x08000abb
 800066c:	08000abb 	.word	0x08000abb
 8000670:	08000abb 	.word	0x08000abb
 8000674:	08000abb 	.word	0x08000abb
 8000678:	08000abb 	.word	0x08000abb
 800067c:	08000abb 	.word	0x08000abb
 8000680:	08000abb 	.word	0x08000abb
 8000684:	08000abb 	.word	0x08000abb
 8000688:	08000abb 	.word	0x08000abb
 800068c:	08000abb 	.word	0x08000abb
 8000690:	08000abb 	.word	0x08000abb
 8000694:	08000abb 	.word	0x08000abb
 8000698:	08000abb 	.word	0x08000abb
 800069c:	08000abb 	.word	0x08000abb
 80006a0:	08000abb 	.word	0x08000abb
 80006a4:	08000abb 	.word	0x08000abb
 80006a8:	08000abb 	.word	0x08000abb
 80006ac:	08000abb 	.word	0x08000abb
 80006b0:	08000abb 	.word	0x08000abb
 80006b4:	08000abb 	.word	0x08000abb
 80006b8:	08000abb 	.word	0x08000abb
 80006bc:	08000abb 	.word	0x08000abb
 80006c0:	08000abb 	.word	0x08000abb
 80006c4:	08000abb 	.word	0x08000abb
 80006c8:	08000abb 	.word	0x08000abb
 80006cc:	08000abb 	.word	0x08000abb
 80006d0:	08000abb 	.word	0x08000abb
 80006d4:	080008e5 	.word	0x080008e5
 80006d8:	08000abb 	.word	0x08000abb
 80006dc:	08000abb 	.word	0x08000abb
 80006e0:	08000abb 	.word	0x08000abb
 80006e4:	08000abb 	.word	0x08000abb
 80006e8:	08000a09 	.word	0x08000a09
 80006ec:	08000abb 	.word	0x08000abb
 80006f0:	080009e1 	.word	0x080009e1
 80006f4:	0800080f 	.word	0x0800080f
 80006f8:	08000abb 	.word	0x08000abb
 80006fc:	08000abb 	.word	0x08000abb
 8000700:	08000abb 	.word	0x08000abb
 8000704:	08000abb 	.word	0x08000abb
 8000708:	08000abb 	.word	0x08000abb
 800070c:	0800082b 	.word	0x0800082b
 8000710:	08000abb 	.word	0x08000abb
 8000714:	08000abb 	.word	0x08000abb
 8000718:	0800094f 	.word	0x0800094f
 800071c:	08000abb 	.word	0x08000abb
 8000720:	08000ac5 	.word	0x08000ac5
 8000724:	08000abb 	.word	0x08000abb
 8000728:	08000abb 	.word	0x08000abb
 800072c:	08000abb 	.word	0x08000abb
 8000730:	08000abb 	.word	0x08000abb
 8000734:	08000abb 	.word	0x08000abb
 8000738:	08000a47 	.word	0x08000a47
 800073c:	08000abb 	.word	0x08000abb
 8000740:	08000a9f 	.word	0x08000a9f
 8000744:	08000abb 	.word	0x08000abb
 8000748:	08000abb 	.word	0x08000abb
 800074c:	08000abb 	.word	0x08000abb
 8000750:	08000abb 	.word	0x08000abb
 8000754:	08000abb 	.word	0x08000abb
 8000758:	08000abb 	.word	0x08000abb
 800075c:	08000abb 	.word	0x08000abb
 8000760:	08000abb 	.word	0x08000abb
 8000764:	080008cd 	.word	0x080008cd
 8000768:	08000abb 	.word	0x08000abb
 800076c:	08000abb 	.word	0x08000abb
 8000770:	08000abb 	.word	0x08000abb
 8000774:	080007c5 	.word	0x080007c5
 8000778:	08000abb 	.word	0x08000abb
 800077c:	08000abb 	.word	0x08000abb
 8000780:	08000abb 	.word	0x08000abb
 8000784:	08000a2f 	.word	0x08000a2f
 8000788:	08000abb 	.word	0x08000abb
 800078c:	080007d9 	.word	0x080007d9
 8000790:	08000abb 	.word	0x08000abb
 8000794:	08000abb 	.word	0x08000abb
 8000798:	080008ff 	.word	0x080008ff
 800079c:	08000a8b 	.word	0x08000a8b
 80007a0:	08000ac5 	.word	0x08000ac5
 80007a4:	080008cd 	.word	0x080008cd
 80007a8:	08000abb 	.word	0x08000abb
 80007ac:	08000abb 	.word	0x08000abb
 80007b0:	08000a95 	.word	0x08000a95
 80007b4:	08000abb 	.word	0x08000abb
 80007b8:	08000abb 	.word	0x08000abb
 80007bc:	08000abb 	.word	0x08000abb
 80007c0:	08000a9f 	.word	0x08000a9f
		/* Implementation of these is mandatory! */
		case 'g': { /* 'g': Read general registers */
			ERROR_IF_NO_TARGET();
 80007c4:	4b54      	ldr	r3, [pc, #336]	; (8000918 <gdb_main_loop+0x374>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	f040 817d 	bne.w	8000ac8 <gdb_main_loop+0x524>
 80007ce:	2103      	movs	r1, #3
 80007d0:	4852      	ldr	r0, [pc, #328]	; (800091c <gdb_main_loop+0x378>)
 80007d2:	f000 fc3f 	bl	8001054 <gdb_putpacket>
 80007d6:	e17c      	b.n	8000ad2 <gdb_main_loop+0x52e>
			//gdb_putpacket(hexify(pbuf, arm_regs, sizeof(arm_regs)), sizeof(arm_regs) * 2);
			break;
			}
		case 'm': {	/* 'm addr,len': Read len bytes from addr */
			uint32_t addr, len;
			ERROR_IF_NO_TARGET();
 80007d8:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <gdb_main_loop+0x374>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d104      	bne.n	80007ea <gdb_main_loop+0x246>
 80007e0:	2103      	movs	r1, #3
 80007e2:	484e      	ldr	r0, [pc, #312]	; (800091c <gdb_main_loop+0x378>)
 80007e4:	f000 fc36 	bl	8001054 <gdb_putpacket>
 80007e8:	e173      	b.n	8000ad2 <gdb_main_loop+0x52e>
			sscanf(pbuf, "m%" SCNx32 ",%" SCNx32, &addr, &len);
 80007ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007f2:	494b      	ldr	r1, [pc, #300]	; (8000920 <gdb_main_loop+0x37c>)
 80007f4:	4847      	ldr	r0, [pc, #284]	; (8000914 <gdb_main_loop+0x370>)
 80007f6:	f006 faed 	bl	8006dd4 <siscanf>
			if (len > sizeof(pbuf) / 2) {
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000800:	f240 8164 	bls.w	8000acc <gdb_main_loop+0x528>
				gdb_putpacketz("E02");
 8000804:	2103      	movs	r1, #3
 8000806:	4847      	ldr	r0, [pc, #284]	; (8000924 <gdb_main_loop+0x380>)
 8000808:	f000 fc24 	bl	8001054 <gdb_putpacket>
				break;
 800080c:	e161      	b.n	8000ad2 <gdb_main_loop+0x52e>
			//else
			//	gdb_putpacket(hexify(pbuf, mem, len), len*2);
			break;
			}
		case 'G': {	/* 'G XX': Write general registers */
			ERROR_IF_NO_TARGET();
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <gdb_main_loop+0x374>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d104      	bne.n	8000820 <gdb_main_loop+0x27c>
 8000816:	2103      	movs	r1, #3
 8000818:	4840      	ldr	r0, [pc, #256]	; (800091c <gdb_main_loop+0x378>)
 800081a:	f000 fc1b 	bl	8001054 <gdb_putpacket>
 800081e:	e158      	b.n	8000ad2 <gdb_main_loop+0x52e>
			//uint8_t arm_regs[target_regs_size(cur_target)];
			//unhexify(arm_regs, &pbuf[1], sizeof(arm_regs));
			//target_regs_write(cur_target, arm_regs);
			gdb_putpacketz("OK");
 8000820:	2102      	movs	r1, #2
 8000822:	4841      	ldr	r0, [pc, #260]	; (8000928 <gdb_main_loop+0x384>)
 8000824:	f000 fc16 	bl	8001054 <gdb_putpacket>
			break;
 8000828:	e153      	b.n	8000ad2 <gdb_main_loop+0x52e>
			}
		case 'M': { /* 'M addr,len:XX': Write len bytes to addr */
 800082a:	466b      	mov	r3, sp
 800082c:	461d      	mov	r5, r3
			uint32_t addr, len;
			int hex;
			ERROR_IF_NO_TARGET();
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <gdb_main_loop+0x374>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <gdb_main_loop+0x29c>
 8000836:	2103      	movs	r1, #3
 8000838:	4838      	ldr	r0, [pc, #224]	; (800091c <gdb_main_loop+0x378>)
 800083a:	f000 fc0b 	bl	8001054 <gdb_putpacket>
 800083e:	e043      	b.n	80008c8 <gdb_main_loop+0x324>
			sscanf(pbuf, "M%" SCNx32 ",%" SCNx32 ":%n", &addr, &len, &hex);
 8000840:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000844:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	460b      	mov	r3, r1
 8000850:	4936      	ldr	r1, [pc, #216]	; (800092c <gdb_main_loop+0x388>)
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <gdb_main_loop+0x370>)
 8000854:	f006 fabe 	bl	8006dd4 <siscanf>
			if (len > (unsigned)(size - hex) / 2) {
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	085a      	lsrs	r2, r3, #1
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	429a      	cmp	r2, r3
 8000864:	d204      	bcs.n	8000870 <gdb_main_loop+0x2cc>
				gdb_putpacketz("E02");
 8000866:	2103      	movs	r1, #3
 8000868:	482e      	ldr	r0, [pc, #184]	; (8000924 <gdb_main_loop+0x380>)
 800086a:	f000 fbf3 	bl	8001054 <gdb_putpacket>
				break;
 800086e:	e02b      	b.n	80008c8 <gdb_main_loop+0x324>
			}
			DEBUG_PRINT("M packet: addr = %" PRIx32 ", len = %" PRIx32 "\n", addr, len);
			uint8_t mem[len];
 8000870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000872:	4603      	mov	r3, r0
 8000874:	3b01      	subs	r3, #1
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
 8000878:	4601      	mov	r1, r0
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	f04f 0400 	mov.w	r4, #0
 8000886:	00d4      	lsls	r4, r2, #3
 8000888:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800088c:	00cb      	lsls	r3, r1, #3
 800088e:	4601      	mov	r1, r0
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	f04f 0400 	mov.w	r4, #0
 800089c:	00d4      	lsls	r4, r2, #3
 800089e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80008a2:	00cb      	lsls	r3, r1, #3
 80008a4:	1dc3      	adds	r3, r0, #7
 80008a6:	08db      	lsrs	r3, r3, #3
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	ebad 0d03 	sub.w	sp, sp, r3
 80008ae:	ab02      	add	r3, sp, #8
 80008b0:	3300      	adds	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
			unhexify(mem, pbuf + hex, len);
 80008b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <gdb_main_loop+0x370>)
 80008bc:	4413      	add	r3, r2
 80008be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	f000 fce9 	bl	8001298 <unhexify>
			//if (target_mem_write(cur_target, addr, mem, len))
			//	gdb_putpacketz("E01");
			//else
			//	gdb_putpacketz("OK");
			break;
 80008c6:	bf00      	nop
 80008c8:	46ad      	mov	sp, r5
 80008ca:	e671      	b.n	80005b0 <gdb_main_loop+0xc>
			}
		case 's':	/* 's [addr]': Single step [start at addr] */
			//single_step = true;
			/* fall through */
		case 'c':	/* 'c [addr]': Continue [at addr] */
			if(!cur_target) {
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <gdb_main_loop+0x374>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d104      	bne.n	80008de <gdb_main_loop+0x33a>
				gdb_putpacketz("X1D");
 80008d4:	2103      	movs	r1, #3
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <gdb_main_loop+0x38c>)
 80008d8:	f000 fbbc 	bl	8001054 <gdb_putpacket>
				break;
 80008dc:	e0f9      	b.n	8000ad2 <gdb_main_loop+0x52e>
			}

			//target_halt_resume(cur_target, single_step);
			SET_RUN_STATE(1);
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <gdb_main_loop+0x390>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
			/* This packet isn't documented as being mandatory,
			 * but GDB doesn't work without it. */
			//target_addr watch;
			//enum target_halt_reason reason;

			if(!cur_target) {
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <gdb_main_loop+0x374>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <gdb_main_loop+0x352>
				/* Report "target exited" if no target */
				gdb_putpacketz("W00");
 80008ec:	2103      	movs	r1, #3
 80008ee:	4812      	ldr	r0, [pc, #72]	; (8000938 <gdb_main_loop+0x394>)
 80008f0:	f000 fbb0 	bl	8001054 <gdb_putpacket>
				break;
 80008f4:	e0ed      	b.n	8000ad2 <gdb_main_loop+0x52e>
			//	unsigned char c = gdb_if_getchar_to(0);
			//	if((c == '\x03') || (c == '\x04')) {
			//		target_halt_request(cur_target);
			//	}
			//}
			SET_RUN_STATE(0);
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <gdb_main_loop+0x390>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
			//	gdb_putpacket_f("T%02X", GDB_SIGSEGV);
			//	break;
			//default:
			//	gdb_putpacket_f("T%02X", GDB_SIGTRAP);
			//}
			break;
 80008fc:	e0e9      	b.n	8000ad2 <gdb_main_loop+0x52e>
			}

		/* Optional GDB packet support */
		case 'p': { /* Read single register */
			ERROR_IF_NO_TARGET();
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <gdb_main_loop+0x374>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d11a      	bne.n	800093c <gdb_main_loop+0x398>
 8000906:	2103      	movs	r1, #3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <gdb_main_loop+0x378>)
 800090a:	f000 fba3 	bl	8001054 <gdb_putpacket>
 800090e:	e0e0      	b.n	8000ad2 <gdb_main_loop+0x52e>
 8000910:	40010c00 	.word	0x40010c00
 8000914:	20000434 	.word	0x20000434
 8000918:	20000838 	.word	0x20000838
 800091c:	08007fe8 	.word	0x08007fe8
 8000920:	08007fec 	.word	0x08007fec
 8000924:	08007ff8 	.word	0x08007ff8
 8000928:	08007ffc 	.word	0x08007ffc
 800092c:	08008000 	.word	0x08008000
 8000930:	0800800c 	.word	0x0800800c
 8000934:	20000aac 	.word	0x20000aac
 8000938:	08008010 	.word	0x08008010
			uint32_t reg;
			sscanf(pbuf, "p%" SCNx32, &reg);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	461a      	mov	r2, r3
 8000942:	4966      	ldr	r1, [pc, #408]	; (8000adc <gdb_main_loop+0x538>)
 8000944:	4866      	ldr	r0, [pc, #408]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000946:	f006 fa45 	bl	8006dd4 <siscanf>
			//if (s > 0) {
			//	gdb_putpacket(hexify(pbuf, val, s), s * 2);
			//} else {
			//	gdb_putpacketz("EFF");
			//}
			break;
 800094a:	bf00      	nop
 800094c:	e0c1      	b.n	8000ad2 <gdb_main_loop+0x52e>
			}
		case 'P': { /* Write single register */
 800094e:	466b      	mov	r3, sp
 8000950:	461d      	mov	r5, r3
			ERROR_IF_NO_TARGET();
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <gdb_main_loop+0x540>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <gdb_main_loop+0x3c0>
 800095a:	2103      	movs	r1, #3
 800095c:	4862      	ldr	r0, [pc, #392]	; (8000ae8 <gdb_main_loop+0x544>)
 800095e:	f000 fb79 	bl	8001054 <gdb_putpacket>
 8000962:	e03b      	b.n	80009dc <gdb_main_loop+0x438>
			uint32_t reg;
			int n;
			sscanf(pbuf, "P%" SCNx32 "=%n", &reg, &n);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	f107 0218 	add.w	r2, r7, #24
 800096c:	495f      	ldr	r1, [pc, #380]	; (8000aec <gdb_main_loop+0x548>)
 800096e:	485c      	ldr	r0, [pc, #368]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000970:	f006 fa30 	bl	8006dd4 <siscanf>
			uint8_t val[strlen(&pbuf[n])/2];
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4a5a      	ldr	r2, [pc, #360]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000978:	4413      	add	r3, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fbfe 	bl	800017c <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	0858      	lsrs	r0, r3, #1
 8000984:	4603      	mov	r3, r0
 8000986:	3b01      	subs	r3, #1
 8000988:	643b      	str	r3, [r7, #64]	; 0x40
 800098a:	4601      	mov	r1, r0
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	f04f 0400 	mov.w	r4, #0
 8000998:	00d4      	lsls	r4, r2, #3
 800099a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800099e:	00cb      	lsls	r3, r1, #3
 80009a0:	4601      	mov	r1, r0
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	f04f 0400 	mov.w	r4, #0
 80009ae:	00d4      	lsls	r4, r2, #3
 80009b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80009b4:	00cb      	lsls	r3, r1, #3
 80009b6:	1dc3      	adds	r3, r0, #7
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	ebad 0d03 	sub.w	sp, sp, r3
 80009c0:	ab02      	add	r3, sp, #8
 80009c2:	3300      	adds	r3, #0
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			unhexify(val, pbuf + n, sizeof(val));
 80009c6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <gdb_main_loop+0x53c>)
 80009ce:	4413      	add	r3, r2
 80009d0:	4602      	mov	r2, r0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4620      	mov	r0, r4
 80009d6:	f000 fc5f 	bl	8001298 <unhexify>
			//if (target_reg_write(cur_target, reg, val, sizeof(val)) > 0) {
			//	gdb_putpacketz("OK");
			//} else {
			//	gdb_putpacketz("EFF");
			//}
			break;
 80009da:	bf00      	nop
 80009dc:	46ad      	mov	sp, r5
 80009de:	e5e7      	b.n	80005b0 <gdb_main_loop+0xc>
			}

		case 'F':	/* Semihosting call finished */
			if (in_syscall) {
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <gdb_main_loop+0x450>
				return hostio_reply(tc, pbuf, size);
 80009e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009e8:	493d      	ldr	r1, [pc, #244]	; (8000ae0 <gdb_main_loop+0x53c>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fbce 	bl	800018c <hostio_reply>
 80009f0:	4603      	mov	r3, r0
 80009f2:	e06f      	b.n	8000ad4 <gdb_main_loop+0x530>
			} else {
				DEBUG_PRINT("*** F packet when not in syscall! '%s'\n", pbuf);
				gdb_putpacketz("");
 80009f4:	2100      	movs	r1, #0
 80009f6:	483e      	ldr	r0, [pc, #248]	; (8000af0 <gdb_main_loop+0x54c>)
 80009f8:	f000 fb2c 	bl	8001054 <gdb_putpacket>
			}
			break;
 80009fc:	e069      	b.n	8000ad2 <gdb_main_loop+0x52e>
		case '!':	/* Enable Extended GDB Protocol. */
			/* This doesn't do anything, we support the extended
			 * protocol anyway, but GDB will never send us a 'R'
			 * packet unless we answer 'OK' here.
			 */
			gdb_putpacketz("OK");
 80009fe:	2102      	movs	r1, #2
 8000a00:	483c      	ldr	r0, [pc, #240]	; (8000af4 <gdb_main_loop+0x550>)
 8000a02:	f000 fb27 	bl	8001054 <gdb_putpacket>
			break;
 8000a06:	e064      	b.n	8000ad2 <gdb_main_loop+0x52e>

		case 0x04:
		case 'D':	/* GDB 'detach' command. */
			if(cur_target) {
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <gdb_main_loop+0x472>
				SET_RUN_STATE(1);
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <gdb_main_loop+0x554>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
				//target_detach(cur_target);
			}
			last_target = cur_target;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a38      	ldr	r2, [pc, #224]	; (8000afc <gdb_main_loop+0x558>)
 8000a1c:	6013      	str	r3, [r2, #0]
			cur_target = NULL;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
			gdb_putpacketz("OK");
 8000a24:	2102      	movs	r1, #2
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <gdb_main_loop+0x550>)
 8000a28:	f000 fb14 	bl	8001054 <gdb_putpacket>
			break;
 8000a2c:	e051      	b.n	8000ad2 <gdb_main_loop+0x52e>

		case 'k':	/* Kill the target */
			if(cur_target) {
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d04c      	beq.n	8000ad0 <gdb_main_loop+0x52c>
				//target_reset(cur_target);
				//target_detach(cur_target);
				last_target = cur_target;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a30      	ldr	r2, [pc, #192]	; (8000afc <gdb_main_loop+0x558>)
 8000a3c:	6013      	str	r3, [r2, #0]
				cur_target = NULL;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a44:	e044      	b.n	8000ad0 <gdb_main_loop+0x52c>
			break;

		case 'X': { /* 'X addr,len:XX': Write binary data to addr */
			uint32_t addr, len;
			int bin;
			ERROR_IF_NO_TARGET();
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <gdb_main_loop+0x540>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d104      	bne.n	8000a58 <gdb_main_loop+0x4b4>
 8000a4e:	2103      	movs	r1, #3
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <gdb_main_loop+0x544>)
 8000a52:	f000 faff 	bl	8001054 <gdb_putpacket>
 8000a56:	e03c      	b.n	8000ad2 <gdb_main_loop+0x52e>
			sscanf(pbuf, "X%" SCNx32 ",%" SCNx32 ":%n", &addr, &len, &bin);
 8000a58:	f107 010c 	add.w	r1, r7, #12
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	460b      	mov	r3, r1
 8000a68:	4925      	ldr	r1, [pc, #148]	; (8000b00 <gdb_main_loop+0x55c>)
 8000a6a:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000a6c:	f006 f9b2 	bl	8006dd4 <siscanf>
			if (len > (unsigned)(size - bin)) {
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d205      	bcs.n	8000a8a <gdb_main_loop+0x4e6>
				gdb_putpacketz("E02");
 8000a7e:	2103      	movs	r1, #3
 8000a80:	4820      	ldr	r0, [pc, #128]	; (8000b04 <gdb_main_loop+0x560>)
 8000a82:	f000 fae7 	bl	8001054 <gdb_putpacket>
				break;
 8000a86:	bf00      	nop
 8000a88:	e023      	b.n	8000ad2 <gdb_main_loop+0x52e>
			//	gdb_putpacketz("OK");
			//break;
			}

		case 'q':	/* General query packet */
			handle_q_packet(pbuf, size);
 8000a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000a8c:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000a8e:	f000 f8bd 	bl	8000c0c <handle_q_packet>
			break;
 8000a92:	e01e      	b.n	8000ad2 <gdb_main_loop+0x52e>

		case 'v':	/* General query packet */
			handle_v_packet(pbuf, size);
 8000a94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000a98:	f000 f966 	bl	8000d68 <handle_v_packet>
			break;
 8000a9c:	e019      	b.n	8000ad2 <gdb_main_loop+0x52e>

		/* These packet implement hardware break-/watchpoints */
		case 'Z':	/* Z type,addr,len: Set breakpoint packet */
		case 'z':	/* z type,addr,len: Clear breakpoint packet */
			ERROR_IF_NO_TARGET();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <gdb_main_loop+0x540>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <gdb_main_loop+0x50c>
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <gdb_main_loop+0x544>)
 8000aaa:	f000 fad3 	bl	8001054 <gdb_putpacket>
 8000aae:	e010      	b.n	8000ad2 <gdb_main_loop+0x52e>
			handle_z_packet(pbuf, size);
 8000ab0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <gdb_main_loop+0x53c>)
 8000ab4:	f000 f9f2 	bl	8000e9c <handle_z_packet>
			break;
 8000ab8:	e00b      	b.n	8000ad2 <gdb_main_loop+0x52e>

		default: 	/* Packet not implemented */
			DEBUG_PRINT("*** Unsupported packet: %s\n", pbuf);
			gdb_putpacketz("");
 8000aba:	2100      	movs	r1, #0
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <gdb_main_loop+0x54c>)
 8000abe:	f000 fac9 	bl	8001054 <gdb_putpacket>
 8000ac2:	e575      	b.n	80005b0 <gdb_main_loop+0xc>
			break;
 8000ac4:	bf00      	nop
 8000ac6:	e573      	b.n	80005b0 <gdb_main_loop+0xc>
			break;
 8000ac8:	bf00      	nop
 8000aca:	e571      	b.n	80005b0 <gdb_main_loop+0xc>
			break;
 8000acc:	bf00      	nop
 8000ace:	e56f      	b.n	80005b0 <gdb_main_loop+0xc>
			break;
 8000ad0:	bf00      	nop
		SET_IDLE_STATE(1);
 8000ad2:	e56d      	b.n	80005b0 <gdb_main_loop+0xc>
		}
	}
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3748      	adds	r7, #72	; 0x48
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bdb0      	pop	{r4, r5, r7, pc}
 8000adc:	08008014 	.word	0x08008014
 8000ae0:	20000434 	.word	0x20000434
 8000ae4:	20000838 	.word	0x20000838
 8000ae8:	08007fe8 	.word	0x08007fe8
 8000aec:	0800801c 	.word	0x0800801c
 8000af0:	08008024 	.word	0x08008024
 8000af4:	08007ffc 	.word	0x08007ffc
 8000af8:	20000aac 	.word	0x20000aac
 8000afc:	2000083c 	.word	0x2000083c
 8000b00:	08008028 	.word	0x08008028
 8000b04:	08007ff8 	.word	0x08007ff8

08000b08 <handle_q_string_reply>:

static void
handle_q_string_reply(const char *str, const char *param)
{
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	unsigned long addr, len;

	if (sscanf(param, "%08lx,%08lx", &addr, &len) != 2) {
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	4939      	ldr	r1, [pc, #228]	; (8000c00 <handle_q_string_reply+0xf8>)
 8000b1c:	6838      	ldr	r0, [r7, #0]
 8000b1e:	f006 f959 	bl	8006dd4 <siscanf>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d004      	beq.n	8000b32 <handle_q_string_reply+0x2a>
		gdb_putpacketz("E01");
 8000b28:	2103      	movs	r1, #3
 8000b2a:	4836      	ldr	r0, [pc, #216]	; (8000c04 <handle_q_string_reply+0xfc>)
 8000b2c:	f000 fa92 	bl	8001054 <gdb_putpacket>
 8000b30:	e062      	b.n	8000bf8 <handle_q_string_reply+0xf0>
		return;
	}
	if (addr < strlen (str)) {
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fb22 	bl	800017c <strlen>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d94b      	bls.n	8000bd8 <handle_q_string_reply+0xd0>
 8000b40:	466b      	mov	r3, sp
 8000b42:	461d      	mov	r5, r3
		char reply[len+2];
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c98      	adds	r0, r3, #2
 8000b48:	4603      	mov	r3, r0
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4601      	mov	r1, r0
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	f04f 0400 	mov.w	r4, #0
 8000b5c:	00d4      	lsls	r4, r2, #3
 8000b5e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000b62:	00cb      	lsls	r3, r1, #3
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0200 	mov.w	r2, #0
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	f04f 0400 	mov.w	r4, #0
 8000b72:	00d4      	lsls	r4, r2, #3
 8000b74:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000b78:	00cb      	lsls	r3, r1, #3
 8000b7a:	1dc3      	adds	r3, r0, #7
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	ebad 0d03 	sub.w	sp, sp, r3
 8000b84:	466b      	mov	r3, sp
 8000b86:	3300      	adds	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
		reply[0] = 'm';
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	226d      	movs	r2, #109	; 0x6d
 8000b8e:	701a      	strb	r2, [r3, #0]
		strncpy (reply + 1, &str[addr], len);
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	1c58      	adds	r0, r3, #1
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f006 f957 	bl	8006e50 <strncpy>
		if(len > strlen(&str[addr]))
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fae7 	bl	800017c <strlen>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d207      	bcs.n	8000bc6 <handle_q_string_reply+0xbe>
			len = strlen(&str[addr]);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fadd 	bl	800017c <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	60bb      	str	r3, [r7, #8]
		gdb_putpacket(reply, len + 1);
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4610      	mov	r0, r2
 8000bd0:	f000 fa40 	bl	8001054 <gdb_putpacket>
 8000bd4:	46ad      	mov	sp, r5
 8000bd6:	e00f      	b.n	8000bf8 <handle_q_string_reply+0xf0>
	} else if (addr == strlen (str)) {
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff facf 	bl	800017c <strlen>
 8000bde:	4602      	mov	r2, r0
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d104      	bne.n	8000bf0 <handle_q_string_reply+0xe8>
		gdb_putpacketz("l");
 8000be6:	2101      	movs	r1, #1
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <handle_q_string_reply+0x100>)
 8000bea:	f000 fa33 	bl	8001054 <gdb_putpacket>
 8000bee:	e003      	b.n	8000bf8 <handle_q_string_reply+0xf0>
	} else
		gdb_putpacketz("E01");
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <handle_q_string_reply+0xfc>)
 8000bf4:	f000 fa2e 	bl	8001054 <gdb_putpacket>
}
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08008034 	.word	0x08008034
 8000c04:	08008040 	.word	0x08008040
 8000c08:	08008044 	.word	0x08008044

08000c0c <handle_q_packet>:

static void handle_q_packet(char *packet, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	6018      	str	r0, [r3, #0]
 8000c18:	463b      	mov	r3, r7
 8000c1a:	6019      	str	r1, [r3, #0]
	uint32_t addr, alen;

	if(!strncmp(packet, "qRcmd,", 6)) {
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2206      	movs	r2, #6
 8000c20:	4948      	ldr	r1, [pc, #288]	; (8000d44 <handle_q_packet+0x138>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	f006 f902 	bl	8006e2c <strncmp>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d128      	bne.n	8000c80 <handle_q_packet+0x74>
		char *data;
		int datalen;

		/* calculate size and allocate buffer for command */
		datalen = (len - 6) / 2;
 8000c2e:	463b      	mov	r3, r7
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3b06      	subs	r3, #6
 8000c34:	0fda      	lsrs	r2, r3, #31
 8000c36:	4413      	add	r3, r2
 8000c38:	105b      	asrs	r3, r3, #1
 8000c3a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		data = alloca(datalen+1);
 8000c3e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c42:	3301      	adds	r3, #1
 8000c44:	3307      	adds	r3, #7
 8000c46:	3307      	adds	r3, #7
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	ebad 0d03 	sub.w	sp, sp, r3
 8000c50:	466b      	mov	r3, sp
 8000c52:	3307      	adds	r3, #7
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		/* dehexify command */
		unhexify(data, packet+6, datalen);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3306      	adds	r3, #6
 8000c62:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000c66:	4619      	mov	r1, r3
 8000c68:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
 8000c6c:	f000 fb14 	bl	8001298 <unhexify>
		data[datalen] = 0;	/* add terminating null */
 8000c70:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c74:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000c78:	4413      	add	r3, r2
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e05c      	b.n	8000d3a <handle_q_packet+0x12e>
		//else if(c == 0)
		//	gdb_putpacketz("OK");
		//else
		//	gdb_putpacketz("E");

	} else if (!strncmp (packet, "qSupported", 10)) {
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	220a      	movs	r2, #10
 8000c84:	4930      	ldr	r1, [pc, #192]	; (8000d48 <handle_q_packet+0x13c>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f006 f8d0 	bl	8006e2c <strncmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d105      	bne.n	8000c9e <handle_q_packet+0x92>
		/* Query supported protocol features */
		gdb_putpacket_f("PacketSize=%X;qXfer:memory-map:read+;qXfer:features:read+", BUF_SIZE);
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	482d      	ldr	r0, [pc, #180]	; (8000d4c <handle_q_packet+0x140>)
 8000c98:	f000 fa48 	bl	800112c <gdb_putpacket_f>
 8000c9c:	e04d      	b.n	8000d3a <handle_q_packet+0x12e>

	} else if (strncmp (packet, "qXfer:memory-map:read::", 23) == 0) {
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2217      	movs	r2, #23
 8000ca2:	492b      	ldr	r1, [pc, #172]	; (8000d50 <handle_q_packet+0x144>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	f006 f8c1 	bl	8006e2c <strncmp>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d116      	bne.n	8000cde <handle_q_packet+0xd2>
		/* Read target XML memory map */
		if((!cur_target) && last_target) {
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <handle_q_packet+0x148>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
			/* Attach to last target if detached. */
			//cur_target = target_attach(last_target,&gdb_controller);
		}
		if (!cur_target) {
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <handle_q_packet+0x148>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <handle_q_packet+0xbc>
			gdb_putpacketz("E01");
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	4825      	ldr	r0, [pc, #148]	; (8000d58 <handle_q_packet+0x14c>)
 8000cc2:	f000 f9c7 	bl	8001054 <gdb_putpacket>
 8000cc6:	e038      	b.n	8000d3a <handle_q_packet+0x12e>
			return;
		}
		char buf[1024];
		//target_mem_map(cur_target, buf, sizeof(buf)); /* Fixme: Check size!*/
		handle_q_string_reply(buf, packet + 23);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f103 0217 	add.w	r2, r3, #23
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff16 	bl	8000b08 <handle_q_string_reply>
 8000cdc:	e02d      	b.n	8000d3a <handle_q_packet+0x12e>

	} else if (strncmp (packet, "qXfer:features:read:target.xml:", 31) == 0) {
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	221f      	movs	r2, #31
 8000ce2:	491e      	ldr	r1, [pc, #120]	; (8000d5c <handle_q_packet+0x150>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f006 f8a1 	bl	8006e2c <strncmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <handle_q_packet+0xfc>
		/* Read target description */
		if((!cur_target) && last_target) {
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <handle_q_packet+0x148>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
			/* Attach to last target if detached. */
			//cur_target = target_attach(last_target,
			//			   &gdb_controller);
		}
		if (!cur_target) {
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <handle_q_packet+0x148>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d11d      	bne.n	8000d3a <handle_q_packet+0x12e>
			gdb_putpacketz("E01");
 8000cfe:	2103      	movs	r1, #3
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <handle_q_packet+0x14c>)
 8000d02:	f000 f9a7 	bl	8001054 <gdb_putpacket>
			return;
 8000d06:	e018      	b.n	8000d3a <handle_q_packet+0x12e>
		}
		//handle_q_string_reply(target_tdesc(cur_target), packet + 31);
	} else if (sscanf(packet, "qCRC:%" PRIx32 ",%" PRIx32, &addr, &alen) == 2) {
 8000d08:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000d0c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8000d10:	1d38      	adds	r0, r7, #4
 8000d12:	4913      	ldr	r1, [pc, #76]	; (8000d60 <handle_q_packet+0x154>)
 8000d14:	6800      	ldr	r0, [r0, #0]
 8000d16:	f006 f85d 	bl	8006dd4 <siscanf>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d108      	bne.n	8000d32 <handle_q_packet+0x126>
		if(!cur_target) {
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <handle_q_packet+0x148>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d108      	bne.n	8000d3a <handle_q_packet+0x12e>
			gdb_putpacketz("E01");
 8000d28:	2103      	movs	r1, #3
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <handle_q_packet+0x14c>)
 8000d2c:	f000 f992 	bl	8001054 <gdb_putpacket>
			return;
 8000d30:	e003      	b.n	8000d3a <handle_q_packet+0x12e>
		}
		//gdb_putpacket_f("C%lx", generic_crc32(cur_target, addr, alen));

	} else {
		DEBUG_PRINT("*** Unsupported packet: %s\n", packet);
		gdb_putpacket("", 0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <handle_q_packet+0x158>)
 8000d36:	f000 f98d 	bl	8001054 <gdb_putpacket>
	}
}
 8000d3a:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08008048 	.word	0x08008048
 8000d48:	08008050 	.word	0x08008050
 8000d4c:	0800805c 	.word	0x0800805c
 8000d50:	08008098 	.word	0x08008098
 8000d54:	20000838 	.word	0x20000838
 8000d58:	08008040 	.word	0x08008040
 8000d5c:	080080b0 	.word	0x080080b0
 8000d60:	080080d0 	.word	0x080080d0
 8000d64:	08008024 	.word	0x08008024

08000d68 <handle_v_packet>:

static void
handle_v_packet(char *packet, int plen)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	unsigned long addr, len;
	int bin;
	static uint8_t flash_mode = 0;

	if (sscanf(packet, "vAttach;%08lx", &addr) == 1) {
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	461a      	mov	r2, r3
 8000d78:	493c      	ldr	r1, [pc, #240]	; (8000e6c <handle_v_packet+0x104>)
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f006 f82a 	bl	8006dd4 <siscanf>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d10d      	bne.n	8000da2 <handle_v_packet+0x3a>
		/* Attach to remote target processor */
		//cur_target = target_attach_n(addr, &gdb_controller);
		if(cur_target)
 8000d86:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <handle_v_packet+0x108>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d004      	beq.n	8000d98 <handle_v_packet+0x30>
			gdb_putpacketz("T05");
 8000d8e:	2103      	movs	r1, #3
 8000d90:	4838      	ldr	r0, [pc, #224]	; (8000e74 <handle_v_packet+0x10c>)
 8000d92:	f000 f95f 	bl	8001054 <gdb_putpacket>
 8000d96:	e066      	b.n	8000e66 <handle_v_packet+0xfe>
		else
			gdb_putpacketz("E01");
 8000d98:	2103      	movs	r1, #3
 8000d9a:	4837      	ldr	r0, [pc, #220]	; (8000e78 <handle_v_packet+0x110>)
 8000d9c:	f000 f95a 	bl	8001054 <gdb_putpacket>
 8000da0:	e061      	b.n	8000e66 <handle_v_packet+0xfe>

	} else if (!strcmp(packet, "vRun;")) {
 8000da2:	4936      	ldr	r1, [pc, #216]	; (8000e7c <handle_v_packet+0x114>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff f9df 	bl	8000168 <strcmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d11f      	bne.n	8000df0 <handle_v_packet+0x88>
		/* Run target program. For us (embedded) this means reset. */
		if(cur_target) {
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <handle_v_packet+0x108>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <handle_v_packet+0x5a>
			//target_reset(cur_target);
			gdb_putpacketz("T05");
 8000db8:	2103      	movs	r1, #3
 8000dba:	482e      	ldr	r0, [pc, #184]	; (8000e74 <handle_v_packet+0x10c>)
 8000dbc:	f000 f94a 	bl	8001054 <gdb_putpacket>
 8000dc0:	e051      	b.n	8000e66 <handle_v_packet+0xfe>
		} else if(last_target) {
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <handle_v_packet+0x118>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00d      	beq.n	8000de6 <handle_v_packet+0x7e>
			//cur_target = target_attach(last_target,
			//			   &gdb_controller);

                        /* If we were able to attach to the target again */
                        if (cur_target) {
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <handle_v_packet+0x108>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <handle_v_packet+0x74>
                        	//target_reset(cur_target);
                        	gdb_putpacketz("T05");
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4827      	ldr	r0, [pc, #156]	; (8000e74 <handle_v_packet+0x10c>)
 8000dd6:	f000 f93d 	bl	8001054 <gdb_putpacket>
 8000dda:	e044      	b.n	8000e66 <handle_v_packet+0xfe>
                        } else	gdb_putpacketz("E01");
 8000ddc:	2103      	movs	r1, #3
 8000dde:	4826      	ldr	r0, [pc, #152]	; (8000e78 <handle_v_packet+0x110>)
 8000de0:	f000 f938 	bl	8001054 <gdb_putpacket>
 8000de4:	e03f      	b.n	8000e66 <handle_v_packet+0xfe>

		} else	gdb_putpacketz("E01");
 8000de6:	2103      	movs	r1, #3
 8000de8:	4823      	ldr	r0, [pc, #140]	; (8000e78 <handle_v_packet+0x110>)
 8000dea:	f000 f933 	bl	8001054 <gdb_putpacket>
 8000dee:	e03a      	b.n	8000e66 <handle_v_packet+0xfe>

	} else if (sscanf(packet, "vFlashErase:%08lx,%08lx", &addr, &len) == 2) {
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	f107 0214 	add.w	r2, r7, #20
 8000df8:	4922      	ldr	r1, [pc, #136]	; (8000e84 <handle_v_packet+0x11c>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f005 ffea 	bl	8006dd4 <siscanf>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d110      	bne.n	8000e28 <handle_v_packet+0xc0>
		/* Erase Flash Memory */
		DEBUG_PRINT("Flash Erase %08lX %08lX\n", addr, len);
		if(!cur_target) { gdb_putpacketz("EFF"); return; }
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <handle_v_packet+0x108>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <handle_v_packet+0xb0>
 8000e0e:	2103      	movs	r1, #3
 8000e10:	481d      	ldr	r0, [pc, #116]	; (8000e88 <handle_v_packet+0x120>)
 8000e12:	f000 f91f 	bl	8001054 <gdb_putpacket>
 8000e16:	e026      	b.n	8000e66 <handle_v_packet+0xfe>

		if(!flash_mode) {
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <handle_v_packet+0x124>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d122      	bne.n	8000e66 <handle_v_packet+0xfe>
			/* Reset target if first flash command! */
			/* This saves us if we're interrupted in IRQ context */
			//target_reset(cur_target);
			flash_mode = 1;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <handle_v_packet+0x124>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e01e      	b.n	8000e66 <handle_v_packet+0xfe>
		//if(target_flash_erase(cur_target, addr, len) == 0)
		//	gdb_putpacketz("OK");
		//else
		//	gdb_putpacketz("EFF");

	} else if (sscanf(packet, "vFlashWrite:%08lx:%n", &addr, &bin) == 1) {
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	f107 0214 	add.w	r2, r7, #20
 8000e30:	4917      	ldr	r1, [pc, #92]	; (8000e90 <handle_v_packet+0x128>)
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f005 ffce 	bl	8006dd4 <siscanf>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d104      	bne.n	8000e48 <handle_v_packet+0xe0>
		/* Write Flash Memory */
		len = plen - bin;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	e00e      	b.n	8000e66 <handle_v_packet+0xfe>
		//if(cur_target && target_flash_write(cur_target, addr, (void*)packet + bin, len) == 0)
		//	gdb_putpacketz("OK");
		//else
		//	gdb_putpacketz("EFF");

	} else if (!strcmp(packet, "vFlashDone")) {
 8000e48:	4912      	ldr	r1, [pc, #72]	; (8000e94 <handle_v_packet+0x12c>)
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff f98c 	bl	8000168 <strcmp>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d103      	bne.n	8000e5e <handle_v_packet+0xf6>
		/* Commit flash operations. */
		//gdb_putpacketz(target_flash_done(cur_target) ? "EFF" : "OK");
		flash_mode = 0;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <handle_v_packet+0x124>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e003      	b.n	8000e66 <handle_v_packet+0xfe>

	} else {
		DEBUG_PRINT("*** Unsupported packet: %s\n", packet);
		gdb_putpacket("", 0);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <handle_v_packet+0x130>)
 8000e62:	f000 f8f7 	bl	8001054 <gdb_putpacket>
	}
}
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	080080e0 	.word	0x080080e0
 8000e70:	20000838 	.word	0x20000838
 8000e74:	080080f0 	.word	0x080080f0
 8000e78:	08008040 	.word	0x08008040
 8000e7c:	080080f4 	.word	0x080080f4
 8000e80:	2000083c 	.word	0x2000083c
 8000e84:	080080fc 	.word	0x080080fc
 8000e88:	08007fe8 	.word	0x08007fe8
 8000e8c:	20000840 	.word	0x20000840
 8000e90:	08008114 	.word	0x08008114
 8000e94:	0800812c 	.word	0x0800812c
 8000e98:	08008024 	.word	0x08008024

08000e9c <handle_z_packet>:

static void
handle_z_packet(char *packet, int plen)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]

	/* I have no idea why this doesn't work. Seems to work
	 * with real sscanf() though... */
	//sscanf(packet, "%*[zZ]%hhd,%08lX,%hhd", &type, &addr, &len);
	//type = packet[1] - '0';
	sscanf(packet + 2, ",%" PRIx32 ",%d", &addr, &len);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1c98      	adds	r0, r3, #2
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	f107 0208 	add.w	r2, r7, #8
 8000eb2:	4903      	ldr	r1, [pc, #12]	; (8000ec0 <handle_z_packet+0x24>)
 8000eb4:	f005 ff8e 	bl	8006dd4 <siscanf>
	//} else if (ret > 0) {
	//	gdb_putpacketz("");
	//} else {
	//	gdb_putpacketz("OK");
	//}
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08008138 	.word	0x08008138

08000ec4 <gdb_main>:

void gdb_main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	gdb_main_loop(&gdb_controller, false);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <gdb_main+0x10>)
 8000ecc:	f7ff fb6a 	bl	80005a4 <gdb_main_loop>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <gdb_getpacket>:
#include "remote.h"

#include <stdarg.h>

int gdb_getpacket(char *packet, int size)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
		do {
			/* Spin waiting for a start of packet character - either a gdb
             * start ('$') or a BMP remote packet start ('!').
			 */
			do {
				packet[0] = gdb_if_getchar();
 8000ee2:	f7ff faf7 	bl	80004d4 <gdb_if_getchar>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	701a      	strb	r2, [r3, #0]
				if (packet[0]==0x04) return 1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d101      	bne.n	8000efa <gdb_getpacket+0x22>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0a7      	b.n	800104a <gdb_getpacket+0x172>
			} while ((packet[0] != '$') && (packet[0] != REMOTE_SOM));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b24      	cmp	r3, #36	; 0x24
 8000f00:	d003      	beq.n	8000f0a <gdb_getpacket+0x32>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b21      	cmp	r3, #33	; 0x21
 8000f08:	d1eb      	bne.n	8000ee2 <gdb_getpacket+0xa>
#ifndef OWN_HL
			if (packet[0]==REMOTE_SOM) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b21      	cmp	r3, #33	; 0x21
 8000f10:	d133      	bne.n	8000f7a <gdb_getpacket+0xa2>
				/* This is probably a remote control packet
				 * - get and handle it */
				i=0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
				bool gettingRemotePacket=true;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
				while (gettingRemotePacket) {
 8000f1a:	e02b      	b.n	8000f74 <gdb_getpacket+0x9c>
					c=gdb_if_getchar();
 8000f1c:	f7ff fada 	bl	80004d4 <gdb_if_getchar>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73bb      	strb	r3, [r7, #14]
					switch (c) {
 8000f24:	7bbb      	ldrb	r3, [r7, #14]
 8000f26:	2b23      	cmp	r3, #35	; 0x23
 8000f28:	d006      	beq.n	8000f38 <gdb_getpacket+0x60>
 8000f2a:	2b24      	cmp	r3, #36	; 0x24
 8000f2c:	d00c      	beq.n	8000f48 <gdb_getpacket+0x70>
 8000f2e:	2b21      	cmp	r3, #33	; 0x21
 8000f30:	d110      	bne.n	8000f54 <gdb_getpacket+0x7c>
					case REMOTE_SOM: /* Oh dear, packet restarts */
						i=0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
						break;
 8000f36:	e01d      	b.n	8000f74 <gdb_getpacket+0x9c>

					case REMOTE_EOM: /* Complete packet for processing */
						packet[i]=0;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
						//remotePacketProcess(i,packet);
						gettingRemotePacket=false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
						break;
 8000f46:	e015      	b.n	8000f74 <gdb_getpacket+0x9c>

					case '$': /* A 'real' gdb packet, best stop squatting now */
						packet[0]='$';
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2224      	movs	r2, #36	; 0x24
 8000f4c:	701a      	strb	r2, [r3, #0]
						gettingRemotePacket=false;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
						break;
 8000f52:	e00f      	b.n	8000f74 <gdb_getpacket+0x9c>

					default:
						if (i<size) {
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	da08      	bge.n	8000f6e <gdb_getpacket+0x96>
							packet[i++]=c;
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	613a      	str	r2, [r7, #16]
 8000f62:	461a      	mov	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	7bba      	ldrb	r2, [r7, #14]
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e001      	b.n	8000f72 <gdb_getpacket+0x9a>
						} else {
							/* Who knows what is going on...return to normality */
							gettingRemotePacket=false;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
						}
						break;
 8000f72:	bf00      	nop
				while (gettingRemotePacket) {
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1d0      	bne.n	8000f1c <gdb_getpacket+0x44>
					}
				}
			}
#endif
	    } while (packet[0] != '$');
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b24      	cmp	r3, #36	; 0x24
 8000f80:	d1af      	bne.n	8000ee2 <gdb_getpacket+0xa>

		i = 0; csum = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
		/* Capture packet data into buffer */
		while((c = gdb_if_getchar()) != '#') {
 8000f8a:	e030      	b.n	8000fee <gdb_getpacket+0x116>

			if(i == size) break; /* Oh shit */
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d034      	beq.n	8000ffe <gdb_getpacket+0x126>

			if(c == '$') { /* Restart capture */
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	2b24      	cmp	r3, #36	; 0x24
 8000f98:	d104      	bne.n	8000fa4 <gdb_getpacket+0xcc>
				i = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
				csum = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]
				continue;
 8000fa2:	e024      	b.n	8000fee <gdb_getpacket+0x116>
			}
			if(c == '}') { /* escaped char */
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	2b7d      	cmp	r3, #125	; 0x7d
 8000fa8:	d115      	bne.n	8000fd6 <gdb_getpacket+0xfe>
				c = gdb_if_getchar();
 8000faa:	f7ff fa93 	bl	80004d4 <gdb_if_getchar>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73bb      	strb	r3, [r7, #14]
				csum += c + '}';
 8000fb2:	7bba      	ldrb	r2, [r7, #14]
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	337d      	adds	r3, #125	; 0x7d
 8000fbc:	75fb      	strb	r3, [r7, #23]
				packet[i++] = c ^ 0x20;
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	613a      	str	r2, [r7, #16]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	7bba      	ldrb	r2, [r7, #14]
 8000fcc:	f082 0220 	eor.w	r2, r2, #32
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
				continue;
 8000fd4:	e00b      	b.n	8000fee <gdb_getpacket+0x116>
			}
			csum += c;
 8000fd6:	7dfa      	ldrb	r2, [r7, #23]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	4413      	add	r3, r2
 8000fdc:	75fb      	strb	r3, [r7, #23]
			packet[i++] = c;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	613a      	str	r2, [r7, #16]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	7bba      	ldrb	r2, [r7, #14]
 8000fec:	701a      	strb	r2, [r3, #0]
		while((c = gdb_if_getchar()) != '#') {
 8000fee:	f7ff fa71 	bl	80004d4 <gdb_if_getchar>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73bb      	strb	r3, [r7, #14]
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b23      	cmp	r3, #35	; 0x23
 8000ffa:	d1c7      	bne.n	8000f8c <gdb_getpacket+0xb4>
 8000ffc:	e000      	b.n	8001000 <gdb_getpacket+0x128>
			if(i == size) break; /* Oh shit */
 8000ffe:	bf00      	nop
		}
		recv_csum[0] = gdb_if_getchar();
 8001000:	f7ff fa68 	bl	80004d4 <gdb_if_getchar>
 8001004:	4603      	mov	r3, r0
 8001006:	723b      	strb	r3, [r7, #8]
		recv_csum[1] = gdb_if_getchar();
 8001008:	f7ff fa64 	bl	80004d4 <gdb_if_getchar>
 800100c:	4603      	mov	r3, r0
 800100e:	727b      	strb	r3, [r7, #9]
		recv_csum[2] = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	72bb      	strb	r3, [r7, #10]

		/* return packet if checksum matches */
		if(csum == strtol(recv_csum, NULL, 16)) break;
 8001014:	7dfc      	ldrb	r4, [r7, #23]
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2210      	movs	r2, #16
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 ffb8 	bl	8006f94 <strtol>
 8001024:	4603      	mov	r3, r0
 8001026:	429c      	cmp	r4, r3
 8001028:	d004      	beq.n	8001034 <gdb_getpacket+0x15c>

		/* get here if checksum fails */
		gdb_if_putchar('-', 1); /* send nack */
 800102a:	2101      	movs	r1, #1
 800102c:	202d      	movs	r0, #45	; 0x2d
 800102e:	f7ff fa05 	bl	800043c <gdb_if_putchar>
	while(1) {
 8001032:	e756      	b.n	8000ee2 <gdb_getpacket+0xa>
		if(csum == strtol(recv_csum, NULL, 16)) break;
 8001034:	bf00      	nop
	}
	gdb_if_putchar('+', 1); /* send ack */
 8001036:	2101      	movs	r1, #1
 8001038:	202b      	movs	r0, #43	; 0x2b
 800103a:	f7ff f9ff 	bl	800043c <gdb_if_putchar>
	packet[i] = 0;
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
		else
			DEBUG("\\x%02X", c);
	}
	DEBUG("\n");
#endif
	return i;
 8001048:	693b      	ldr	r3, [r7, #16]
}
 800104a:	4618      	mov	r0, r3
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
	...

08001054 <gdb_putpacket>:

void gdb_putpacket(const char *packet, int size)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	int i;
	unsigned char csum;
	unsigned char c;
	char xmit_csum[3];
	int tries = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]

	do {
#ifdef DEBUG_GDBPACKET
		DEBUG("%s : ", __func__);
#endif
		csum = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	74fb      	strb	r3, [r7, #19]
		gdb_if_putchar('$', 0);
 8001066:	2100      	movs	r1, #0
 8001068:	2024      	movs	r0, #36	; 0x24
 800106a:	f7ff f9e7 	bl	800043c <gdb_if_putchar>
		for(i = 0; i < size; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e02f      	b.n	80010d4 <gdb_putpacket+0x80>
			c = packet[i];
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	72fb      	strb	r3, [r7, #11]
			if ((c >= 32) && (c < 127))
				DEBUG("%c", c);
			else
				DEBUG("\\x%02X", c);
#endif
			if((c == '$') || (c == '#') || (c == '}')) {
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	2b24      	cmp	r3, #36	; 0x24
 8001082:	d005      	beq.n	8001090 <gdb_putpacket+0x3c>
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	2b23      	cmp	r3, #35	; 0x23
 8001088:	d002      	beq.n	8001090 <gdb_putpacket+0x3c>
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	2b7d      	cmp	r3, #125	; 0x7d
 800108e:	d115      	bne.n	80010bc <gdb_putpacket+0x68>
				gdb_if_putchar('}', 0);
 8001090:	2100      	movs	r1, #0
 8001092:	207d      	movs	r0, #125	; 0x7d
 8001094:	f7ff f9d2 	bl	800043c <gdb_if_putchar>
				gdb_if_putchar(c ^ 0x20, 0);
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	f083 0320 	eor.w	r3, r3, #32
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f9ca 	bl	800043c <gdb_if_putchar>
				csum += '}' + (c ^ 0x20);
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	f083 0320 	eor.w	r3, r3, #32
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7cfb      	ldrb	r3, [r7, #19]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	337d      	adds	r3, #125	; 0x7d
 80010b8:	74fb      	strb	r3, [r7, #19]
 80010ba:	e008      	b.n	80010ce <gdb_putpacket+0x7a>
			} else {
				gdb_if_putchar(c, 0);
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f9bb 	bl	800043c <gdb_if_putchar>
				csum += c;
 80010c6:	7cfa      	ldrb	r2, [r7, #19]
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	4413      	add	r3, r2
 80010cc:	74fb      	strb	r3, [r7, #19]
		for(i = 0; i < size; i++) {
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbcb      	blt.n	8001074 <gdb_putpacket+0x20>
			}
		}
		gdb_if_putchar('#', 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	2023      	movs	r0, #35	; 0x23
 80010e0:	f7ff f9ac 	bl	800043c <gdb_if_putchar>
		snprintf(xmit_csum, sizeof(xmit_csum), "%02X", csum);
 80010e4:	7cfb      	ldrb	r3, [r7, #19]
 80010e6:	f107 0008 	add.w	r0, r7, #8
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <gdb_putpacket+0xd4>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	f005 fe3d 	bl	8006d6c <sniprintf>
		gdb_if_putchar(xmit_csum[0], 0);
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f9a0 	bl	800043c <gdb_if_putchar>
		gdb_if_putchar(xmit_csum[1], 1);
 80010fc:	7a7b      	ldrb	r3, [r7, #9]
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f99b 	bl	800043c <gdb_if_putchar>
#ifdef DEBUG_GDBPACKET
		DEBUG("\n");
#endif
	} while((gdb_if_getchar_to(2000) != '+') && (tries++ < 3));
 8001106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800110a:	f7ff fa05 	bl	8000518 <gdb_if_getchar_to>
 800110e:	4603      	mov	r3, r0
 8001110:	2b2b      	cmp	r3, #43	; 0x2b
 8001112:	d004      	beq.n	800111e <gdb_putpacket+0xca>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60fa      	str	r2, [r7, #12]
 800111a:	2b02      	cmp	r3, #2
 800111c:	dda1      	ble.n	8001062 <gdb_putpacket+0xe>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08008140 	.word	0x08008140

0800112c <gdb_putpacket_f>:

void gdb_putpacket_f(const char *fmt, ...)
{
 800112c:	b40f      	push	{r0, r1, r2, r3}
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
	va_list ap;
	char *buf;
	int size;

	va_start(ap, fmt);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	60bb      	str	r3, [r7, #8]
	size = vasprintf(&buf, fmt, ap);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	4618      	mov	r0, r3
 8001142:	f005 ff55 	bl	8006ff0 <vasiprintf>
 8001146:	60f8      	str	r0, [r7, #12]
	gdb_putpacket(buf, size);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff81 	bl	8001054 <gdb_putpacket>
	free(buf);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f005 fd43 	bl	8006be0 <free>
	va_end(ap);
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001164:	b004      	add	sp, #16
 8001166:	4770      	bx	lr

08001168 <gdb_out>:

void gdb_out(const char *buf)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	char *hexdata;
	int i;

	hexdata = alloca((i = strlen(buf)*2 + 1) + 1);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f803 	bl	800017c <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3301      	adds	r3, #1
 8001182:	3307      	adds	r3, #7
 8001184:	3307      	adds	r3, #7
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	ebad 0d03 	sub.w	sp, sp, r3
 800118e:	466b      	mov	r3, sp
 8001190:	3307      	adds	r3, #7
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	60bb      	str	r3, [r7, #8]
	hexdata[0] = 'O';
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	224f      	movs	r2, #79	; 0x4f
 800119c:	701a      	strb	r2, [r3, #0]
	hexify(hexdata+1, buf, strlen(buf));
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1c5c      	adds	r4, r3, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7fe ffea 	bl	800017c <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4620      	mov	r0, r4
 80011b0:	f000 f824 	bl	80011fc <hexify>
	gdb_putpacket(hexdata, i);
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff ff4c 	bl	8001054 <gdb_putpacket>
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <gdb_voutf>:

void gdb_voutf(const char *fmt, va_list ap)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	char *buf;

	if (vasprintf(&buf, fmt, ap) < 0)
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 ff0a 	bl	8006ff0 <vasiprintf>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db08      	blt.n	80011f4 <gdb_voutf+0x30>
		return;
	gdb_out(buf);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffbf 	bl	8001168 <gdb_out>
	free(buf);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 fcf7 	bl	8006be0 <free>
 80011f2:	e000      	b.n	80011f6 <gdb_voutf+0x32>
		return;
 80011f4:	bf00      	nop
}
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <hexify>:
#include "hex_utils.h"

static const char hexdigits[] = "0123456789abcdef";

char * hexify(char *hex, const void *buf, size_t size)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	char *tmp = hex;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	617b      	str	r3, [r7, #20]
	const uint8_t *b = buf;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	613b      	str	r3, [r7, #16]

	while (size--) {
 8001210:	e016      	b.n	8001240 <hexify+0x44>
		*tmp++ = hexdigits[*b >> 4];
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	617a      	str	r2, [r7, #20]
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <hexify+0x64>)
 8001224:	5c52      	ldrb	r2, [r2, r1]
 8001226:	701a      	strb	r2, [r3, #0]
		*tmp++ = hexdigits[*b++ & 0xF];
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	613a      	str	r2, [r7, #16]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f003 020f 	and.w	r2, r3, #15
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	6179      	str	r1, [r7, #20]
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <hexify+0x64>)
 800123c:	5c8a      	ldrb	r2, [r1, r2]
 800123e:	701a      	strb	r2, [r3, #0]
	while (size--) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1e5a      	subs	r2, r3, #1
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e3      	bne.n	8001212 <hexify+0x16>
	}
	*tmp++ = 0;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	617a      	str	r2, [r7, #20]
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]

	return hex;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	4618      	mov	r0, r3
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	080081b0 	.word	0x080081b0

08001264 <unhex_digit>:

static uint8_t unhex_digit(char hex)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = hex - '0';
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3b30      	subs	r3, #48	; 0x30
 8001272:	73fb      	strb	r3, [r7, #15]
	if(tmp > 9)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b09      	cmp	r3, #9
 8001278:	d902      	bls.n	8001280 <unhex_digit+0x1c>
		tmp -= 'A' - '0' - 10;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3b07      	subs	r3, #7
 800127e:	73fb      	strb	r3, [r7, #15]
	if(tmp > 16)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d902      	bls.n	800128c <unhex_digit+0x28>
		tmp -= 'a' - 'A';
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3b20      	subs	r3, #32
 800128a:	73fb      	strb	r3, [r7, #15]
	return tmp;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <unhexify>:

char * unhexify(void *buf, const char *hex, size_t size)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	uint8_t *b = buf;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	617b      	str	r3, [r7, #20]
	while (size--) {
 80012a8:	e01b      	b.n	80012e2 <unhexify+0x4a>
		*b = unhex_digit(*hex++) << 4;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	60ba      	str	r2, [r7, #8]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffd6 	bl	8001264 <unhex_digit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	701a      	strb	r2, [r3, #0]
		*b++ |= unhex_digit(*hex++);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	60ba      	str	r2, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffca 	bl	8001264 <unhex_digit>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	617a      	str	r2, [r7, #20]
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
	while (size--) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1de      	bne.n	80012aa <unhexify+0x12>
	}
	return buf;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b09c      	sub	sp, #112	; 0x70
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fa7d 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f829 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f8c3 	bl	8001490 <MX_GPIO_Init>
  MX_ADC1_Init();
 800130a:	f000 f883 	bl	8001414 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800130e:	f004 ff99 	bl	8006244 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  volatile struct exception e;
	  TRY_CATCH(e, EXCEPTION_ALL)
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <main+0x5c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <main+0x5c>)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <main+0x5c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	330c      	adds	r3, #12
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff0c 	bl	800014c <setjmp>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10a      	bne.n	8001350 <main+0x58>
 800133a:	e004      	b.n	8001346 <main+0x4e>
	  {
		  gdb_main();
 800133c:	f7ff fdc2 	bl	8000ec4 <gdb_main>
	  TRY_CATCH(e, EXCEPTION_ALL)
 8001340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <main+0x5c>)
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <main+0x5c>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	429a      	cmp	r2, r3
 800134e:	d0f5      	beq.n	800133c <main+0x44>
	  }
	  if (e.type)
 8001350:	687b      	ldr	r3, [r7, #4]
  {
 8001352:	e7de      	b.n	8001312 <main+0x1a>
 8001354:	20000a78 	.word	0x20000a78

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001362:	2228      	movs	r2, #40	; 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fc42 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001388:	2301      	movs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800138c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001396:	2301      	movs	r3, #1
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fdf2 	bl	8002f98 <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ba:	f000 f8f1 	bl	80015a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 f85c 	bl	8003498 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013e6:	f000 f8db 	bl	80015a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80013ea:	2312      	movs	r3, #18
 80013ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f9b5 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001408:	f000 f8ca 	bl	80015a0 <Error_Handler>
  }
}
 800140c:	bf00      	nop
 800140e:	3750      	adds	r7, #80	; 0x50
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_ADC1_Init+0x74>)
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <MX_ADC1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_ADC1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_ADC1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_ADC1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_ADC1_Init+0x74>)
 800143e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001442:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_ADC1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC1_Init+0x74>)
 800144c:	2201      	movs	r2, #1
 800144e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_ADC1_Init+0x74>)
 8001452:	f000 fa35 	bl	80018c0 <HAL_ADC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f8a0 	bl	80015a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001460:	2308      	movs	r3, #8
 8001462:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001464:	2301      	movs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_ADC1_Init+0x74>)
 8001472:	f000 fafd 	bl	8001a70 <HAL_ADC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800147c:	f000 f890 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000a7c 	.word	0x20000a7c
 800148c:	40012400 	.word	0x40012400

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <MX_GPIO_Init+0x104>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a3a      	ldr	r2, [pc, #232]	; (8001594 <MX_GPIO_Init+0x104>)
 80014aa:	f043 0320 	orr.w	r3, r3, #32
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b38      	ldr	r3, [pc, #224]	; (8001594 <MX_GPIO_Init+0x104>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_GPIO_Init+0x104>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a34      	ldr	r2, [pc, #208]	; (8001594 <MX_GPIO_Init+0x104>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MX_GPIO_Init+0x104>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MX_GPIO_Init+0x104>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <MX_GPIO_Init+0x104>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <MX_GPIO_Init+0x104>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 80014ec:	2200      	movs	r2, #0
 80014ee:	f240 212e 	movw	r1, #558	; 0x22e
 80014f2:	4829      	ldr	r0, [pc, #164]	; (8001598 <MX_GPIO_Init+0x108>)
 80014f4:	f000 fe56 	bl	80021a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|LED_IDLE_RUN_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f640 4106 	movw	r1, #3078	; 0xc06
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x10c>)
 8001500:	f000 fe50 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 8001504:	f240 232e 	movw	r3, #558	; 0x22e
 8001508:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2302      	movs	r3, #2
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	481e      	ldr	r0, [pc, #120]	; (8001598 <MX_GPIO_Init+0x108>)
 800151e:	f000 fce7 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001522:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 8001526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_GPIO_Init+0x108>)
 8001538:	f000 fcda 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 LED_IDLE_RUN_Pin PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|LED_IDLE_RUN_Pin|GPIO_PIN_11;
 800153c:	f640 4306 	movw	r3, #3078	; 0xc06
 8001540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2302      	movs	r3, #2
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x10c>)
 8001556:	f000 fccb 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <MX_GPIO_Init+0x10c>)
 8001570:	f000 fcbe 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_GPIO_Init+0x10c>)
 8001586:	f000 fcb3 	bl	8001ef0 <HAL_GPIO_Init>

}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40010800 	.word	0x40010800
 800159c:	40010c00 	.word	0x40010c00

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_ADC_MspInit+0x6c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d121      	bne.n	8001674 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_ADC_MspInit+0x70>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_ADC_MspInit+0x70>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_ADC_MspInit+0x70>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_ADC_MspInit+0x70>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_ADC_MspInit+0x70>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_ADC_MspInit+0x70>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_ADC_MspInit+0x74>)
 8001670:	f000 fc3e 	bl	8001ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40012400 	.word	0x40012400
 8001680:	40021000 	.word	0x40021000
 8001684:	40010c00 	.word	0x40010c00

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <HardFault_Handler+0x4>

0800169a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <BusFault_Handler+0x4>

080016a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <UsageFault_Handler+0x4>

080016ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f8d8 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016e2:	f000 fe7e 	bl	80023e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20001748 	.word	0x20001748

080016f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x50>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x16>
		heap_end = &end;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <_sbrk+0x50>)
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <_sbrk+0x54>)
 8001704:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <_sbrk+0x50>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <_sbrk+0x50>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	466a      	mov	r2, sp
 8001716:	4293      	cmp	r3, r2
 8001718:	d907      	bls.n	800172a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800171a:	f005 fa37 	bl	8006b8c <__errno>
 800171e:	4602      	mov	r2, r0
 8001720:	230c      	movs	r3, #12
 8001722:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001728:	e006      	b.n	8001738 <_sbrk+0x48>
	}

	heap_end += incr;
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <_sbrk+0x50>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a03      	ldr	r2, [pc, #12]	; (8001740 <_sbrk+0x50>)
 8001734:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000844 	.word	0x20000844
 8001744:	200019b8 	.word	0x200019b8

08001748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <SystemInit+0x5c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <SystemInit+0x5c>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <SystemInit+0x5c>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4911      	ldr	r1, [pc, #68]	; (80017a4 <SystemInit+0x5c>)
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <SystemInit+0x60>)
 8001760:	4013      	ands	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <SystemInit+0x5c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <SystemInit+0x5c>)
 800176a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <SystemInit+0x5c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SystemInit+0x5c>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <SystemInit+0x5c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <SystemInit+0x5c>)
 8001786:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800178a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SystemInit+0x5c>)
 800178e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001792:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SystemInit+0x64>)
 8001796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179a:	609a      	str	r2, [r3, #8]
#endif 
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	f8ff0000 	.word	0xf8ff0000
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017b2:	e003      	b.n	80017bc <LoopCopyDataInit>

080017b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017ba:	3104      	adds	r1, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017c4:	d3f6      	bcc.n	80017b4 <CopyDataInit>
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017c8:	e002      	b.n	80017d0 <LoopFillZerobss>

080017ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017cc:	f842 3b04 	str.w	r3, [r2], #4

080017d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017d4:	d3f9      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d6:	f7ff ffb7 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f005 f9dd 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017de:	f7ff fd8b 	bl	80012f8 <main>
  bx lr
 80017e2:	4770      	bx	lr
  ldr r3, =_sidata
 80017e4:	08008398 	.word	0x08008398
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017ec:	2000038c 	.word	0x2000038c
  ldr r2, =_sbss
 80017f0:	2000038c 	.word	0x2000038c
  ldr r3, = _ebss
 80017f4:	200019b8 	.word	0x200019b8

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x28>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x28>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 fb2d 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fec8 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fb45 	bl	8001ed6 <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001864:	f000 fb0d 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000003c 	.word	0x2000003c
 8001880:	20000044 	.word	0x20000044
 8001884:	20000040 	.word	0x20000040

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x1c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x20>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_IncTick+0x20>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000044 	.word	0x20000044
 80018a8:	20000ab0 	.word	0x20000ab0

080018ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_GetTick+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000ab0 	.word	0x20000ab0

080018c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0be      	b.n	8001a60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe86 	bl	8001610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f9ab 	bl	8001c60 <ADC_ConversionStop_Disable>
 800190a:	4603      	mov	r3, r0
 800190c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8099 	bne.w	8001a4e <HAL_ADC_Init+0x18e>
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 8095 	bne.w	8001a4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800192c:	f023 0302 	bic.w	r3, r3, #2
 8001930:	f043 0202 	orr.w	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001940:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7b1b      	ldrb	r3, [r3, #12]
 8001946:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001948:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	4313      	orrs	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001958:	d003      	beq.n	8001962 <HAL_ADC_Init+0xa2>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d102      	bne.n	8001968 <HAL_ADC_Init+0xa8>
 8001962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001966:	e000      	b.n	800196a <HAL_ADC_Init+0xaa>
 8001968:	2300      	movs	r3, #0
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7d1b      	ldrb	r3, [r3, #20]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d119      	bne.n	80019ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7b1b      	ldrb	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	3b01      	subs	r3, #1
 8001986:	035a      	lsls	r2, r3, #13
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e00b      	b.n	80019ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f043 0220 	orr.w	r2, r3, #32
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	430a      	orrs	r2, r1
 80019be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_ADC_Init+0x1a8>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019dc:	d003      	beq.n	80019e6 <HAL_ADC_Init+0x126>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d104      	bne.n	80019f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	051b      	lsls	r3, r3, #20
 80019ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_ADC_Init+0x1ac>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d10b      	bne.n	8001a2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a2a:	e018      	b.n	8001a5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f023 0312 	bic.w	r3, r3, #18
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a4c:	e007      	b.n	8001a5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f043 0210 	orr.w	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	ffe1f7fd 	.word	0xffe1f7fd
 8001a6c:	ff1f0efe 	.word	0xff1f0efe

08001a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x20>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0dc      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1da>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d81c      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b05      	subs	r3, #5
 8001ab2:	221f      	movs	r2, #31
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b05      	subs	r3, #5
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad8:	e03c      	b.n	8001b54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d81c      	bhi.n	8001b1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b23      	subs	r3, #35	; 0x23
 8001af4:	221f      	movs	r2, #31
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	4019      	ands	r1, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	; 0x23
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1a:	e01b      	b.n	8001b54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b41      	subs	r3, #65	; 0x41
 8001b2e:	221f      	movs	r2, #31
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4019      	ands	r1, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b41      	subs	r3, #65	; 0x41
 8001b48:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d91c      	bls.n	8001b96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6898      	ldr	r0, [r3, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	e019      	b.n	8001bca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6898      	ldr	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d003      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd6:	2b11      	cmp	r3, #17
 8001bd8:	d132      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d125      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d126      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c00:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d11a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9a      	lsrs	r2, r3, #18
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x1b2>
 8001c2e:	e007      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40012400 	.word	0x40012400
 8001c58:	2000003c 	.word	0x2000003c
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d127      	bne.n	8001cca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c8a:	f7ff fe0f 	bl	80018ac <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c90:	e014      	b.n	8001cbc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c92:	f7ff fe0b 	bl	80018ac <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d90d      	bls.n	8001cbc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e007      	b.n	8001ccc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d0e3      	beq.n	8001c92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4906      	ldr	r1, [pc, #24]	; (8001d6c <__NVIC_EnableIRQ+0x34>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	f7ff ff90 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff2d 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff42 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff35 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa2 	bl	8001e28 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b08b      	sub	sp, #44	; 0x2c
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e127      	b.n	8002154 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f04:	2201      	movs	r2, #1
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 8116 	bne.w	800214e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d034      	beq.n	8001f94 <HAL_GPIO_Init+0xa4>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d80d      	bhi.n	8001f4a <HAL_GPIO_Init+0x5a>
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x9a>
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d804      	bhi.n	8001f40 <HAL_GPIO_Init+0x50>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d031      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d01c      	beq.n	8001f78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3e:	e048      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d043      	beq.n	8001fcc <HAL_GPIO_Init+0xdc>
 8001f44:	2b11      	cmp	r3, #17
 8001f46:	d01b      	beq.n	8001f80 <HAL_GPIO_Init+0x90>
          break;
 8001f48:	e043      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f4a:	4a89      	ldr	r2, [pc, #548]	; (8002170 <HAL_GPIO_Init+0x280>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d026      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f50:	4a87      	ldr	r2, [pc, #540]	; (8002170 <HAL_GPIO_Init+0x280>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d806      	bhi.n	8001f64 <HAL_GPIO_Init+0x74>
 8001f56:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_GPIO_Init+0x284>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d020      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f5c:	4a86      	ldr	r2, [pc, #536]	; (8002178 <HAL_GPIO_Init+0x288>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01d      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
          break;
 8001f62:	e036      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f64:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_GPIO_Init+0x28c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f6a:	4a85      	ldr	r2, [pc, #532]	; (8002180 <HAL_GPIO_Init+0x290>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d016      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
 8001f70:	4a84      	ldr	r2, [pc, #528]	; (8002184 <HAL_GPIO_Init+0x294>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0xae>
          break;
 8001f76:	e02c      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e028      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	3304      	adds	r3, #4
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e023      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e01e      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e019      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e012      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	611a      	str	r2, [r3, #16]
          break;
 8001fbe:	e008      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	615a      	str	r2, [r3, #20]
          break;
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2bff      	cmp	r3, #255	; 0xff
 8001fd6:	d801      	bhi.n	8001fdc <HAL_GPIO_Init+0xec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	e001      	b.n	8001fe0 <HAL_GPIO_Init+0xf0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2bff      	cmp	r3, #255	; 0xff
 8001fe6:	d802      	bhi.n	8001fee <HAL_GPIO_Init+0xfe>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x104>
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	431a      	orrs	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8096 	beq.w	800214e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_GPIO_Init+0x298>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x298>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6193      	str	r3, [r2, #24]
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_GPIO_Init+0x298>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800203a:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_GPIO_Init+0x29c>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4b      	ldr	r2, [pc, #300]	; (8002190 <HAL_GPIO_Init+0x2a0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x19e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4a      	ldr	r2, [pc, #296]	; (8002194 <HAL_GPIO_Init+0x2a4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x19a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_GPIO_Init+0x2a8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x196>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a48      	ldr	r2, [pc, #288]	; (800219c <HAL_GPIO_Init+0x2ac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x192>
 800207e:	2303      	movs	r3, #3
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 8002082:	2304      	movs	r3, #4
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x1a0>
 800208e:	2300      	movs	r3, #0
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a0:	493a      	ldr	r1, [pc, #232]	; (800218c <HAL_GPIO_Init+0x29c>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4938      	ldr	r1, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4933      	ldr	r1, [pc, #204]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	492e      	ldr	r1, [pc, #184]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
 80020ee:	e006      	b.n	80020fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4929      	ldr	r1, [pc, #164]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4924      	ldr	r1, [pc, #144]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
 8002116:	e006      	b.n	8002126 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	43db      	mvns	r3, r3
 8002120:	491f      	ldr	r1, [pc, #124]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002122:	4013      	ands	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	491a      	ldr	r1, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	60cb      	str	r3, [r1, #12]
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4915      	ldr	r1, [pc, #84]	; (80021a0 <HAL_GPIO_Init+0x2b0>)
 800214a:	4013      	ands	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f aed0 	bne.w	8001f04 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	372c      	adds	r7, #44	; 0x2c
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	10210000 	.word	0x10210000
 8002174:	10110000 	.word	0x10110000
 8002178:	10120000 	.word	0x10120000
 800217c:	10310000 	.word	0x10310000
 8002180:	10320000 	.word	0x10320000
 8002184:	10220000 	.word	0x10220000
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00
 8002198:	40011000 	.word	0x40011000
 800219c:	40011400 	.word	0x40011400
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b08b      	sub	sp, #44	; 0x2c
 80021d8:	af06      	add	r7, sp, #24
 80021da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0d3      	b.n	800238e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f004 fa14 	bl	8006628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f001 fb8a 	bl	8003926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	687e      	ldr	r6, [r7, #4]
 800221a:	466d      	mov	r5, sp
 800221c:	f106 0410 	add.w	r4, r6, #16
 8002220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	602b      	str	r3, [r5, #0]
 8002228:	1d33      	adds	r3, r6, #4
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f001 fb53 	bl	80038d8 <USB_CoreInit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0a4      	b.n	800238e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f001 fb87 	bl	800395e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e035      	b.n	80022c2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	015b      	lsls	r3, r3, #5
 800225c:	4413      	add	r3, r2
 800225e:	3329      	adds	r3, #41	; 0x29
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	015b      	lsls	r3, r3, #5
 800226a:	4413      	add	r3, r2
 800226c:	3328      	adds	r3, #40	; 0x28
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	b291      	uxth	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	4413      	add	r3, r2
 800227e:	3336      	adds	r3, #54	; 0x36
 8002280:	460a      	mov	r2, r1
 8002282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	4413      	add	r3, r2
 800228c:	332b      	adds	r3, #43	; 0x2b
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	015b      	lsls	r3, r3, #5
 8002298:	4413      	add	r3, r2
 800229a:	3338      	adds	r3, #56	; 0x38
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	015b      	lsls	r3, r3, #5
 80022a6:	4413      	add	r3, r2
 80022a8:	333c      	adds	r3, #60	; 0x3c
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	3302      	adds	r3, #2
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	4413      	add	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	3301      	adds	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3c4      	bcc.n	8002256 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e031      	b.n	8002336 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	015b      	lsls	r3, r3, #5
 80022d8:	4413      	add	r3, r2
 80022da:	f203 1329 	addw	r3, r3, #297	; 0x129
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	4413      	add	r3, r2
 80022fa:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	4413      	add	r3, r2
 800230a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	4413      	add	r3, r2
 800231a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	330a      	adds	r3, #10
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	4413      	add	r3, r2
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	3301      	adds	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3c8      	bcc.n	80022d2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	687e      	ldr	r6, [r7, #4]
 8002348:	466d      	mov	r5, sp
 800234a:	f106 0410 	add.w	r4, r6, #16
 800234e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	602b      	str	r3, [r5, #0]
 8002356:	1d33      	adds	r3, r6, #4
 8002358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	f001 fb0b 	bl	8003976 <USB_DevInit>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00d      	b.n	800238e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fb49 	bl	8004a1e <USB_DevDisconnect>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002396 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_PCD_Start+0x16>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e016      	b.n	80023da <HAL_PCD_Start+0x44>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80023b4:	2101      	movs	r1, #1
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f004 fb9d 	bl	8006af6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fb22 	bl	8004a0a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fa94 	bl	80038f8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fb1f 	bl	8004a32 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fe:	d102      	bne.n	8002406 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 faf3 	bl	80029ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fb11 	bl	8004a32 <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d112      	bne.n	8002442 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f004 f96c 	bl	8006712 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8de 	bl	80025fe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 faf3 	bl	8004a32 <USB_ReadInterrupts>
 800244c:	4603      	mov	r3, r0
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002456:	d10b      	bne.n	8002470 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002460:	b29a      	uxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800246a:	b292      	uxth	r2, r2
 800246c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fadc 	bl	8004a32 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d10b      	bne.n	800249e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002498:	b292      	uxth	r2, r2
 800249a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fac5 	bl	8004a32 <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	d126      	bne.n	8002502 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0204 	bic.w	r2, r2, #4
 80024c6:	b292      	uxth	r2, r2
 80024c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0208 	bic.w	r2, r2, #8
 80024de:	b292      	uxth	r2, r2
 80024e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f004 f94d 	bl	8006784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024fc:	b292      	uxth	r2, r2
 80024fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 fa93 	bl	8004a32 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002516:	d13d      	bne.n	8002594 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002542:	b292      	uxth	r2, r2
 8002544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002550:	b29a      	uxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0204 	orr.w	r2, r2, #4
 800255a:	b292      	uxth	r2, r2
 800255c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fa64 	bl	8004a32 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002574:	d10b      	bne.n	800258e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002588:	b292      	uxth	r2, r2
 800258a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f004 f8de 	bl	8006750 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fa4a 	bl	8004a32 <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a8:	d10e      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025bc:	b292      	uxth	r2, r2
 80025be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f004 f897 	bl	80066f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fa30 	bl	8004a32 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025dc:	d10b      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f0:	b292      	uxth	r2, r2
 80025f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_PCD_SetAddress+0x1a>
 8002614:	2302      	movs	r3, #2
 8002616:	e013      	b.n	8002640 <HAL_PCD_SetAddress+0x42>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f002 f9d7 	bl	80049e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	70fb      	strb	r3, [r7, #3]
 800265a:	460b      	mov	r3, r1
 800265c:	803b      	strh	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266a:	2b00      	cmp	r3, #0
 800266c:	da0b      	bge.n	8002686 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	015b      	lsls	r3, r3, #5
 8002676:	3328      	adds	r3, #40	; 0x28
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	705a      	strb	r2, [r3, #1]
 8002684:	e00b      	b.n	800269e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026aa:	883a      	ldrh	r2, [r7, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	78ba      	ldrb	r2, [r7, #2]
 80026b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026c8:	78bb      	ldrb	r3, [r7, #2]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d102      	bne.n	80026d4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_PCD_EP_Open+0x9a>
 80026de:	2302      	movs	r3, #2
 80026e0:	e00e      	b.n	8002700 <HAL_PCD_EP_Open+0xb8>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 f965 	bl	80039c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002718:	2b00      	cmp	r3, #0
 800271a:	da0b      	bge.n	8002734 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	015b      	lsls	r3, r3, #5
 8002724:	3328      	adds	r3, #40	; 0x28
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	705a      	strb	r2, [r3, #1]
 8002732:	e00b      	b.n	800274c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	015b      	lsls	r3, r3, #5
 800273c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_PCD_EP_Close+0x5e>
 8002762:	2302      	movs	r3, #2
 8002764:	e00e      	b.n	8002784 <HAL_PCD_EP_Close+0x7c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68f9      	ldr	r1, [r7, #12]
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fc11 	bl	8003f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	015b      	lsls	r3, r3, #5
 80027a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2200      	movs	r2, #0
 80027c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fd70 	bl	80042c8 <USB_EPStartXfer>
 80027e8:	e005      	b.n	80027f6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6979      	ldr	r1, [r7, #20]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 fd69 	bl	80042c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	330a      	adds	r3, #10
 8002816:	015b      	lsls	r3, r3, #5
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	460b      	mov	r3, r1
 8002836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	3328      	adds	r3, #40	; 0x28
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2201      	movs	r2, #1
 800285e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	b2da      	uxtb	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800286c:	7afb      	ldrb	r3, [r7, #11]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6979      	ldr	r1, [r7, #20]
 800287c:	4618      	mov	r0, r3
 800287e:	f001 fd23 	bl	80042c8 <USB_EPStartXfer>
 8002882:	e005      	b.n	8002890 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fd1c 	bl	80042c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 0207 	and.w	r2, r3, #7
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d901      	bls.n	80028b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e046      	b.n	8002946 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	da0b      	bge.n	80028d8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	3328      	adds	r3, #40	; 0x28
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	705a      	strb	r2, [r3, #1]
 80028d6:	e009      	b.n	80028ec <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_PCD_EP_SetStall+0x72>
 8002908:	2302      	movs	r3, #2
 800290a:	e01c      	b.n	8002946 <HAL_PCD_EP_SetStall+0xac>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	4618      	mov	r0, r3
 800291c:	f001 ff8c 	bl	8004838 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f002 f88a 	bl	8004a50 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d901      	bls.n	800296c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e03a      	b.n	80029e2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800296c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da0b      	bge.n	800298c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	015b      	lsls	r3, r3, #5
 800297c:	3328      	adds	r3, #40	; 0x28
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	705a      	strb	r2, [r3, #1]
 800298a:	e00b      	b.n	80029a4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_EP_ClrStall+0x76>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e00e      	b.n	80029e2 <HAL_PCD_EP_ClrStall+0x94>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 ff72 	bl	80048bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029f4:	e282      	b.n	8002efc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029fe:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a00:	8afb      	ldrh	r3, [r7, #22]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002a0a:	7d7b      	ldrb	r3, [r7, #21]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 8142 	bne.w	8002c96 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d151      	bne.n	8002ac0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2c:	b29c      	uxth	r4, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3328      	adds	r3, #40	; 0x28
 8002a42:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f003 fe21 	bl	80066c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8234 	beq.w	8002efc <PCD_EP_ISR_Handler+0x510>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 822f 	bne.w	8002efc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002abe:	e21d      	b.n	8002efc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ac6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d033      	beq.n	8002b42 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	3306      	adds	r3, #6
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f001 ffe8 	bl	8004aee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29c      	uxth	r4, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b36:	b292      	uxth	r2, r2
 8002b38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f003 fd9a 	bl	8006674 <HAL_PCD_SetupStageCallback>
 8002b40:	e1dc      	b.n	8002efc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f280 81d8 	bge.w	8002efc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b58:	4013      	ands	r3, r2
 8002b5a:	b29c      	uxth	r4, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b64:	b292      	uxth	r2, r2
 8002b66:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3306      	adds	r3, #6
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d019      	beq.n	8002bd0 <PCD_EP_ISR_Handler+0x1e4>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f001 ff9a 	bl	8004aee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f003 fd64 	bl	8006698 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	441c      	add	r4, r3
 8002be2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002be6:	461c      	mov	r4, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10e      	bne.n	8002c0e <PCD_EP_ISR_Handler+0x222>
 8002bf0:	8823      	ldrh	r3, [r4, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	8023      	strh	r3, [r4, #0]
 8002bfc:	8823      	ldrh	r3, [r4, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	8023      	strh	r3, [r4, #0]
 8002c0c:	e02d      	b.n	8002c6a <PCD_EP_ISR_Handler+0x27e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b3e      	cmp	r3, #62	; 0x3e
 8002c14:	d812      	bhi.n	8002c3c <PCD_EP_ISR_Handler+0x250>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <PCD_EP_ISR_Handler+0x244>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	8023      	strh	r3, [r4, #0]
 8002c3a:	e016      	b.n	8002c6a <PCD_EP_ISR_Handler+0x27e>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <PCD_EP_ISR_Handler+0x26a>
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	029b      	lsls	r3, r3, #10
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	b29c      	uxth	r4, r3
 8002c7c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c80:	b29c      	uxth	r4, r3
 8002c82:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002c86:	b29c      	uxth	r4, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4ba2      	ldr	r3, [pc, #648]	; (8002f18 <PCD_EP_ISR_Handler+0x52c>)
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]
 8002c94:	e132      	b.n	8002efc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	7d7b      	ldrb	r3, [r7, #21]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ca6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f280 80d1 	bge.w	8002e52 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	7d7b      	ldrb	r3, [r7, #21]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29c      	uxth	r4, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	7d7b      	ldrb	r3, [r7, #21]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002cd8:	b292      	uxth	r2, r2
 8002cda:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cdc:	7d7b      	ldrb	r3, [r7, #21]
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	7b1b      	ldrb	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d121      	bne.n	8002d36 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	3306      	adds	r3, #6
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002d1c:	8bfb      	ldrh	r3, [r7, #30]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d072      	beq.n	8002e08 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6959      	ldr	r1, [r3, #20]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88da      	ldrh	r2, [r3, #6]
 8002d2e:	8bfb      	ldrh	r3, [r7, #30]
 8002d30:	f001 fedd 	bl	8004aee <USB_ReadPMA>
 8002d34:	e068      	b.n	8002e08 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d021      	beq.n	8002d94 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	3302      	adds	r3, #2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d78:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002d7a:	8bfb      	ldrh	r3, [r7, #30]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02a      	beq.n	8002dd6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6959      	ldr	r1, [r3, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	891a      	ldrh	r2, [r3, #8]
 8002d8c:	8bfb      	ldrh	r3, [r7, #30]
 8002d8e:	f001 feae 	bl	8004aee <USB_ReadPMA>
 8002d92:	e020      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	3306      	adds	r3, #6
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dbc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002dbe:	8bfb      	ldrh	r3, [r7, #30]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6959      	ldr	r1, [r3, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	895a      	ldrh	r2, [r3, #10]
 8002dd0:	8bfb      	ldrh	r3, [r7, #30]
 8002dd2:	f001 fe8c 	bl	8004aee <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df0:	b29c      	uxth	r4, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <PCD_EP_ISR_Handler+0x530>)
 8002e02:	4323      	orrs	r3, r4
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	8bfb      	ldrh	r3, [r7, #30]
 8002e0e:	441a      	add	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	8bfb      	ldrh	r3, [r7, #30]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <PCD_EP_ISR_Handler+0x446>
 8002e28:	8bfa      	ldrh	r2, [r7, #30]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d206      	bcs.n	8002e40 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f003 fc2d 	bl	8006698 <HAL_PCD_DataOutStageCallback>
 8002e3e:	e008      	b.n	8002e52 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	7819      	ldrb	r1, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fc9d 	bl	800278c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e52:	8a7b      	ldrh	r3, [r7, #18]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d04f      	beq.n	8002efc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e5c:	7d7b      	ldrb	r3, [r7, #21]
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	3328      	adds	r3, #40	; 0x28
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	7d7b      	ldrb	r3, [r7, #21]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e80:	b29c      	uxth	r4, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	7d7b      	ldrb	r3, [r7, #21]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	441a      	add	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f003 fbf0 	bl	80066c8 <HAL_PCD_DataInStageCallback>
 8002ee8:	e008      	b.n	8002efc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	7819      	ldrb	r1, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fc96 	bl	8002828 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f6ff ad74 	blt.w	80029f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3724      	adds	r7, #36	; 0x24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	ffff8080 	.word	0xffff8080
 8002f1c:	ffff80c0 	.word	0xffff80c0

08002f20 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	015b      	lsls	r3, r3, #5
 8002f46:	3328      	adds	r3, #40	; 0x28
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e006      	b.n	8002f5e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f50:	897b      	ldrh	r3, [r7, #10]
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f5e:	893b      	ldrh	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	80da      	strh	r2, [r3, #6]
 8002f72:	e00b      	b.n	8002f8c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2201      	movs	r2, #1
 8002f78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e26c      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8087 	beq.w	80030c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb8:	4b92      	ldr	r3, [pc, #584]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d00c      	beq.n	8002fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc4:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d112      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5e>
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d06c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x12c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d168      	bne.n	80030c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e246      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x76>
 8003000:	4b80      	ldr	r3, [pc, #512]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a7f      	ldr	r2, [pc, #508]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e02e      	b.n	800306c <HAL_RCC_OscConfig+0xd4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x98>
 8003016:	4b7b      	ldr	r3, [pc, #492]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7a      	ldr	r2, [pc, #488]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b78      	ldr	r3, [pc, #480]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a77      	ldr	r2, [pc, #476]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xd4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0xbc>
 800303a:	4b72      	ldr	r3, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a71      	ldr	r2, [pc, #452]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xd4>
 8003054:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a67      	ldr	r2, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fc1a 	bl	80018ac <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fc16 	bl	80018ac <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1fa      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b5d      	ldr	r3, [pc, #372]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xe4>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fc06 	bl	80018ac <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fc02 	bl	80018ac <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1e6      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x10c>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d2:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030de:	4b49      	ldr	r3, [pc, #292]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x18c>
 80030ea:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d116      	bne.n	8003124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x176>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1ba      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4939      	ldr	r1, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	e03a      	b.n	800319a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x270>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fbbb 	bl	80018ac <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313a:	f7fe fbb7 	bl	80018ac <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e19b      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4927      	ldr	r1, [pc, #156]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e015      	b.n	800319a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_RCC_OscConfig+0x270>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fb9a 	bl	80018ac <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe fb96 	bl	80018ac <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e17a      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03a      	beq.n	800321c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_RCC_OscConfig+0x274>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe fb7a 	bl	80018ac <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe fb76 	bl	80018ac <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e15a      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031da:	2001      	movs	r0, #1
 80031dc:	f000 faa8 	bl	8003730 <RCC_Delay>
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_OscConfig+0x274>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fe fb60 	bl	80018ac <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe fb5c 	bl	80018ac <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d908      	bls.n	8003210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e140      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	42420000 	.word	0x42420000
 800320c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	4b9e      	ldr	r3, [pc, #632]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e9      	bne.n	80031f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a6 	beq.w	8003376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b97      	ldr	r3, [pc, #604]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b94      	ldr	r3, [pc, #592]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4a93      	ldr	r2, [pc, #588]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	61d3      	str	r3, [r2, #28]
 8003246:	4b91      	ldr	r3, [pc, #580]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <HAL_RCC_OscConfig+0x4f8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <HAL_RCC_OscConfig+0x4f8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a8a      	ldr	r2, [pc, #552]	; (8003490 <HAL_RCC_OscConfig+0x4f8>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe fb1d 	bl	80018ac <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe fb19 	bl	80018ac <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0fd      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b81      	ldr	r3, [pc, #516]	; (8003490 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x312>
 800329c:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	e02d      	b.n	8003306 <HAL_RCC_OscConfig+0x36e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x334>
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4a75      	ldr	r2, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6213      	str	r3, [r2, #32]
 80032be:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a72      	ldr	r2, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x36e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x356>
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4a6c      	ldr	r2, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6213      	str	r3, [r2, #32]
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a69      	ldr	r2, [pc, #420]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x36e>
 80032ee:	4b67      	ldr	r3, [pc, #412]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4a66      	ldr	r2, [pc, #408]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6213      	str	r3, [r2, #32]
 80032fa:	4b64      	ldr	r3, [pc, #400]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4a63      	ldr	r2, [pc, #396]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe facd 	bl	80018ac <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fac9 	bl	80018ac <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0ab      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b57      	ldr	r3, [pc, #348]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x37e>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fab7 	bl	80018ac <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fab3 	bl	80018ac <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e095      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4a47      	ldr	r2, [pc, #284]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8081 	beq.w	8003482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d061      	beq.n	8003450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d146      	bne.n	8003422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCC_OscConfig+0x4fc>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fe fa87 	bl	80018ac <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fa83 	bl	80018ac <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e067      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b4:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d108      	bne.n	80033dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	492d      	ldr	r1, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a19      	ldr	r1, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	430b      	orrs	r3, r1
 80033ee:	4927      	ldr	r1, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x4fc>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fa57 	bl	80018ac <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fa53 	bl	80018ac <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e037      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x46a>
 8003420:	e02f      	b.n	8003482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <HAL_RCC_OscConfig+0x4fc>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fa40 	bl	80018ac <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fa3c 	bl	80018ac <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e020      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x498>
 800344e:	e018      	b.n	8003482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e013      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x4f4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	429a      	cmp	r2, r3
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
 8003494:	42420060 	.word	0x42420060

08003498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0d0      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d910      	bls.n	80034dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 0207 	bic.w	r2, r3, #7
 80034c2:	4965      	ldr	r1, [pc, #404]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b8      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	494d      	ldr	r1, [pc, #308]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d040      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d115      	bne.n	8003576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07f      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e073      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e06b      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003576:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f023 0203 	bic.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4936      	ldr	r1, [pc, #216]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003588:	f7fe f990 	bl	80018ac <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003590:	f7fe f98c 	bl	80018ac <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e053      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 020c 	and.w	r2, r3, #12
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1eb      	bne.n	8003590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d210      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 0207 	bic.w	r2, r3, #7
 80035ce:	4922      	ldr	r1, [pc, #136]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e032      	b.n	800364e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4916      	ldr	r1, [pc, #88]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	490e      	ldr	r1, [pc, #56]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003626:	f000 f821 	bl	800366c <HAL_RCC_GetSysClockFreq>
 800362a:	4601      	mov	r1, r0
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	fa21 f303 	lsr.w	r3, r1, r3
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1cc>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1d0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe f8ee 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40022000 	.word	0x40022000
 800365c:	40021000 	.word	0x40021000
 8003660:	080081c4 	.word	0x080081c4
 8003664:	2000003c 	.word	0x2000003c
 8003668:	20000040 	.word	0x20000040

0800366c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	b490      	push	{r4, r7}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003674:	1d3c      	adds	r4, r7, #4
 8003676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RCC_GetSysClockFreq+0xb4>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x40>
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x46>
 80036aa:	e02d      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036ae:	623b      	str	r3, [r7, #32]
      break;
 80036b0:	e02d      	b.n	800370e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	0c9b      	lsrs	r3, r3, #18
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036be:	4413      	add	r3, r2
 80036c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c5b      	lsrs	r3, r3, #17
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036de:	4413      	add	r3, r2
 80036e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036ea:	fb02 f203 	mul.w	r2, r2, r3
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e004      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	4a0c      	ldr	r2, [pc, #48]	; (800372c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	623b      	str	r3, [r7, #32]
      break;
 8003706:	e002      	b.n	800370e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCC_GetSysClockFreq+0xbc>)
 800370a:	623b      	str	r3, [r7, #32]
      break;
 800370c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370e:	6a3b      	ldr	r3, [r7, #32]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3728      	adds	r7, #40	; 0x28
 8003714:	46bd      	mov	sp, r7
 8003716:	bc90      	pop	{r4, r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	08008148 	.word	0x08008148
 8003720:	08008158 	.word	0x08008158
 8003724:	40021000 	.word	0x40021000
 8003728:	007a1200 	.word	0x007a1200
 800372c:	003d0900 	.word	0x003d0900

08003730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <RCC_Delay+0x34>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <RCC_Delay+0x38>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a5b      	lsrs	r3, r3, #9
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800374c:	bf00      	nop
  }
  while (Delay --);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <RCC_Delay+0x1c>
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000003c 	.word	0x2000003c
 8003768:	10624dd3 	.word	0x10624dd3

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d07d      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378c:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a4b      	ldr	r2, [pc, #300]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
 80037a4:	4b49      	ldr	r3, [pc, #292]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d118      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a42      	ldr	r2, [pc, #264]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037cc:	f7fe f86e 	bl	80018ac <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	e008      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d4:	f7fe f86a 	bl	80018ac <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e06d      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02e      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	429a      	cmp	r2, r3
 800380e:	d027      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003820:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d014      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe f839 	bl	80018ac <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fe f835 	bl	80018ac <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e036      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ee      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4917      	ldr	r1, [pc, #92]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	4313      	orrs	r3, r2
 8003870:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	490b      	ldr	r1, [pc, #44]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4904      	ldr	r1, [pc, #16]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42420440 	.word	0x42420440

080038d8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038d8:	b084      	sub	sp, #16
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	f107 0014 	add.w	r0, r7, #20
 80038e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	b004      	add	sp, #16
 80038f6:	4770      	bx	lr

080038f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003900:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003904:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800390c:	b29a      	uxth	r2, r3
 800390e:	89fb      	ldrh	r3, [r7, #14]
 8003910:	4313      	orrs	r3, r2
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800392e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003932:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800393a:	b29b      	uxth	r3, r3
 800393c:	b21a      	sxth	r2, r3
 800393e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003942:	43db      	mvns	r3, r3
 8003944:	b21b      	sxth	r3, r3
 8003946:	4013      	ands	r3, r2
 8003948:	b21b      	sxth	r3, r3
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003976:	b084      	sub	sp, #16
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	f107 0014 	add.w	r0, r7, #20
 8003984:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ffa5 	bl	80038f8 <USB_EnableGlobalInt>

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ba:	b004      	add	sp, #16
 80039bc:	4770      	bx	lr
	...

080039c0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039c0:	b490      	push	{r4, r7}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80039e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	78db      	ldrb	r3, [r3, #3]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d819      	bhi.n	8003a22 <USB_ActivateEndpoint+0x62>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <USB_ActivateEndpoint+0x34>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a19 	.word	0x08003a19
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003a0f 	.word	0x08003a0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a04:	89bb      	ldrh	r3, [r7, #12]
 8003a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0a:	81bb      	strh	r3, [r7, #12]
      break;
 8003a0c:	e00d      	b.n	8003a2a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a0e:	89bb      	ldrh	r3, [r7, #12]
 8003a10:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003a14:	81bb      	strh	r3, [r7, #12]
      break;
 8003a16:	e008      	b.n	8003a2a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a18:	89bb      	ldrh	r3, [r7, #12]
 8003a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a1e:	81bb      	strh	r3, [r7, #12]
      break;
 8003a20:	e003      	b.n	8003a2a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      break;
 8003a26:	e000      	b.n	8003a2a <USB_ActivateEndpoint+0x6a>
      break;
 8003a28:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	89bb      	ldrh	r3, [r7, #12]
 8003a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b29c      	uxth	r4, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	4b8a      	ldr	r3, [pc, #552]	; (8003ca0 <USB_ActivateEndpoint+0x2e0>)
 8003a78:	4323      	orrs	r3, r4
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7b1b      	ldrb	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 8112 	bne.w	8003cac <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d067      	beq.n	8003b60 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a90:	687c      	ldr	r4, [r7, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	441c      	add	r4, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4423      	add	r3, r4
 8003aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa8:	461c      	mov	r4, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	88db      	ldrh	r3, [r3, #6]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29c      	uxth	r4, r3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d014      	beq.n	8003afa <USB_ActivateEndpoint+0x13a>
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	b29c      	uxth	r4, r3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <USB_ActivateEndpoint+0x2e4>)
 8003af4:	4323      	orrs	r3, r4
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	78db      	ldrb	r3, [r3, #3]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d018      	beq.n	8003b34 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b18:	b29c      	uxth	r4, r3
 8003b1a:	f084 0320 	eor.w	r3, r4, #32
 8003b1e:	b29c      	uxth	r4, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <USB_ActivateEndpoint+0x2e0>)
 8003b2c:	4323      	orrs	r3, r4
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8013      	strh	r3, [r2, #0]
 8003b32:	e22b      	b.n	8003f8c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4a:	b29c      	uxth	r4, r3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	4b52      	ldr	r3, [pc, #328]	; (8003ca0 <USB_ActivateEndpoint+0x2e0>)
 8003b58:	4323      	orrs	r3, r4
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8013      	strh	r3, [r2, #0]
 8003b5e:	e215      	b.n	8003f8c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b60:	687c      	ldr	r4, [r7, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	441c      	add	r4, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4423      	add	r3, r4
 8003b74:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b78:	461c      	mov	r4, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	88db      	ldrh	r3, [r3, #6]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b88:	687c      	ldr	r4, [r7, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	441c      	add	r4, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	4423      	add	r3, r4
 8003b9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <USB_ActivateEndpoint+0x208>
 8003baa:	8823      	ldrh	r3, [r4, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	8023      	strh	r3, [r4, #0]
 8003bb6:	8823      	ldrh	r3, [r4, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8023      	strh	r3, [r4, #0]
 8003bc6:	e02d      	b.n	8003c24 <USB_ActivateEndpoint+0x264>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8003bce:	d812      	bhi.n	8003bf6 <USB_ActivateEndpoint+0x236>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <USB_ActivateEndpoint+0x22a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8023      	strh	r3, [r4, #0]
 8003bf4:	e016      	b.n	8003c24 <USB_ActivateEndpoint+0x264>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <USB_ActivateEndpoint+0x250>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29c      	uxth	r4, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d014      	beq.n	8003c66 <USB_ActivateEndpoint+0x2a6>
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	b29c      	uxth	r4, r3
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <USB_ActivateEndpoint+0x2e8>)
 8003c60:	4323      	orrs	r3, r4
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7c:	b29c      	uxth	r4, r3
 8003c7e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c82:	b29c      	uxth	r4, r3
 8003c84:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c88:	b29c      	uxth	r4, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	441a      	add	r2, r3
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <USB_ActivateEndpoint+0x2e0>)
 8003c96:	4323      	orrs	r3, r4
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]
 8003c9c:	e176      	b.n	8003f8c <USB_ActivateEndpoint+0x5cc>
 8003c9e:	bf00      	nop
 8003ca0:	ffff8080 	.word	0xffff8080
 8003ca4:	ffff80c0 	.word	0xffff80c0
 8003ca8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	b29c      	uxth	r4, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	4b96      	ldr	r3, [pc, #600]	; (8003f28 <USB_ActivateEndpoint+0x568>)
 8003cd0:	4323      	orrs	r3, r4
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cd6:	687c      	ldr	r4, [r7, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	441c      	add	r4, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	4423      	add	r3, r4
 8003cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cee:	461c      	mov	r4, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	891b      	ldrh	r3, [r3, #8]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8023      	strh	r3, [r4, #0]
 8003cfe:	687c      	ldr	r4, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	441c      	add	r4, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	4423      	add	r3, r4
 8003d12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d16:	461c      	mov	r4, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	895b      	ldrh	r3, [r3, #10]
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 8088 	bne.w	8003e40 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29c      	uxth	r4, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d014      	beq.n	8003d72 <USB_ActivateEndpoint+0x3b2>
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	b29c      	uxth	r4, r3
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <USB_ActivateEndpoint+0x56c>)
 8003d6c:	4323      	orrs	r3, r4
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29c      	uxth	r4, r3
 8003d80:	4623      	mov	r3, r4
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <USB_ActivateEndpoint+0x3f4>
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	b29c      	uxth	r4, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <USB_ActivateEndpoint+0x570>)
 8003dae:	4323      	orrs	r3, r4
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	b29c      	uxth	r4, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <USB_ActivateEndpoint+0x570>)
 8003dd8:	4323      	orrs	r3, r4
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	b29c      	uxth	r4, r3
 8003df6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003dfa:	b29c      	uxth	r4, r3
 8003dfc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e00:	b29c      	uxth	r4, r3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <USB_ActivateEndpoint+0x574>)
 8003e0e:	4323      	orrs	r3, r4
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2a:	b29c      	uxth	r4, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <USB_ActivateEndpoint+0x574>)
 8003e38:	4323      	orrs	r3, r4
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]
 8003e3e:	e0a5      	b.n	8003f8c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29c      	uxth	r4, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d014      	beq.n	8003e82 <USB_ActivateEndpoint+0x4c2>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	b29c      	uxth	r4, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <USB_ActivateEndpoint+0x56c>)
 8003e7c:	4323      	orrs	r3, r4
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29c      	uxth	r4, r3
 8003e90:	4623      	mov	r3, r4
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d014      	beq.n	8003ec4 <USB_ActivateEndpoint+0x504>
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	b29c      	uxth	r4, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <USB_ActivateEndpoint+0x570>)
 8003ebe:	4323      	orrs	r3, r4
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	b29c      	uxth	r4, r3
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <USB_ActivateEndpoint+0x56c>)
 8003ee8:	4323      	orrs	r3, r4
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d020      	beq.n	8003f38 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	b29c      	uxth	r4, r3
 8003f0e:	f084 0320 	eor.w	r3, r4, #32
 8003f12:	b29c      	uxth	r4, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <USB_ActivateEndpoint+0x574>)
 8003f20:	4323      	orrs	r3, r4
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	8013      	strh	r3, [r2, #0]
 8003f26:	e01c      	b.n	8003f62 <USB_ActivateEndpoint+0x5a2>
 8003f28:	ffff8180 	.word	0xffff8180
 8003f2c:	ffffc080 	.word	0xffffc080
 8003f30:	ffff80c0 	.word	0xffff80c0
 8003f34:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4e:	b29c      	uxth	r4, r3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <USB_ActivateEndpoint+0x5d8>)
 8003f5c:	4323      	orrs	r3, r4
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	b29c      	uxth	r4, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <USB_ActivateEndpoint+0x5d8>)
 8003f86:	4323      	orrs	r3, r4
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc90      	pop	{r4, r7}
 8003f96:	4770      	bx	lr
 8003f98:	ffff8080 	.word	0xffff8080

08003f9c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f9c:	b490      	push	{r4, r7}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	7b1b      	ldrb	r3, [r3, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d171      	bne.n	8004092 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d036      	beq.n	8004024 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d014      	beq.n	8003ff8 <USB_DeactivateEndpoint+0x5c>
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	b29c      	uxth	r4, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	4b6b      	ldr	r3, [pc, #428]	; (80041a0 <USB_DeactivateEndpoint+0x204>)
 8003ff2:	4323      	orrs	r3, r4
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400e:	b29c      	uxth	r4, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	4b62      	ldr	r3, [pc, #392]	; (80041a4 <USB_DeactivateEndpoint+0x208>)
 800401c:	4323      	orrs	r3, r4
 800401e:	b29b      	uxth	r3, r3
 8004020:	8013      	strh	r3, [r2, #0]
 8004022:	e144      	b.n	80042ae <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29c      	uxth	r4, r3
 8004032:	4623      	mov	r3, r4
 8004034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d014      	beq.n	8004066 <USB_DeactivateEndpoint+0xca>
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	b29c      	uxth	r4, r3
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <USB_DeactivateEndpoint+0x20c>)
 8004060:	4323      	orrs	r3, r4
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	b29c      	uxth	r4, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	4b46      	ldr	r3, [pc, #280]	; (80041a4 <USB_DeactivateEndpoint+0x208>)
 800408a:	4323      	orrs	r3, r4
 800408c:	b29b      	uxth	r3, r3
 800408e:	8013      	strh	r3, [r2, #0]
 8004090:	e10d      	b.n	80042ae <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 8088 	bne.w	80041ac <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29c      	uxth	r4, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d014      	beq.n	80040de <USB_DeactivateEndpoint+0x142>
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	b29c      	uxth	r4, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <USB_DeactivateEndpoint+0x20c>)
 80040d8:	4323      	orrs	r3, r4
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	4623      	mov	r3, r4
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d014      	beq.n	8004120 <USB_DeactivateEndpoint+0x184>
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	b29c      	uxth	r4, r3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <USB_DeactivateEndpoint+0x204>)
 800411a:	4323      	orrs	r3, r4
 800411c:	b29b      	uxth	r3, r3
 800411e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	b29c      	uxth	r4, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <USB_DeactivateEndpoint+0x204>)
 8004144:	4323      	orrs	r3, r4
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	b29c      	uxth	r4, r3
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <USB_DeactivateEndpoint+0x208>)
 800416e:	4323      	orrs	r3, r4
 8004170:	b29b      	uxth	r3, r3
 8004172:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	b29c      	uxth	r4, r3
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <USB_DeactivateEndpoint+0x208>)
 8004198:	4323      	orrs	r3, r4
 800419a:	b29b      	uxth	r3, r3
 800419c:	8013      	strh	r3, [r2, #0]
 800419e:	e086      	b.n	80042ae <USB_DeactivateEndpoint+0x312>
 80041a0:	ffff80c0 	.word	0xffff80c0
 80041a4:	ffff8080 	.word	0xffff8080
 80041a8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29c      	uxth	r4, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d014      	beq.n	80041ee <USB_DeactivateEndpoint+0x252>
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	b29c      	uxth	r4, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	4b35      	ldr	r3, [pc, #212]	; (80042bc <USB_DeactivateEndpoint+0x320>)
 80041e8:	4323      	orrs	r3, r4
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29c      	uxth	r4, r3
 80041fc:	4623      	mov	r3, r4
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d014      	beq.n	8004230 <USB_DeactivateEndpoint+0x294>
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	b29c      	uxth	r4, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <USB_DeactivateEndpoint+0x324>)
 800422a:	4323      	orrs	r3, r4
 800422c:	b29b      	uxth	r3, r3
 800422e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	b29c      	uxth	r4, r3
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <USB_DeactivateEndpoint+0x320>)
 8004254:	4323      	orrs	r3, r4
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004270:	b29c      	uxth	r4, r3
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <USB_DeactivateEndpoint+0x328>)
 800427e:	4323      	orrs	r3, r4
 8004280:	b29b      	uxth	r3, r3
 8004282:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	b29c      	uxth	r4, r3
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <USB_DeactivateEndpoint+0x328>)
 80042a8:	4323      	orrs	r3, r4
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc90      	pop	{r4, r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	ffffc080 	.word	0xffffc080
 80042c0:	ffff80c0 	.word	0xffff80c0
 80042c4:	ffff8080 	.word	0xffff8080

080042c8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b08d      	sub	sp, #52	; 0x34
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	f040 8160 	bne.w	800459c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d909      	bls.n	80042fc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	619a      	str	r2, [r3, #24]
 80042fa:	e005      	b.n	8004308 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2200      	movs	r2, #0
 8004306:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	7b1b      	ldrb	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d119      	bne.n	8004344 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6959      	ldr	r1, [r3, #20]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	88da      	ldrh	r2, [r3, #6]
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	b29b      	uxth	r3, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fba2 	bl	8004a66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004322:	687c      	ldr	r4, [r7, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	441c      	add	r4, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4423      	add	r3, r4
 8004336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800433a:	461c      	mov	r4, r3
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	b29b      	uxth	r3, r3
 8004340:	8023      	strh	r3, [r4, #0]
 8004342:	e10f      	b.n	8004564 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d065      	beq.n	8004426 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800435a:	687c      	ldr	r4, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d148      	bne.n	80043f6 <USB_EPStartXfer+0x12e>
 8004364:	687c      	ldr	r4, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	441c      	add	r4, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4423      	add	r3, r4
 8004378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800437c:	461c      	mov	r4, r3
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10e      	bne.n	80043a2 <USB_EPStartXfer+0xda>
 8004384:	8823      	ldrh	r3, [r4, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800438c:	b29b      	uxth	r3, r3
 800438e:	8023      	strh	r3, [r4, #0]
 8004390:	8823      	ldrh	r3, [r4, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439c:	b29b      	uxth	r3, r3
 800439e:	8023      	strh	r3, [r4, #0]
 80043a0:	e03d      	b.n	800441e <USB_EPStartXfer+0x156>
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	2b3e      	cmp	r3, #62	; 0x3e
 80043a6:	d810      	bhi.n	80043ca <USB_EPStartXfer+0x102>
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <USB_EPStartXfer+0xf6>
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	3301      	adds	r3, #1
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	8023      	strh	r3, [r4, #0]
 80043c8:	e029      	b.n	800441e <USB_EPStartXfer+0x156>
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <USB_EPStartXfer+0x118>
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	3b01      	subs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8023      	strh	r3, [r4, #0]
 80043f4:	e013      	b.n	800441e <USB_EPStartXfer+0x156>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10f      	bne.n	800441e <USB_EPStartXfer+0x156>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	441c      	add	r4, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	4423      	add	r3, r4
 8004410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	895b      	ldrh	r3, [r3, #10]
 8004422:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004424:	e063      	b.n	80044ee <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d148      	bne.n	80044c0 <USB_EPStartXfer+0x1f8>
 800442e:	687c      	ldr	r4, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004436:	b29b      	uxth	r3, r3
 8004438:	441c      	add	r4, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4423      	add	r3, r4
 8004442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004446:	461c      	mov	r4, r3
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10e      	bne.n	800446c <USB_EPStartXfer+0x1a4>
 800444e:	8823      	ldrh	r3, [r4, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004456:	b29b      	uxth	r3, r3
 8004458:	8023      	strh	r3, [r4, #0]
 800445a:	8823      	ldrh	r3, [r4, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004466:	b29b      	uxth	r3, r3
 8004468:	8023      	strh	r3, [r4, #0]
 800446a:	e03d      	b.n	80044e8 <USB_EPStartXfer+0x220>
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b3e      	cmp	r3, #62	; 0x3e
 8004470:	d810      	bhi.n	8004494 <USB_EPStartXfer+0x1cc>
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <USB_EPStartXfer+0x1c0>
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	3301      	adds	r3, #1
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	b29b      	uxth	r3, r3
 800448c:	029b      	lsls	r3, r3, #10
 800448e:	b29b      	uxth	r3, r3
 8004490:	8023      	strh	r3, [r4, #0]
 8004492:	e029      	b.n	80044e8 <USB_EPStartXfer+0x220>
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <USB_EPStartXfer+0x1e2>
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	029b      	lsls	r3, r3, #10
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8023      	strh	r3, [r4, #0]
 80044be:	e013      	b.n	80044e8 <USB_EPStartXfer+0x220>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10f      	bne.n	80044e8 <USB_EPStartXfer+0x220>
 80044c8:	687c      	ldr	r4, [r7, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	441c      	add	r4, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4423      	add	r3, r4
 80044dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044e0:	461c      	mov	r4, r3
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	891b      	ldrh	r3, [r3, #8]
 80044ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6959      	ldr	r1, [r3, #20]
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fab4 	bl	8004a66 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	785b      	ldrb	r3, [r3, #1]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d115      	bne.n	8004532 <USB_EPStartXfer+0x26a>
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451c:	b29c      	uxth	r4, r3
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	4b9a      	ldr	r3, [pc, #616]	; (8004794 <USB_EPStartXfer+0x4cc>)
 800452a:	4323      	orrs	r3, r4
 800452c:	b29b      	uxth	r3, r3
 800452e:	8013      	strh	r3, [r2, #0]
 8004530:	e018      	b.n	8004564 <USB_EPStartXfer+0x29c>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d114      	bne.n	8004564 <USB_EPStartXfer+0x29c>
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	b29c      	uxth	r4, r3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	4b8e      	ldr	r3, [pc, #568]	; (8004798 <USB_EPStartXfer+0x4d0>)
 800455e:	4323      	orrs	r3, r4
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	b29c      	uxth	r4, r3
 800457c:	f084 0310 	eor.w	r3, r4, #16
 8004580:	b29c      	uxth	r4, r3
 8004582:	f084 0320 	eor.w	r3, r4, #32
 8004586:	b29c      	uxth	r4, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	4b82      	ldr	r3, [pc, #520]	; (800479c <USB_EPStartXfer+0x4d4>)
 8004594:	4323      	orrs	r3, r4
 8004596:	b29b      	uxth	r3, r3
 8004598:	8013      	strh	r3, [r2, #0]
 800459a:	e146      	b.n	800482a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d909      	bls.n	80045bc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	619a      	str	r2, [r3, #24]
 80045ba:	e005      	b.n	80045c8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2200      	movs	r2, #0
 80045c6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	7b1b      	ldrb	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d148      	bne.n	8004662 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80045d0:	687c      	ldr	r4, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d8:	b29b      	uxth	r3, r3
 80045da:	441c      	add	r4, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	4423      	add	r3, r4
 80045e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045e8:	461c      	mov	r4, r3
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10e      	bne.n	800460e <USB_EPStartXfer+0x346>
 80045f0:	8823      	ldrh	r3, [r4, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8023      	strh	r3, [r4, #0]
 80045fc:	8823      	ldrh	r3, [r4, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004608:	b29b      	uxth	r3, r3
 800460a:	8023      	strh	r3, [r4, #0]
 800460c:	e0f2      	b.n	80047f4 <USB_EPStartXfer+0x52c>
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	2b3e      	cmp	r3, #62	; 0x3e
 8004612:	d810      	bhi.n	8004636 <USB_EPStartXfer+0x36e>
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <USB_EPStartXfer+0x362>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	3301      	adds	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	b29b      	uxth	r3, r3
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	b29b      	uxth	r3, r3
 8004632:	8023      	strh	r3, [r4, #0]
 8004634:	e0de      	b.n	80047f4 <USB_EPStartXfer+0x52c>
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <USB_EPStartXfer+0x384>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3b01      	subs	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	b29b      	uxth	r3, r3
 8004650:	029b      	lsls	r3, r3, #10
 8004652:	b29b      	uxth	r3, r3
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29b      	uxth	r3, r3
 800465e:	8023      	strh	r3, [r4, #0]
 8004660:	e0c8      	b.n	80047f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d148      	bne.n	80046fc <USB_EPStartXfer+0x434>
 800466a:	687c      	ldr	r4, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	441c      	add	r4, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	4423      	add	r3, r4
 800467e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004682:	461c      	mov	r4, r3
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10e      	bne.n	80046a8 <USB_EPStartXfer+0x3e0>
 800468a:	8823      	ldrh	r3, [r4, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004692:	b29b      	uxth	r3, r3
 8004694:	8023      	strh	r3, [r4, #0]
 8004696:	8823      	ldrh	r3, [r4, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8023      	strh	r3, [r4, #0]
 80046a6:	e03d      	b.n	8004724 <USB_EPStartXfer+0x45c>
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2b3e      	cmp	r3, #62	; 0x3e
 80046ac:	d810      	bhi.n	80046d0 <USB_EPStartXfer+0x408>
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <USB_EPStartXfer+0x3fc>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	8023      	strh	r3, [r4, #0]
 80046ce:	e029      	b.n	8004724 <USB_EPStartXfer+0x45c>
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <USB_EPStartXfer+0x41e>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8023      	strh	r3, [r4, #0]
 80046fa:	e013      	b.n	8004724 <USB_EPStartXfer+0x45c>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	785b      	ldrb	r3, [r3, #1]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10f      	bne.n	8004724 <USB_EPStartXfer+0x45c>
 8004704:	687c      	ldr	r4, [r7, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	441c      	add	r4, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	4423      	add	r3, r4
 8004718:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800471c:	461c      	mov	r4, r3
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	b29b      	uxth	r3, r3
 8004722:	8023      	strh	r3, [r4, #0]
 8004724:	687c      	ldr	r4, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d14e      	bne.n	80047cc <USB_EPStartXfer+0x504>
 800472e:	687c      	ldr	r4, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004736:	b29b      	uxth	r3, r3
 8004738:	441c      	add	r4, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	4423      	add	r3, r4
 8004742:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004746:	461c      	mov	r4, r3
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <USB_EPStartXfer+0x4a4>
 800474e:	8823      	ldrh	r3, [r4, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004756:	b29b      	uxth	r3, r3
 8004758:	8023      	strh	r3, [r4, #0]
 800475a:	8823      	ldrh	r3, [r4, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004766:	b29b      	uxth	r3, r3
 8004768:	8023      	strh	r3, [r4, #0]
 800476a:	e043      	b.n	80047f4 <USB_EPStartXfer+0x52c>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2b3e      	cmp	r3, #62	; 0x3e
 8004770:	d816      	bhi.n	80047a0 <USB_EPStartXfer+0x4d8>
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <USB_EPStartXfer+0x4c0>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3301      	adds	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	b29b      	uxth	r3, r3
 800478c:	029b      	lsls	r3, r3, #10
 800478e:	b29b      	uxth	r3, r3
 8004790:	8023      	strh	r3, [r4, #0]
 8004792:	e02f      	b.n	80047f4 <USB_EPStartXfer+0x52c>
 8004794:	ffff80c0 	.word	0xffff80c0
 8004798:	ffffc080 	.word	0xffffc080
 800479c:	ffff8080 	.word	0xffff8080
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <USB_EPStartXfer+0x4ee>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	029b      	lsls	r3, r3, #10
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8023      	strh	r3, [r4, #0]
 80047ca:	e013      	b.n	80047f4 <USB_EPStartXfer+0x52c>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10f      	bne.n	80047f4 <USB_EPStartXfer+0x52c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	441c      	add	r4, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4423      	add	r3, r4
 80047e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	b29c      	uxth	r4, r3
 800480c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004810:	b29c      	uxth	r4, r3
 8004812:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004816:	b29c      	uxth	r4, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	4b04      	ldr	r3, [pc, #16]	; (8004834 <USB_EPStartXfer+0x56c>)
 8004824:	4323      	orrs	r3, r4
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3734      	adds	r7, #52	; 0x34
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}
 8004834:	ffff8080 	.word	0xffff8080

08004838 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004838:	b490      	push	{r4, r7}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004860:	b29c      	uxth	r4, r3
 8004862:	f084 0310 	eor.w	r3, r4, #16
 8004866:	b29c      	uxth	r4, r3
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <USB_EPSetStall+0x80>)
 8004874:	4323      	orrs	r3, r4
 8004876:	b29b      	uxth	r3, r3
 8004878:	8013      	strh	r3, [r2, #0]
 800487a:	e017      	b.n	80048ac <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	b29c      	uxth	r4, r3
 8004894:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004898:	b29c      	uxth	r4, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <USB_EPSetStall+0x80>)
 80048a6:	4323      	orrs	r3, r4
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc90      	pop	{r4, r7}
 80048b6:	4770      	bx	lr
 80048b8:	ffff8080 	.word	0xffff8080

080048bc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048bc:	b490      	push	{r4, r7}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	7b1b      	ldrb	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d17d      	bne.n	80049ca <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03d      	beq.n	8004952 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29c      	uxth	r4, r3
 80048e4:	4623      	mov	r3, r4
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d014      	beq.n	8004918 <USB_EPClearStall+0x5c>
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004904:	b29c      	uxth	r4, r3
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <USB_EPClearStall+0x11c>)
 8004912:	4323      	orrs	r3, r4
 8004914:	b29b      	uxth	r3, r3
 8004916:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d054      	beq.n	80049ca <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004936:	b29c      	uxth	r4, r3
 8004938:	f084 0320 	eor.w	r3, r4, #32
 800493c:	b29c      	uxth	r4, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <USB_EPClearStall+0x120>)
 800494a:	4323      	orrs	r3, r4
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
 8004950:	e03b      	b.n	80049ca <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29c      	uxth	r4, r3
 8004960:	4623      	mov	r3, r4
 8004962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d014      	beq.n	8004994 <USB_EPClearStall+0xd8>
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004980:	b29c      	uxth	r4, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <USB_EPClearStall+0x124>)
 800498e:	4323      	orrs	r3, r4
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	b29c      	uxth	r4, r3
 80049ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80049b0:	b29c      	uxth	r4, r3
 80049b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80049b6:	b29c      	uxth	r4, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <USB_EPClearStall+0x120>)
 80049c4:	4323      	orrs	r3, r4
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc90      	pop	{r4, r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	ffff80c0 	.word	0xffff80c0
 80049dc:	ffff8080 	.word	0xffff8080
 80049e0:	ffffc080 	.word	0xffffc080

080049e4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b08d      	sub	sp, #52	; 0x34
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	4611      	mov	r1, r2
 8004a72:	461a      	mov	r2, r3
 8004a74:	460b      	mov	r3, r1
 8004a76:	80fb      	strh	r3, [r7, #6]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a7c:	88bb      	ldrh	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	005a      	lsls	r2, r3, #1
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	e01e      	b.n	8004ade <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	3302      	adds	r3, #2
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	3302      	adds	r3, #2
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	3b01      	subs	r3, #1
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1dd      	bne.n	8004aa0 <USB_WritePMA+0x3a>
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3734      	adds	r7, #52	; 0x34
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b08b      	sub	sp, #44	; 0x2c
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	4611      	mov	r1, r2
 8004afa:	461a      	mov	r2, r3
 8004afc:	460b      	mov	r3, r1
 8004afe:	80fb      	strh	r3, [r7, #6]
 8004b00:	4613      	mov	r3, r2
 8004b02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004b04:	88bb      	ldrh	r3, [r7, #4]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	005a      	lsls	r2, r3, #1
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b20:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	e01b      	b.n	8004b60 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	3302      	adds	r3, #2
 8004b34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	3302      	adds	r3, #2
 8004b58:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e0      	bne.n	8004b28 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004b66:	88bb      	ldrh	r3, [r7, #4]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	701a      	strb	r2, [r3, #0]
  }
}
 8004b82:	bf00      	nop
 8004b84:	372c      	adds	r7, #44	; 0x2c
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7c1b      	ldrb	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d115      	bne.n	8004bd0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba8:	2202      	movs	r2, #2
 8004baa:	2181      	movs	r1, #129	; 0x81
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f001 fe6c 	bl	800688a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 fe62 	bl	800688a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004bce:	e012      	b.n	8004bf6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004bd0:	2340      	movs	r3, #64	; 0x40
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	2181      	movs	r1, #129	; 0x81
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f001 fe57 	bl	800688a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004be2:	2340      	movs	r3, #64	; 0x40
 8004be4:	2202      	movs	r2, #2
 8004be6:	2101      	movs	r1, #1
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 fe4e 	bl	800688a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	2182      	movs	r1, #130	; 0x82
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 fe44 	bl	800688a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c0c:	f001 ff5e 	bl	8006acc <USBD_static_malloc>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	e026      	b.n	8004c76 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7c1b      	ldrb	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 fefd 	bl	8006a5e <USBD_LL_PrepareReceive>
 8004c64:	e007      	b.n	8004c76 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	2101      	movs	r1, #1
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 fef4 	bl	8006a5e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004c90:	2181      	movs	r1, #129	; 0x81
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 fe1f 	bl	80068d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fe18 	bl	80068d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004cae:	2182      	movs	r1, #130	; 0x82
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f001 fe10 	bl	80068d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 ff04 	bl	8006ae4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cfe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d039      	beq.n	8004d8c <USBD_CDC_Setup+0x9e>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d17c      	bne.n	8004e16 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	88db      	ldrh	r3, [r3, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d029      	beq.n	8004d78 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	da11      	bge.n	8004d52 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004d3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	88d2      	ldrh	r2, [r2, #6]
 8004d40:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004d42:	6939      	ldr	r1, [r7, #16]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	88db      	ldrh	r3, [r3, #6]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 f9f6 	bl	800613c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004d50:	e068      	b.n	8004e24 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	785a      	ldrb	r2, [r3, #1]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	88db      	ldrh	r3, [r3, #6]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004d68:	6939      	ldr	r1, [r7, #16]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	88db      	ldrh	r3, [r3, #6]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fa11 	bl	8006198 <USBD_CtlPrepareRx>
      break;
 8004d76:	e055      	b.n	8004e24 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	7850      	ldrb	r0, [r2, #1]
 8004d84:	2200      	movs	r2, #0
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	4798      	blx	r3
      break;
 8004d8a:	e04b      	b.n	8004e24 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b0a      	cmp	r3, #10
 8004d92:	d017      	beq.n	8004dc4 <USBD_CDC_Setup+0xd6>
 8004d94:	2b0b      	cmp	r3, #11
 8004d96:	d029      	beq.n	8004dec <USBD_CDC_Setup+0xfe>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d133      	bne.n	8004e04 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d107      	bne.n	8004db6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004da6:	f107 030c 	add.w	r3, r7, #12
 8004daa:	2202      	movs	r2, #2
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 f9c4 	bl	800613c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004db4:	e02e      	b.n	8004e14 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 f955 	bl	8006068 <USBD_CtlError>
            ret = USBD_FAIL;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc2:	e027      	b.n	8004e14 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004dce:	f107 030f 	add.w	r3, r7, #15
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f001 f9b0 	bl	800613c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ddc:	e01a      	b.n	8004e14 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 f941 	bl	8006068 <USBD_CtlError>
            ret = USBD_FAIL;
 8004de6:	2302      	movs	r3, #2
 8004de8:	75fb      	strb	r3, [r7, #23]
          break;
 8004dea:	e013      	b.n	8004e14 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d00d      	beq.n	8004e12 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 f935 	bl	8006068 <USBD_CtlError>
            ret = USBD_FAIL;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e02:	e006      	b.n	8004e12 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 f92e 	bl	8006068 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8004e10:	e000      	b.n	8004e14 <USBD_CDC_Setup+0x126>
          break;
 8004e12:	bf00      	nop
      }
      break;
 8004e14:	e006      	b.n	8004e24 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 f925 	bl	8006068 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	75fb      	strb	r3, [r7, #23]
      break;
 8004e22:	bf00      	nop
  }

  return ret;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e40:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e48:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d037      	beq.n	8004ec4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	331c      	adds	r3, #28
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d026      	beq.n	8004eb8 <USBD_CDC_DataIn+0x8a>
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	331c      	adds	r3, #28
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	0152      	lsls	r2, r2, #5
 8004e82:	440a      	add	r2, r1
 8004e84:	3238      	adds	r2, #56	; 0x38
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e8c:	fb02 f201 	mul.w	r2, r2, r1
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d110      	bne.n	8004eb8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	331c      	adds	r3, #28
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004eaa:	78f9      	ldrb	r1, [r7, #3]
 8004eac:	2300      	movs	r3, #0
 8004eae:	2200      	movs	r2, #0
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 fdb1 	bl	8006a18 <USBD_LL_Transmit>
 8004eb6:	e003      	b.n	8004ec0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e000      	b.n	8004ec6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 fddc 	bl	8006aa4 <USBD_LL_GetRxDataSize>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004f12:	4611      	mov	r1, r2
 8004f14:	4798      	blx	r3

    return USBD_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e000      	b.n	8004f1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <USBD_CDC_EP0_RxReady+0x46>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004f44:	2bff      	cmp	r3, #255	; 0xff
 8004f46:	d010      	beq.n	8004f6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004f56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2243      	movs	r2, #67	; 0x43
 8004f80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004f82:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	200000d0 	.word	0x200000d0

08004f94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2243      	movs	r2, #67	; 0x43
 8004fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	2000008c 	.word	0x2000008c

08004fb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2243      	movs	r2, #67	; 0x43
 8004fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000114 	.word	0x20000114

08004fd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	220a      	movs	r2, #10
 8004fe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000048 	.word	0x20000048

08004ff4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004ffe:	2302      	movs	r3, #2
 8005000:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005034:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005062:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005086:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01c      	beq.n	80050cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005098:	2b00      	cmp	r3, #0
 800509a:	d115      	bne.n	80050c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2181      	movs	r1, #129	; 0x81
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 fcaa 	bl	8006a18 <USBD_LL_Transmit>

      return USBD_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e002      	b.n	80050ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7c1b      	ldrb	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005102:	2101      	movs	r1, #1
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 fcaa 	bl	8006a5e <USBD_LL_PrepareReceive>
 800510a:	e007      	b.n	800511c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005112:	2340      	movs	r3, #64	; 0x40
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fca1 	bl	8006a5e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4613      	mov	r3, r2
 8005136:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800513e:	2302      	movs	r3, #2
 8005140:	e01a      	b.n	8005178 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f001 fb15 	bl	80067a0 <USBD_LL_Init>

  return USBD_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e001      	b.n	80051a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80051a2:	2302      	movs	r3, #2
 80051a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 fb4a 	bl	8006854 <USBD_LL_Start>

  return USBD_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80051ea:	2302      	movs	r3, #2
 80051ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00c      	beq.n	8005212 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	4611      	mov	r1, r2
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	4611      	mov	r1, r2
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3

  return USBD_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fecb 	bl	8005ff0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005268:	461a      	mov	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b01      	cmp	r3, #1
 800527c:	d00c      	beq.n	8005298 <USBD_LL_SetupStage+0x56>
 800527e:	2b01      	cmp	r3, #1
 8005280:	d302      	bcc.n	8005288 <USBD_LL_SetupStage+0x46>
 8005282:	2b02      	cmp	r3, #2
 8005284:	d010      	beq.n	80052a8 <USBD_LL_SetupStage+0x66>
 8005286:	e017      	b.n	80052b8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f9cb 	bl	800562c <USBD_StdDevReq>
      break;
 8005296:	e01a      	b.n	80052ce <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa2d 	bl	8005700 <USBD_StdItfReq>
      break;
 80052a6:	e012      	b.n	80052ce <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fa6b 	bl	800578c <USBD_StdEPReq>
      break;
 80052b6:	e00a      	b.n	80052ce <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 fb24 	bl	8006914 <USBD_LL_StallEP>
      break;
 80052cc:	bf00      	nop
  }

  return USBD_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	460b      	mov	r3, r1
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d14b      	bne.n	8005384 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d134      	bne.n	8005368 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	429a      	cmp	r2, r3
 8005308:	d919      	bls.n	800533e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005320:	429a      	cmp	r2, r3
 8005322:	d203      	bcs.n	800532c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005328:	b29b      	uxth	r3, r3
 800532a:	e002      	b.n	8005332 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 ff4c 	bl	80061d4 <USBD_CtlContinueRx>
 800533c:	e038      	b.n	80053b0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005350:	2b03      	cmp	r3, #3
 8005352:	d105      	bne.n	8005360 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 ff49 	bl	80061f8 <USBD_CtlSendStatus>
 8005366:	e023      	b.n	80053b0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800536e:	2b05      	cmp	r3, #5
 8005370:	d11e      	bne.n	80053b0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800537a:	2100      	movs	r1, #0
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f001 fac9 	bl	8006914 <USBD_LL_StallEP>
 8005382:	e015      	b.n	80053b0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00d      	beq.n	80053ac <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005396:	2b03      	cmp	r3, #3
 8005398:	d108      	bne.n	80053ac <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	7afa      	ldrb	r2, [r7, #11]
 80053a4:	4611      	mov	r1, r2
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	4798      	blx	r3
 80053aa:	e001      	b.n	80053b0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80053ac:	2302      	movs	r3, #2
 80053ae:	e000      	b.n	80053b2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	460b      	mov	r3, r1
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d17f      	bne.n	80054ce <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3314      	adds	r3, #20
 80053d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d15c      	bne.n	8005498 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d915      	bls.n	8005416 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 feb6 	bl	8006174 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005408:	2300      	movs	r3, #0
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f001 fb25 	bl	8006a5e <USBD_LL_PrepareReceive>
 8005414:	e04e      	b.n	80054b4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	6912      	ldr	r2, [r2, #16]
 800541e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005422:	fb02 f201 	mul.w	r2, r2, r1
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d11c      	bne.n	8005466 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005434:	429a      	cmp	r2, r3
 8005436:	d316      	bcc.n	8005466 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005442:	429a      	cmp	r2, r3
 8005444:	d20f      	bcs.n	8005466 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fe92 	bl	8006174 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005458:	2300      	movs	r3, #0
 800545a:	2200      	movs	r2, #0
 800545c:	2100      	movs	r1, #0
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f001 fafd 	bl	8006a5e <USBD_LL_PrepareReceive>
 8005464:	e026      	b.n	80054b4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005478:	2b03      	cmp	r3, #3
 800547a:	d105      	bne.n	8005488 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005488:	2180      	movs	r1, #128	; 0x80
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 fa42 	bl	8006914 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fec4 	bl	800621e <USBD_CtlReceiveStatus>
 8005496:	e00d      	b.n	80054b4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d004      	beq.n	80054ac <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f001 fa30 	bl	8006914 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d11d      	bne.n	80054fa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff fe83 	bl	80051ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80054cc:	e015      	b.n	80054fa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d108      	bne.n	80054f6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	7afa      	ldrb	r2, [r7, #11]
 80054ee:	4611      	mov	r1, r2
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	4798      	blx	r3
 80054f4:	e001      	b.n	80054fa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054f6:	2302      	movs	r3, #2
 80054f8:	e000      	b.n	80054fc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	2200      	movs	r2, #0
 8005510:	2100      	movs	r1, #0
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 f9b9 	bl	800688a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2240      	movs	r2, #64	; 0x40
 8005524:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	2200      	movs	r2, #0
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 f9ab 	bl	800688a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6852      	ldr	r2, [r2, #4]
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	4611      	mov	r1, r2
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
  }

  return USBD_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2204      	movs	r2, #4
 80055bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d105      	bne.n	80055ea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005604:	2b03      	cmp	r3, #3
 8005606:	d10b      	bne.n	8005620 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005642:	2b20      	cmp	r3, #32
 8005644:	d004      	beq.n	8005650 <USBD_StdDevReq+0x24>
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d002      	beq.n	8005650 <USBD_StdDevReq+0x24>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <USBD_StdDevReq+0x34>
 800564e:	e04c      	b.n	80056ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
      break;
 800565e:	e049      	b.n	80056f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b09      	cmp	r3, #9
 8005666:	d83a      	bhi.n	80056de <USBD_StdDevReq+0xb2>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <USBD_StdDevReq+0x44>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056d5 	.word	0x080056d5
 8005678:	080056df 	.word	0x080056df
 800567c:	080056cb 	.word	0x080056cb
 8005680:	080056df 	.word	0x080056df
 8005684:	080056a3 	.word	0x080056a3
 8005688:	08005699 	.word	0x08005699
 800568c:	080056df 	.word	0x080056df
 8005690:	080056b7 	.word	0x080056b7
 8005694:	080056ad 	.word	0x080056ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9d4 	bl	8005a48 <USBD_GetDescriptor>
          break;
 80056a0:	e022      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb37 	bl	8005d18 <USBD_SetAddress>
          break;
 80056aa:	e01d      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fb74 	bl	8005d9c <USBD_SetConfig>
          break;
 80056b4:	e018      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fbfd 	bl	8005eb8 <USBD_GetConfig>
          break;
 80056be:	e013      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fc2c 	bl	8005f20 <USBD_GetStatus>
          break;
 80056c8:	e00e      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fc5a 	bl	8005f86 <USBD_SetFeature>
          break;
 80056d2:	e009      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fc69 	bl	8005fae <USBD_ClrFeature>
          break;
 80056dc:	e004      	b.n	80056e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fcc1 	bl	8006068 <USBD_CtlError>
          break;
 80056e6:	bf00      	nop
      }
      break;
 80056e8:	e004      	b.n	80056f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fcbb 	bl	8006068 <USBD_CtlError>
      break;
 80056f2:	bf00      	nop
  }

  return ret;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop

08005700 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005716:	2b20      	cmp	r3, #32
 8005718:	d003      	beq.n	8005722 <USBD_StdItfReq+0x22>
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d001      	beq.n	8005722 <USBD_StdItfReq+0x22>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d12a      	bne.n	8005778 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005728:	3b01      	subs	r3, #1
 800572a:	2b02      	cmp	r3, #2
 800572c:	d81d      	bhi.n	800576a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	889b      	ldrh	r3, [r3, #4]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d813      	bhi.n	8005760 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	88db      	ldrh	r3, [r3, #6]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d110      	bne.n	8005774 <USBD_StdItfReq+0x74>
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10d      	bne.n	8005774 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fd4d 	bl	80061f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800575e:	e009      	b.n	8005774 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fc80 	bl	8006068 <USBD_CtlError>
          break;
 8005768:	e004      	b.n	8005774 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fc7b 	bl	8006068 <USBD_CtlError>
          break;
 8005772:	e000      	b.n	8005776 <USBD_StdItfReq+0x76>
          break;
 8005774:	bf00      	nop
      }
      break;
 8005776:	e004      	b.n	8005782 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fc74 	bl	8006068 <USBD_CtlError>
      break;
 8005780:	bf00      	nop
  }

  return USBD_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	889b      	ldrh	r3, [r3, #4]
 800579e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d004      	beq.n	80057b6 <USBD_StdEPReq+0x2a>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d002      	beq.n	80057b6 <USBD_StdEPReq+0x2a>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <USBD_StdEPReq+0x3a>
 80057b4:	e13d      	b.n	8005a32 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	4798      	blx	r3
      break;
 80057c4:	e13a      	b.n	8005a3c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d10a      	bne.n	80057e8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	e12a      	b.n	8005a3e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d03e      	beq.n	800586e <USBD_StdEPReq+0xe2>
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d002      	beq.n	80057fa <USBD_StdEPReq+0x6e>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d070      	beq.n	80058da <USBD_StdEPReq+0x14e>
 80057f8:	e115      	b.n	8005a26 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005800:	2b02      	cmp	r3, #2
 8005802:	d002      	beq.n	800580a <USBD_StdEPReq+0x7e>
 8005804:	2b03      	cmp	r3, #3
 8005806:	d015      	beq.n	8005834 <USBD_StdEPReq+0xa8>
 8005808:	e02b      	b.n	8005862 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800580a:	7bbb      	ldrb	r3, [r7, #14]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00c      	beq.n	800582a <USBD_StdEPReq+0x9e>
 8005810:	7bbb      	ldrb	r3, [r7, #14]
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d009      	beq.n	800582a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 f87a 	bl	8006914 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 f876 	bl	8006914 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005828:	e020      	b.n	800586c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fc1b 	bl	8006068 <USBD_CtlError>
              break;
 8005832:	e01b      	b.n	800586c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	885b      	ldrh	r3, [r3, #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10e      	bne.n	800585a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <USBD_StdEPReq+0xce>
 8005842:	7bbb      	ldrb	r3, [r7, #14]
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d008      	beq.n	800585a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 f85d 	bl	8006914 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fccc 	bl	80061f8 <USBD_CtlSendStatus>

              break;
 8005860:	e004      	b.n	800586c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fbff 	bl	8006068 <USBD_CtlError>
              break;
 800586a:	bf00      	nop
          }
          break;
 800586c:	e0e0      	b.n	8005a30 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005874:	2b02      	cmp	r3, #2
 8005876:	d002      	beq.n	800587e <USBD_StdEPReq+0xf2>
 8005878:	2b03      	cmp	r3, #3
 800587a:	d015      	beq.n	80058a8 <USBD_StdEPReq+0x11c>
 800587c:	e026      	b.n	80058cc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <USBD_StdEPReq+0x112>
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d009      	beq.n	800589e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800588a:	7bbb      	ldrb	r3, [r7, #14]
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 f840 	bl	8006914 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 f83c 	bl	8006914 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800589c:	e01c      	b.n	80058d8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fbe1 	bl	8006068 <USBD_CtlError>
              break;
 80058a6:	e017      	b.n	80058d8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	885b      	ldrh	r3, [r3, #2]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d112      	bne.n	80058d6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 f847 	bl	8006952 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fc97 	bl	80061f8 <USBD_CtlSendStatus>
              }
              break;
 80058ca:	e004      	b.n	80058d6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fbca 	bl	8006068 <USBD_CtlError>
              break;
 80058d4:	e000      	b.n	80058d8 <USBD_StdEPReq+0x14c>
              break;
 80058d6:	bf00      	nop
          }
          break;
 80058d8:	e0aa      	b.n	8005a30 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d002      	beq.n	80058ea <USBD_StdEPReq+0x15e>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d032      	beq.n	800594e <USBD_StdEPReq+0x1c2>
 80058e8:	e097      	b.n	8005a1a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <USBD_StdEPReq+0x174>
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d004      	beq.n	8005900 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fbb5 	bl	8006068 <USBD_CtlError>
                break;
 80058fe:	e091      	b.n	8005a24 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	da0b      	bge.n	8005920 <USBD_StdEPReq+0x194>
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	3310      	adds	r3, #16
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	e00b      	b.n	8005938 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	3304      	adds	r3, #4
 8005938:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2202      	movs	r2, #2
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fbf8 	bl	800613c <USBD_CtlSendData>
              break;
 800594c:	e06a      	b.n	8005a24 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800594e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005952:	2b00      	cmp	r3, #0
 8005954:	da11      	bge.n	800597a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3318      	adds	r3, #24
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d117      	bne.n	80059a0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fb78 	bl	8006068 <USBD_CtlError>
                  break;
 8005978:	e054      	b.n	8005a24 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb65 	bl	8006068 <USBD_CtlError>
                  break;
 800599e:	e041      	b.n	8005a24 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	da0b      	bge.n	80059c0 <USBD_StdEPReq+0x234>
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	3310      	adds	r3, #16
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	e00b      	b.n	80059d8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4413      	add	r3, r2
 80059d6:	3304      	adds	r3, #4
 80059d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <USBD_StdEPReq+0x25a>
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d103      	bne.n	80059ee <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e00e      	b.n	8005a0c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 ffcc 	bl	8006990 <USBD_LL_IsStallEP>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fb92 	bl	800613c <USBD_CtlSendData>
              break;
 8005a18:	e004      	b.n	8005a24 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb23 	bl	8006068 <USBD_CtlError>
              break;
 8005a22:	bf00      	nop
          }
          break;
 8005a24:	e004      	b.n	8005a30 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb1d 	bl	8006068 <USBD_CtlError>
          break;
 8005a2e:	bf00      	nop
      }
      break;
 8005a30:	e004      	b.n	8005a3c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb17 	bl	8006068 <USBD_CtlError>
      break;
 8005a3a:	bf00      	nop
  }

  return ret;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	885b      	ldrh	r3, [r3, #2]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	f200 8128 	bhi.w	8005cbe <USBD_GetDescriptor+0x276>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <USBD_GetDescriptor+0x2c>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a91 	.word	0x08005a91
 8005a78:	08005aa9 	.word	0x08005aa9
 8005a7c:	08005ae9 	.word	0x08005ae9
 8005a80:	08005cbf 	.word	0x08005cbf
 8005a84:	08005cbf 	.word	0x08005cbf
 8005a88:	08005c5f 	.word	0x08005c5f
 8005a8c:	08005c8b 	.word	0x08005c8b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	7c12      	ldrb	r2, [r2, #16]
 8005a9c:	f107 0108 	add.w	r1, r7, #8
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4798      	blx	r3
 8005aa4:	60f8      	str	r0, [r7, #12]
      break;
 8005aa6:	e112      	b.n	8005cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7c1b      	ldrb	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10d      	bne.n	8005acc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f107 0208 	add.w	r2, r7, #8
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
 8005ac0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005aca:	e100      	b.n	8005cce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f107 0208 	add.w	r2, r7, #8
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	701a      	strb	r2, [r3, #0]
      break;
 8005ae6:	e0f2      	b.n	8005cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	885b      	ldrh	r3, [r3, #2]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	f200 80ac 	bhi.w	8005c4c <USBD_GetDescriptor+0x204>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <USBD_GetDescriptor+0xb4>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b15 	.word	0x08005b15
 8005b00:	08005b49 	.word	0x08005b49
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005bb1 	.word	0x08005bb1
 8005b0c:	08005be5 	.word	0x08005be5
 8005b10:	08005c19 	.word	0x08005c19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	7c12      	ldrb	r2, [r2, #16]
 8005b2c:	f107 0108 	add.w	r1, r7, #8
 8005b30:	4610      	mov	r0, r2
 8005b32:	4798      	blx	r3
 8005b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b36:	e091      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa94 	bl	8006068 <USBD_CtlError>
            err++;
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	3301      	adds	r3, #1
 8005b44:	72fb      	strb	r3, [r7, #11]
          break;
 8005b46:	e089      	b.n	8005c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	7c12      	ldrb	r2, [r2, #16]
 8005b60:	f107 0108 	add.w	r1, r7, #8
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b6a:	e077      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa7a 	bl	8006068 <USBD_CtlError>
            err++;
 8005b74:	7afb      	ldrb	r3, [r7, #11]
 8005b76:	3301      	adds	r3, #1
 8005b78:	72fb      	strb	r3, [r7, #11]
          break;
 8005b7a:	e06f      	b.n	8005c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	7c12      	ldrb	r2, [r2, #16]
 8005b94:	f107 0108 	add.w	r1, r7, #8
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
 8005b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b9e:	e05d      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa60 	bl	8006068 <USBD_CtlError>
            err++;
 8005ba8:	7afb      	ldrb	r3, [r7, #11]
 8005baa:	3301      	adds	r3, #1
 8005bac:	72fb      	strb	r3, [r7, #11]
          break;
 8005bae:	e055      	b.n	8005c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	7c12      	ldrb	r2, [r2, #16]
 8005bc8:	f107 0108 	add.w	r1, r7, #8
 8005bcc:	4610      	mov	r0, r2
 8005bce:	4798      	blx	r3
 8005bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bd2:	e043      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa46 	bl	8006068 <USBD_CtlError>
            err++;
 8005bdc:	7afb      	ldrb	r3, [r7, #11]
 8005bde:	3301      	adds	r3, #1
 8005be0:	72fb      	strb	r3, [r7, #11]
          break;
 8005be2:	e03b      	b.n	8005c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	7c12      	ldrb	r2, [r2, #16]
 8005bfc:	f107 0108 	add.w	r1, r7, #8
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
 8005c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c06:	e029      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa2c 	bl	8006068 <USBD_CtlError>
            err++;
 8005c10:	7afb      	ldrb	r3, [r7, #11]
 8005c12:	3301      	adds	r3, #1
 8005c14:	72fb      	strb	r3, [r7, #11]
          break;
 8005c16:	e021      	b.n	8005c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	7c12      	ldrb	r2, [r2, #16]
 8005c30:	f107 0108 	add.w	r1, r7, #8
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
 8005c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c3a:	e00f      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa12 	bl	8006068 <USBD_CtlError>
            err++;
 8005c44:	7afb      	ldrb	r3, [r7, #11]
 8005c46:	3301      	adds	r3, #1
 8005c48:	72fb      	strb	r3, [r7, #11]
          break;
 8005c4a:	e007      	b.n	8005c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa0a 	bl	8006068 <USBD_CtlError>
          err++;
 8005c54:	7afb      	ldrb	r3, [r7, #11]
 8005c56:	3301      	adds	r3, #1
 8005c58:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005c5a:	e038      	b.n	8005cce <USBD_GetDescriptor+0x286>
 8005c5c:	e037      	b.n	8005cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7c1b      	ldrb	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6e:	f107 0208 	add.w	r2, r7, #8
 8005c72:	4610      	mov	r0, r2
 8005c74:	4798      	blx	r3
 8005c76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c78:	e029      	b.n	8005cce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9f3 	bl	8006068 <USBD_CtlError>
        err++;
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	3301      	adds	r3, #1
 8005c86:	72fb      	strb	r3, [r7, #11]
      break;
 8005c88:	e021      	b.n	8005cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7c1b      	ldrb	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	f107 0208 	add.w	r2, r7, #8
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4798      	blx	r3
 8005ca2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	2207      	movs	r2, #7
 8005caa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cac:	e00f      	b.n	8005cce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f9d9 	bl	8006068 <USBD_CtlError>
        err++;
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	72fb      	strb	r3, [r7, #11]
      break;
 8005cbc:	e007      	b.n	8005cce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f9d1 	bl	8006068 <USBD_CtlError>
      err++;
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	72fb      	strb	r3, [r7, #11]
      break;
 8005ccc:	bf00      	nop
  }

  if (err != 0U)
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d11c      	bne.n	8005d0e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005cd4:	893b      	ldrh	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d011      	beq.n	8005cfe <USBD_GetDescriptor+0x2b6>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	88db      	ldrh	r3, [r3, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	88da      	ldrh	r2, [r3, #6]
 8005ce6:	893b      	ldrh	r3, [r7, #8]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	bf28      	it	cs
 8005cec:	4613      	movcs	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cf2:	893b      	ldrh	r3, [r7, #8]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68f9      	ldr	r1, [r7, #12]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa1f 	bl	800613c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	88db      	ldrh	r3, [r3, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa76 	bl	80061f8 <USBD_CtlSendStatus>
 8005d0c:	e000      	b.n	8005d10 <USBD_GetDescriptor+0x2c8>
    return;
 8005d0e:	bf00      	nop
    }
  }
}
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop

08005d18 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	889b      	ldrh	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d130      	bne.n	8005d8c <USBD_SetAddress+0x74>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d12c      	bne.n	8005d8c <USBD_SetAddress+0x74>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	885b      	ldrh	r3, [r3, #2]
 8005d36:	2b7f      	cmp	r3, #127	; 0x7f
 8005d38:	d828      	bhi.n	8005d8c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	885b      	ldrh	r3, [r3, #2]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d104      	bne.n	8005d5a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f988 	bl	8006068 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d58:	e01c      	b.n	8005d94 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7bfa      	ldrb	r2, [r7, #15]
 8005d5e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fe37 	bl	80069da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa43 	bl	80061f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d80:	e008      	b.n	8005d94 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8a:	e003      	b.n	8005d94 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f96a 	bl	8006068 <USBD_CtlError>
  }
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	885b      	ldrh	r3, [r3, #2]
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005dae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005db0:	4b40      	ldr	r3, [pc, #256]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d904      	bls.n	8005dc2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f954 	bl	8006068 <USBD_CtlError>
 8005dc0:	e075      	b.n	8005eae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d002      	beq.n	8005dd2 <USBD_SetConfig+0x36>
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d023      	beq.n	8005e18 <USBD_SetConfig+0x7c>
 8005dd0:	e062      	b.n	8005e98 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005dd2:	4b38      	ldr	r3, [pc, #224]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01a      	beq.n	8005e10 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005dda:	4b36      	ldr	r3, [pc, #216]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2203      	movs	r2, #3
 8005de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005dec:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff f9f3 	bl	80051de <USBD_SetClassConfig>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d104      	bne.n	8005e08 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f931 	bl	8006068 <USBD_CtlError>
            return;
 8005e06:	e052      	b.n	8005eae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9f5 	bl	80061f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005e0e:	e04e      	b.n	8005eae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f9f1 	bl	80061f8 <USBD_CtlSendStatus>
        break;
 8005e16:	e04a      	b.n	8005eae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005e18:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d112      	bne.n	8005e46 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005e28:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005e32:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff f9ef 	bl	800521c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9da 	bl	80061f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005e44:	e033      	b.n	8005eae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005e46:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d01d      	beq.n	8005e90 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff f9dd 	bl	800521c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff f9b3 	bl	80051de <USBD_SetClassConfig>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d104      	bne.n	8005e88 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8f1 	bl	8006068 <USBD_CtlError>
            return;
 8005e86:	e012      	b.n	8005eae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f9b5 	bl	80061f8 <USBD_CtlSendStatus>
        break;
 8005e8e:	e00e      	b.n	8005eae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f9b1 	bl	80061f8 <USBD_CtlSendStatus>
        break;
 8005e96:	e00a      	b.n	8005eae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8e4 	bl	8006068 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <USBD_SetConfig+0x118>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff f9b8 	bl	800521c <USBD_ClrClassConfig>
        break;
 8005eac:	bf00      	nop
    }
  }
}
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000848 	.word	0x20000848

08005eb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	88db      	ldrh	r3, [r3, #6]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d004      	beq.n	8005ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f8cb 	bl	8006068 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ed2:	e021      	b.n	8005f18 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	db17      	blt.n	8005f0e <USBD_GetConfig+0x56>
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	dd02      	ble.n	8005ee8 <USBD_GetConfig+0x30>
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d00b      	beq.n	8005efe <USBD_GetConfig+0x46>
 8005ee6:	e012      	b.n	8005f0e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f920 	bl	800613c <USBD_CtlSendData>
        break;
 8005efc:	e00c      	b.n	8005f18 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	2201      	movs	r2, #1
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f918 	bl	800613c <USBD_CtlSendData>
        break;
 8005f0c:	e004      	b.n	8005f18 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8a9 	bl	8006068 <USBD_CtlError>
        break;
 8005f16:	bf00      	nop
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	3b01      	subs	r3, #1
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d81e      	bhi.n	8005f74 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d004      	beq.n	8005f48 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f891 	bl	8006068 <USBD_CtlError>
        break;
 8005f46:	e01a      	b.n	8005f7e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f043 0202 	orr.w	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	330c      	adds	r3, #12
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8e5 	bl	800613c <USBD_CtlSendData>
      break;
 8005f72:	e004      	b.n	8005f7e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f876 	bl	8006068 <USBD_CtlError>
      break;
 8005f7c:	bf00      	nop
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	885b      	ldrh	r3, [r3, #2]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f929 	bl	80061f8 <USBD_CtlSendStatus>
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d80b      	bhi.n	8005fdc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	885b      	ldrh	r3, [r3, #2]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10c      	bne.n	8005fe6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f90f 	bl	80061f8 <USBD_CtlSendStatus>
      }
      break;
 8005fda:	e004      	b.n	8005fe6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f842 	bl	8006068 <USBD_CtlError>
      break;
 8005fe4:	e000      	b.n	8005fe8 <USBD_ClrFeature+0x3a>
      break;
 8005fe6:	bf00      	nop
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	785a      	ldrb	r2, [r3, #1]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	3302      	adds	r3, #2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b29a      	uxth	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3303      	adds	r3, #3
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	b29b      	uxth	r3, r3
 800601e:	4413      	add	r3, r2
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b29a      	uxth	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	3305      	adds	r3, #5
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	b29b      	uxth	r3, r3
 800603a:	4413      	add	r3, r2
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	3306      	adds	r3, #6
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b29a      	uxth	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	3307      	adds	r3, #7
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	b29b      	uxth	r3, r3
 8006056:	4413      	add	r3, r2
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	80da      	strh	r2, [r3, #6]

}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr

08006068 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fc4d 	bl	8006914 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800607a:	2100      	movs	r1, #0
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fc49 	bl	8006914 <USBD_LL_StallEP>
}
 8006082:	bf00      	nop
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d032      	beq.n	8006106 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f834 	bl	800610e <USBD_GetLen>
 80060a6:	4603      	mov	r3, r0
 80060a8:	3301      	adds	r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	75fa      	strb	r2, [r7, #23]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4413      	add	r3, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	75fa      	strb	r2, [r7, #23]
 80060cc:	461a      	mov	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4413      	add	r3, r2
 80060d2:	2203      	movs	r2, #3
 80060d4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80060d6:	e012      	b.n	80060fe <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	60fa      	str	r2, [r7, #12]
 80060de:	7dfa      	ldrb	r2, [r7, #23]
 80060e0:	1c51      	adds	r1, r2, #1
 80060e2:	75f9      	strb	r1, [r7, #23]
 80060e4:	4611      	mov	r1, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	440a      	add	r2, r1
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	75fa      	strb	r2, [r7, #23]
 80060f4:	461a      	mov	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4413      	add	r3, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e8      	bne.n	80060d8 <USBD_GetString+0x4e>
    }
  }
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800611a:	e005      	b.n	8006128 <USBD_GetLen+0x1a>
  {
    len++;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	3301      	adds	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3301      	adds	r3, #1
 8006126:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f5      	bne.n	800611c <USBD_GetLen+0xe>
  }

  return len;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2202      	movs	r2, #2
 800614e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	2100      	movs	r1, #0
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fc57 	bl	8006a18 <USBD_LL_Transmit>

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	2100      	movs	r1, #0
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fc45 	bl	8006a18 <USBD_LL_Transmit>

  return USBD_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2203      	movs	r2, #3
 80061aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	2100      	movs	r1, #0
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fc4a 	bl	8006a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fc38 	bl	8006a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2204      	movs	r2, #4
 8006204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006208:	2300      	movs	r3, #0
 800620a:	2200      	movs	r2, #0
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fc02 	bl	8006a18 <USBD_LL_Transmit>

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2205      	movs	r2, #5
 800622a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800622e:	2300      	movs	r3, #0
 8006230:	2200      	movs	r2, #0
 8006232:	2100      	movs	r1, #0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fc12 	bl	8006a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006248:	2200      	movs	r2, #0
 800624a:	4912      	ldr	r1, [pc, #72]	; (8006294 <MX_USB_DEVICE_Init+0x50>)
 800624c:	4812      	ldr	r0, [pc, #72]	; (8006298 <MX_USB_DEVICE_Init+0x54>)
 800624e:	f7fe ff6c 	bl	800512a <USBD_Init>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006258:	f7fb f9a2 	bl	80015a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800625c:	490f      	ldr	r1, [pc, #60]	; (800629c <MX_USB_DEVICE_Init+0x58>)
 800625e:	480e      	ldr	r0, [pc, #56]	; (8006298 <MX_USB_DEVICE_Init+0x54>)
 8006260:	f7fe ff8e 	bl	8005180 <USBD_RegisterClass>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800626a:	f7fb f999 	bl	80015a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800626e:	490c      	ldr	r1, [pc, #48]	; (80062a0 <MX_USB_DEVICE_Init+0x5c>)
 8006270:	4809      	ldr	r0, [pc, #36]	; (8006298 <MX_USB_DEVICE_Init+0x54>)
 8006272:	f7fe febf 	bl	8004ff4 <USBD_CDC_RegisterInterface>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800627c:	f7fb f990 	bl	80015a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006280:	4805      	ldr	r0, [pc, #20]	; (8006298 <MX_USB_DEVICE_Init+0x54>)
 8006282:	f7fe ff96 	bl	80051b2 <USBD_Start>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800628c:	f7fb f988 	bl	80015a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000168 	.word	0x20000168
 8006298:	20000ab4 	.word	0x20000ab4
 800629c:	20000054 	.word	0x20000054
 80062a0:	20000158 	.word	0x20000158

080062a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80062a8:	2200      	movs	r2, #0
 80062aa:	4905      	ldr	r1, [pc, #20]	; (80062c0 <CDC_Init_FS+0x1c>)
 80062ac:	4805      	ldr	r0, [pc, #20]	; (80062c4 <CDC_Init_FS+0x20>)
 80062ae:	f7fe feb7 	bl	8005020 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80062b2:	4905      	ldr	r1, [pc, #20]	; (80062c8 <CDC_Init_FS+0x24>)
 80062b4:	4803      	ldr	r0, [pc, #12]	; (80062c4 <CDC_Init_FS+0x20>)
 80062b6:	f7fe fecc 	bl	8005052 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80062ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20001160 	.word	0x20001160
 80062c4:	20000ab4 	.word	0x20000ab4
 80062c8:	20000d78 	.word	0x20000d78

080062cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
	...

080062dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	6039      	str	r1, [r7, #0]
 80062e6:	71fb      	strb	r3, [r7, #7]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	2b23      	cmp	r3, #35	; 0x23
 80062f0:	d84a      	bhi.n	8006388 <CDC_Control_FS+0xac>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <CDC_Control_FS+0x1c>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006389 	.word	0x08006389
 80062fc:	08006389 	.word	0x08006389
 8006300:	08006389 	.word	0x08006389
 8006304:	08006389 	.word	0x08006389
 8006308:	08006389 	.word	0x08006389
 800630c:	08006389 	.word	0x08006389
 8006310:	08006389 	.word	0x08006389
 8006314:	08006389 	.word	0x08006389
 8006318:	08006389 	.word	0x08006389
 800631c:	08006389 	.word	0x08006389
 8006320:	08006389 	.word	0x08006389
 8006324:	08006389 	.word	0x08006389
 8006328:	08006389 	.word	0x08006389
 800632c:	08006389 	.word	0x08006389
 8006330:	08006389 	.word	0x08006389
 8006334:	08006389 	.word	0x08006389
 8006338:	08006389 	.word	0x08006389
 800633c:	08006389 	.word	0x08006389
 8006340:	08006389 	.word	0x08006389
 8006344:	08006389 	.word	0x08006389
 8006348:	08006389 	.word	0x08006389
 800634c:	08006389 	.word	0x08006389
 8006350:	08006389 	.word	0x08006389
 8006354:	08006389 	.word	0x08006389
 8006358:	08006389 	.word	0x08006389
 800635c:	08006389 	.word	0x08006389
 8006360:	08006389 	.word	0x08006389
 8006364:	08006389 	.word	0x08006389
 8006368:	08006389 	.word	0x08006389
 800636c:	08006389 	.word	0x08006389
 8006370:	08006389 	.word	0x08006389
 8006374:	08006389 	.word	0x08006389
 8006378:	08006389 	.word	0x08006389
 800637c:	08006389 	.word	0x08006389
 8006380:	08006389 	.word	0x08006389
 8006384:	08006389 	.word	0x08006389
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006388:	bf00      	nop
  }

  return (USBD_OK);
 800638a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop

08006398 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4805      	ldr	r0, [pc, #20]	; (80063bc <CDC_Receive_FS+0x24>)
 80063a6:	f7fe fe54 	bl	8005052 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063aa:	4804      	ldr	r0, [pc, #16]	; (80063bc <CDC_Receive_FS+0x24>)
 80063ac:	f7fe fe93 	bl	80050d6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80063b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000ab4 	.word	0x20000ab4

080063c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <CDC_Transmit_FS+0x48>)
 80063d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e00b      	b.n	80063fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4806      	ldr	r0, [pc, #24]	; (8006408 <CDC_Transmit_FS+0x48>)
 80063ee:	f7fe fe17 	bl	8005020 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063f2:	4805      	ldr	r0, [pc, #20]	; (8006408 <CDC_Transmit_FS+0x48>)
 80063f4:	f7fe fe40 	bl	8005078 <USBD_CDC_TransmitPacket>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000ab4 	.word	0x20000ab4

0800640c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	6039      	str	r1, [r7, #0]
 8006416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2212      	movs	r2, #18
 800641c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800641e:	4b03      	ldr	r3, [pc, #12]	; (800642c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000184 	.word	0x20000184

08006430 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2204      	movs	r2, #4
 8006440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000198 	.word	0x20000198

08006454 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	4907      	ldr	r1, [pc, #28]	; (8006488 <USBD_FS_ProductStrDescriptor+0x34>)
 800646a:	4808      	ldr	r0, [pc, #32]	; (800648c <USBD_FS_ProductStrDescriptor+0x38>)
 800646c:	f7ff fe0d 	bl	800608a <USBD_GetString>
 8006470:	e004      	b.n	800647c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	4904      	ldr	r1, [pc, #16]	; (8006488 <USBD_FS_ProductStrDescriptor+0x34>)
 8006476:	4805      	ldr	r0, [pc, #20]	; (800648c <USBD_FS_ProductStrDescriptor+0x38>)
 8006478:	f7ff fe07 	bl	800608a <USBD_GetString>
  }
  return USBD_StrDesc;
 800647c:	4b02      	ldr	r3, [pc, #8]	; (8006488 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20001548 	.word	0x20001548
 800648c:	0800815c 	.word	0x0800815c

08006490 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	6039      	str	r1, [r7, #0]
 800649a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	4904      	ldr	r1, [pc, #16]	; (80064b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064a0:	4804      	ldr	r0, [pc, #16]	; (80064b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064a2:	f7ff fdf2 	bl	800608a <USBD_GetString>
  return USBD_StrDesc;
 80064a6:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20001548 	.word	0x20001548
 80064b4:	08008174 	.word	0x08008174

080064b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	221a      	movs	r2, #26
 80064c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064ca:	f000 f843 	bl	8006554 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064ce:	4b02      	ldr	r3, [pc, #8]	; (80064d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	2000019c 	.word	0x2000019c

080064dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	6039      	str	r1, [r7, #0]
 80064e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	4907      	ldr	r1, [pc, #28]	; (8006510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064f2:	4808      	ldr	r0, [pc, #32]	; (8006514 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064f4:	f7ff fdc9 	bl	800608a <USBD_GetString>
 80064f8:	e004      	b.n	8006504 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4904      	ldr	r1, [pc, #16]	; (8006510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064fe:	4805      	ldr	r0, [pc, #20]	; (8006514 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006500:	f7ff fdc3 	bl	800608a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20001548 	.word	0x20001548
 8006514:	08008188 	.word	0x08008188

08006518 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	4907      	ldr	r1, [pc, #28]	; (800654c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800652e:	4808      	ldr	r0, [pc, #32]	; (8006550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006530:	f7ff fdab 	bl	800608a <USBD_GetString>
 8006534:	e004      	b.n	8006540 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	4904      	ldr	r1, [pc, #16]	; (800654c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800653a:	4805      	ldr	r0, [pc, #20]	; (8006550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800653c:	f7ff fda5 	bl	800608a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006540:	4b02      	ldr	r3, [pc, #8]	; (800654c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20001548 	.word	0x20001548
 8006550:	08008194 	.word	0x08008194

08006554 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <Get_SerialNum+0x44>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <Get_SerialNum+0x48>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <Get_SerialNum+0x4c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800657a:	2208      	movs	r2, #8
 800657c:	4909      	ldr	r1, [pc, #36]	; (80065a4 <Get_SerialNum+0x50>)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f814 	bl	80065ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006584:	2204      	movs	r2, #4
 8006586:	4908      	ldr	r1, [pc, #32]	; (80065a8 <Get_SerialNum+0x54>)
 8006588:	68b8      	ldr	r0, [r7, #8]
 800658a:	f000 f80f 	bl	80065ac <IntToUnicode>
  }
}
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	1ffff7e8 	.word	0x1ffff7e8
 800659c:	1ffff7ec 	.word	0x1ffff7ec
 80065a0:	1ffff7f0 	.word	0x1ffff7f0
 80065a4:	2000019e 	.word	0x2000019e
 80065a8:	200001ae 	.word	0x200001ae

080065ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
 80065c2:	e027      	b.n	8006614 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	0f1b      	lsrs	r3, r3, #28
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d80b      	bhi.n	80065e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	0f1b      	lsrs	r3, r3, #28
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	4619      	mov	r1, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	440b      	add	r3, r1
 80065dc:	3230      	adds	r2, #48	; 0x30
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e00a      	b.n	80065fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	0f1b      	lsrs	r3, r3, #28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4619      	mov	r1, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	440b      	add	r3, r1
 80065f4:	3237      	adds	r2, #55	; 0x37
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	3301      	adds	r3, #1
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	4413      	add	r3, r2
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	3301      	adds	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
 8006614:	7dfa      	ldrb	r2, [r7, #23]
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	429a      	cmp	r2, r3
 800661a:	d3d3      	bcc.n	80065c4 <IntToUnicode+0x18>
  }
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
	...

08006628 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0d      	ldr	r2, [pc, #52]	; (800666c <HAL_PCD_MspInit+0x44>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d113      	bne.n	8006662 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800663a:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <HAL_PCD_MspInit+0x48>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <HAL_PCD_MspInit+0x48>)
 8006640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006644:	61d3      	str	r3, [r2, #28]
 8006646:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <HAL_PCD_MspInit+0x48>)
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006652:	2200      	movs	r2, #0
 8006654:	2100      	movs	r1, #0
 8006656:	2014      	movs	r0, #20
 8006658:	f7fb fc13 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800665c:	2014      	movs	r0, #20
 800665e:	f7fb fc2c 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40005c00 	.word	0x40005c00
 8006670:	40021000 	.word	0x40021000

08006674 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7fe fdd9 	bl	8005242 <USBD_LL_SetupStage>
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	015b      	lsls	r3, r3, #5
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	4619      	mov	r1, r3
 80066bc:	f7fe fe0c 	bl	80052d8 <USBD_LL_DataOutStage>
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	015b      	lsls	r3, r3, #5
 80066e0:	4413      	add	r3, r2
 80066e2:	333c      	adds	r3, #60	; 0x3c
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	4619      	mov	r1, r3
 80066ea:	f7fe fe66 	bl	80053ba <USBD_LL_DataInStage>
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe ff76 	bl	80055f6 <USBD_LL_SOF>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d001      	beq.n	800672a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006726:	f7fa ff3b 	bl	80015a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe ff26 	bl	8005586 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fedf 	bl	8005504 <USBD_LL_Reset>
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe ff20 	bl	80055a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800676c:	4b04      	ldr	r3, [pc, #16]	; (8006780 <HAL_PCD_SuspendCallback+0x30>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	4a03      	ldr	r2, [pc, #12]	; (8006780 <HAL_PCD_SuspendCallback+0x30>)
 8006772:	f043 0306 	orr.w	r3, r3, #6
 8006776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	e000ed00 	.word	0xe000ed00

08006784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe ff1a 	bl	80055cc <USBD_LL_Resume>
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80067a8:	4a28      	ldr	r2, [pc, #160]	; (800684c <USBD_LL_Init+0xac>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a26      	ldr	r2, [pc, #152]	; (800684c <USBD_LL_Init+0xac>)
 80067b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <USBD_LL_Init+0xac>)
 80067ba:	4a25      	ldr	r2, [pc, #148]	; (8006850 <USBD_LL_Init+0xb0>)
 80067bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80067be:	4b23      	ldr	r3, [pc, #140]	; (800684c <USBD_LL_Init+0xac>)
 80067c0:	2208      	movs	r2, #8
 80067c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80067c4:	4b21      	ldr	r3, [pc, #132]	; (800684c <USBD_LL_Init+0xac>)
 80067c6:	2202      	movs	r2, #2
 80067c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <USBD_LL_Init+0xac>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80067d0:	4b1e      	ldr	r3, [pc, #120]	; (800684c <USBD_LL_Init+0xac>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <USBD_LL_Init+0xac>)
 80067d8:	2200      	movs	r2, #0
 80067da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80067dc:	481b      	ldr	r0, [pc, #108]	; (800684c <USBD_LL_Init+0xac>)
 80067de:	f7fb fcf9 	bl	80021d4 <HAL_PCD_Init>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80067e8:	f7fa feda 	bl	80015a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067f2:	2318      	movs	r3, #24
 80067f4:	2200      	movs	r2, #0
 80067f6:	2100      	movs	r1, #0
 80067f8:	f7fc fb92 	bl	8002f20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006802:	2358      	movs	r3, #88	; 0x58
 8006804:	2200      	movs	r2, #0
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	f7fc fb8a 	bl	8002f20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006812:	23c0      	movs	r3, #192	; 0xc0
 8006814:	2200      	movs	r2, #0
 8006816:	2181      	movs	r1, #129	; 0x81
 8006818:	f7fc fb82 	bl	8002f20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006822:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006826:	2200      	movs	r2, #0
 8006828:	2101      	movs	r1, #1
 800682a:	f7fc fb79 	bl	8002f20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006838:	2200      	movs	r2, #0
 800683a:	2182      	movs	r1, #130	; 0x82
 800683c:	f7fc fb70 	bl	8002f20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20001748 	.word	0x20001748
 8006850:	40005c00 	.word	0x40005c00

08006854 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800686a:	4618      	mov	r0, r3
 800686c:	f7fb fd93 	bl	8002396 <HAL_PCD_Start>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f948 	bl	8006b0c <USBD_Get_USB_Status>
 800687c:	4603      	mov	r3, r0
 800687e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006880:	7bbb      	ldrb	r3, [r7, #14]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	461a      	mov	r2, r3
 8006898:	4603      	mov	r3, r0
 800689a:	70fb      	strb	r3, [r7, #3]
 800689c:	460b      	mov	r3, r1
 800689e:	70bb      	strb	r3, [r7, #2]
 80068a0:	4613      	mov	r3, r2
 80068a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068b2:	78bb      	ldrb	r3, [r7, #2]
 80068b4:	883a      	ldrh	r2, [r7, #0]
 80068b6:	78f9      	ldrb	r1, [r7, #3]
 80068b8:	f7fb fec6 	bl	8002648 <HAL_PCD_EP_Open>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f922 	bl	8006b0c <USBD_Get_USB_Status>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fb ff07 	bl	8002708 <HAL_PCD_EP_Close>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f903 	bl	8006b0c <USBD_Get_USB_Status>
 8006906:	4603      	mov	r3, r0
 8006908:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800690a:	7bbb      	ldrb	r3, [r7, #14]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7fb ffb1 	bl	800289a <HAL_PCD_EP_SetStall>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f8e4 	bl	8006b0c <USBD_Get_USB_Status>
 8006944:	4603      	mov	r3, r0
 8006946:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006948:	7bbb      	ldrb	r3, [r7, #14]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f7fb ffec 	bl	800294e <HAL_PCD_EP_ClrStall>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 f8c5 	bl	8006b0c <USBD_Get_USB_Status>
 8006982:	4603      	mov	r3, r0
 8006984:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006986:	7bbb      	ldrb	r3, [r7, #14]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069a2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80069a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da08      	bge.n	80069be <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	015b      	lsls	r3, r3, #5
 80069b6:	4413      	add	r3, r2
 80069b8:	332a      	adds	r3, #42	; 0x2a
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	e008      	b.n	80069d0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	015b      	lsls	r3, r3, #5
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80069ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	4611      	mov	r1, r2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fb fe00 	bl	80025fe <HAL_PCD_SetAddress>
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f881 	bl	8006b0c <USBD_Get_USB_Status>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	461a      	mov	r2, r3
 8006a24:	460b      	mov	r3, r1
 8006a26:	72fb      	strb	r3, [r7, #11]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a3a:	893b      	ldrh	r3, [r7, #8]
 8006a3c:	7af9      	ldrb	r1, [r7, #11]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	f7fb fef2 	bl	8002828 <HAL_PCD_EP_Transmit>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f85e 	bl	8006b0c <USBD_Get_USB_Status>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	72fb      	strb	r3, [r7, #11]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a80:	893b      	ldrh	r3, [r7, #8]
 8006a82:	7af9      	ldrb	r1, [r7, #11]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	f7fb fe81 	bl	800278c <HAL_PCD_EP_Receive>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 f83b 	bl	8006b0c <USBD_Get_USB_Status>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006a9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fb fea0 	bl	8002800 <HAL_PCD_EP_GetRxCount>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	; (8006ae0 <USBD_static_malloc+0x14>)
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	2000084c 	.word	0x2000084c

08006ae4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr

08006b0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d817      	bhi.n	8006b50 <USBD_Get_USB_Status+0x44>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <USBD_Get_USB_Status+0x1c>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b3f 	.word	0x08006b3f
 8006b30:	08006b45 	.word	0x08006b45
 8006b34:	08006b4b 	.word	0x08006b4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b3c:	e00b      	b.n	8006b56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	73fb      	strb	r3, [r7, #15]
    break;
 8006b42:	e008      	b.n	8006b56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
    break;
 8006b48:	e005      	b.n	8006b56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b4e:	e002      	b.n	8006b56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b50:	2302      	movs	r3, #2
 8006b52:	73fb      	strb	r3, [r7, #15]
    break;
 8006b54:	bf00      	nop
  }
  return usb_status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop

08006b64 <cdcacm_get_config>:
//	}
//	return 0;
//}
//
int cdcacm_get_config(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
	return configured;
 8006b68:	4b02      	ldr	r3, [pc, #8]	; (8006b74 <cdcacm_get_config+0x10>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	20000a6c 	.word	0x20000a6c

08006b78 <cdcacm_get_dtr>:

int cdcacm_get_dtr(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	return cdcacm_gdb_dtr;
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <cdcacm_get_dtr+0x10>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	200001b8 	.word	0x200001b8

08006b8c <__errno>:
 8006b8c:	4b01      	ldr	r3, [pc, #4]	; (8006b94 <__errno+0x8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	200001bc 	.word	0x200001bc

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	4e0c      	ldr	r6, [pc, #48]	; (8006bd0 <__libc_init_array+0x38>)
 8006b9e:	4c0d      	ldr	r4, [pc, #52]	; (8006bd4 <__libc_init_array+0x3c>)
 8006ba0:	1ba4      	subs	r4, r4, r6
 8006ba2:	10a4      	asrs	r4, r4, #2
 8006ba4:	42a5      	cmp	r5, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	f001 f992 	bl	8007ed0 <_init>
 8006bac:	2500      	movs	r5, #0
 8006bae:	4e0a      	ldr	r6, [pc, #40]	; (8006bd8 <__libc_init_array+0x40>)
 8006bb0:	4c0a      	ldr	r4, [pc, #40]	; (8006bdc <__libc_init_array+0x44>)
 8006bb2:	1ba4      	subs	r4, r4, r6
 8006bb4:	10a4      	asrs	r4, r4, #2
 8006bb6:	42a5      	cmp	r5, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bc0:	4798      	blx	r3
 8006bc2:	3501      	adds	r5, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bca:	4798      	blx	r3
 8006bcc:	3501      	adds	r5, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	08008390 	.word	0x08008390
 8006bd4:	08008390 	.word	0x08008390
 8006bd8:	08008390 	.word	0x08008390
 8006bdc:	08008394 	.word	0x08008394

08006be0 <free>:
 8006be0:	4b02      	ldr	r3, [pc, #8]	; (8006bec <free+0xc>)
 8006be2:	4601      	mov	r1, r0
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	f000 b80b 	b.w	8006c00 <_free_r>
 8006bea:	bf00      	nop
 8006bec:	200001bc 	.word	0x200001bc

08006bf0 <memset>:
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4402      	add	r2, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <_free_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4605      	mov	r5, r0
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d043      	beq.n	8006c90 <_free_r+0x90>
 8006c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0c:	1f0c      	subs	r4, r1, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfb8      	it	lt
 8006c12:	18e4      	addlt	r4, r4, r3
 8006c14:	f000 fa1a 	bl	800704c <__malloc_lock>
 8006c18:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <_free_r+0x94>)
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	b933      	cbnz	r3, 8006c2e <_free_r+0x2e>
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	6014      	str	r4, [r2, #0]
 8006c24:	4628      	mov	r0, r5
 8006c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c2a:	f000 ba10 	b.w	800704e <__malloc_unlock>
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	d90b      	bls.n	8006c4a <_free_r+0x4a>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	1862      	adds	r2, r4, r1
 8006c36:	4293      	cmp	r3, r2
 8006c38:	bf01      	itttt	eq
 8006c3a:	681a      	ldreq	r2, [r3, #0]
 8006c3c:	685b      	ldreq	r3, [r3, #4]
 8006c3e:	1852      	addeq	r2, r2, r1
 8006c40:	6022      	streq	r2, [r4, #0]
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	6004      	str	r4, [r0, #0]
 8006c46:	e7ed      	b.n	8006c24 <_free_r+0x24>
 8006c48:	4613      	mov	r3, r2
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	b10a      	cbz	r2, 8006c52 <_free_r+0x52>
 8006c4e:	42a2      	cmp	r2, r4
 8006c50:	d9fa      	bls.n	8006c48 <_free_r+0x48>
 8006c52:	6819      	ldr	r1, [r3, #0]
 8006c54:	1858      	adds	r0, r3, r1
 8006c56:	42a0      	cmp	r0, r4
 8006c58:	d10b      	bne.n	8006c72 <_free_r+0x72>
 8006c5a:	6820      	ldr	r0, [r4, #0]
 8006c5c:	4401      	add	r1, r0
 8006c5e:	1858      	adds	r0, r3, r1
 8006c60:	4282      	cmp	r2, r0
 8006c62:	6019      	str	r1, [r3, #0]
 8006c64:	d1de      	bne.n	8006c24 <_free_r+0x24>
 8006c66:	6810      	ldr	r0, [r2, #0]
 8006c68:	6852      	ldr	r2, [r2, #4]
 8006c6a:	4401      	add	r1, r0
 8006c6c:	6019      	str	r1, [r3, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
 8006c70:	e7d8      	b.n	8006c24 <_free_r+0x24>
 8006c72:	d902      	bls.n	8006c7a <_free_r+0x7a>
 8006c74:	230c      	movs	r3, #12
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	e7d4      	b.n	8006c24 <_free_r+0x24>
 8006c7a:	6820      	ldr	r0, [r4, #0]
 8006c7c:	1821      	adds	r1, r4, r0
 8006c7e:	428a      	cmp	r2, r1
 8006c80:	bf01      	itttt	eq
 8006c82:	6811      	ldreq	r1, [r2, #0]
 8006c84:	6852      	ldreq	r2, [r2, #4]
 8006c86:	1809      	addeq	r1, r1, r0
 8006c88:	6021      	streq	r1, [r4, #0]
 8006c8a:	6062      	str	r2, [r4, #4]
 8006c8c:	605c      	str	r4, [r3, #4]
 8006c8e:	e7c9      	b.n	8006c24 <_free_r+0x24>
 8006c90:	bd38      	pop	{r3, r4, r5, pc}
 8006c92:	bf00      	nop
 8006c94:	20000a70 	.word	0x20000a70

08006c98 <_malloc_r>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	1ccd      	adds	r5, r1, #3
 8006c9c:	f025 0503 	bic.w	r5, r5, #3
 8006ca0:	3508      	adds	r5, #8
 8006ca2:	2d0c      	cmp	r5, #12
 8006ca4:	bf38      	it	cc
 8006ca6:	250c      	movcc	r5, #12
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	4606      	mov	r6, r0
 8006cac:	db01      	blt.n	8006cb2 <_malloc_r+0x1a>
 8006cae:	42a9      	cmp	r1, r5
 8006cb0:	d903      	bls.n	8006cba <_malloc_r+0x22>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	6033      	str	r3, [r6, #0]
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	bd70      	pop	{r4, r5, r6, pc}
 8006cba:	f000 f9c7 	bl	800704c <__malloc_lock>
 8006cbe:	4a21      	ldr	r2, [pc, #132]	; (8006d44 <_malloc_r+0xac>)
 8006cc0:	6814      	ldr	r4, [r2, #0]
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	b991      	cbnz	r1, 8006cec <_malloc_r+0x54>
 8006cc6:	4c20      	ldr	r4, [pc, #128]	; (8006d48 <_malloc_r+0xb0>)
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	b91b      	cbnz	r3, 8006cd4 <_malloc_r+0x3c>
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 f83d 	bl	8006d4c <_sbrk_r>
 8006cd2:	6020      	str	r0, [r4, #0]
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f000 f838 	bl	8006d4c <_sbrk_r>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d124      	bne.n	8006d2a <_malloc_r+0x92>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	f000 f9b2 	bl	800704e <__malloc_unlock>
 8006cea:	e7e4      	b.n	8006cb6 <_malloc_r+0x1e>
 8006cec:	680b      	ldr	r3, [r1, #0]
 8006cee:	1b5b      	subs	r3, r3, r5
 8006cf0:	d418      	bmi.n	8006d24 <_malloc_r+0x8c>
 8006cf2:	2b0b      	cmp	r3, #11
 8006cf4:	d90f      	bls.n	8006d16 <_malloc_r+0x7e>
 8006cf6:	600b      	str	r3, [r1, #0]
 8006cf8:	18cc      	adds	r4, r1, r3
 8006cfa:	50cd      	str	r5, [r1, r3]
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f9a6 	bl	800704e <__malloc_unlock>
 8006d02:	f104 000b 	add.w	r0, r4, #11
 8006d06:	1d23      	adds	r3, r4, #4
 8006d08:	f020 0007 	bic.w	r0, r0, #7
 8006d0c:	1ac3      	subs	r3, r0, r3
 8006d0e:	d0d3      	beq.n	8006cb8 <_malloc_r+0x20>
 8006d10:	425a      	negs	r2, r3
 8006d12:	50e2      	str	r2, [r4, r3]
 8006d14:	e7d0      	b.n	8006cb8 <_malloc_r+0x20>
 8006d16:	684b      	ldr	r3, [r1, #4]
 8006d18:	428c      	cmp	r4, r1
 8006d1a:	bf16      	itet	ne
 8006d1c:	6063      	strne	r3, [r4, #4]
 8006d1e:	6013      	streq	r3, [r2, #0]
 8006d20:	460c      	movne	r4, r1
 8006d22:	e7eb      	b.n	8006cfc <_malloc_r+0x64>
 8006d24:	460c      	mov	r4, r1
 8006d26:	6849      	ldr	r1, [r1, #4]
 8006d28:	e7cc      	b.n	8006cc4 <_malloc_r+0x2c>
 8006d2a:	1cc4      	adds	r4, r0, #3
 8006d2c:	f024 0403 	bic.w	r4, r4, #3
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d005      	beq.n	8006d40 <_malloc_r+0xa8>
 8006d34:	1a21      	subs	r1, r4, r0
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f808 	bl	8006d4c <_sbrk_r>
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0cf      	beq.n	8006ce0 <_malloc_r+0x48>
 8006d40:	6025      	str	r5, [r4, #0]
 8006d42:	e7db      	b.n	8006cfc <_malloc_r+0x64>
 8006d44:	20000a70 	.word	0x20000a70
 8006d48:	20000a74 	.word	0x20000a74

08006d4c <_sbrk_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4c05      	ldr	r4, [pc, #20]	; (8006d68 <_sbrk_r+0x1c>)
 8006d52:	4605      	mov	r5, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	f7fa fcca 	bl	80016f0 <_sbrk>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_sbrk_r+0x1a>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_sbrk_r+0x1a>
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200019b4 	.word	0x200019b4

08006d6c <sniprintf>:
 8006d6c:	b40c      	push	{r2, r3}
 8006d6e:	b530      	push	{r4, r5, lr}
 8006d70:	4b17      	ldr	r3, [pc, #92]	; (8006dd0 <sniprintf+0x64>)
 8006d72:	1e0c      	subs	r4, r1, #0
 8006d74:	b09d      	sub	sp, #116	; 0x74
 8006d76:	681d      	ldr	r5, [r3, #0]
 8006d78:	da08      	bge.n	8006d8c <sniprintf+0x20>
 8006d7a:	238b      	movs	r3, #139	; 0x8b
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	b01d      	add	sp, #116	; 0x74
 8006d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d88:	b002      	add	sp, #8
 8006d8a:	4770      	bx	lr
 8006d8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d94:	bf0c      	ite	eq
 8006d96:	4623      	moveq	r3, r4
 8006d98:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006da4:	9002      	str	r0, [sp, #8]
 8006da6:	9006      	str	r0, [sp, #24]
 8006da8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006dac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006dae:	ab21      	add	r3, sp, #132	; 0x84
 8006db0:	a902      	add	r1, sp, #8
 8006db2:	4628      	mov	r0, r5
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	f000 f9a5 	bl	8007104 <_svfiprintf_r>
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	bfbc      	itt	lt
 8006dbe:	238b      	movlt	r3, #139	; 0x8b
 8006dc0:	602b      	strlt	r3, [r5, #0]
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	d0dd      	beq.n	8006d82 <sniprintf+0x16>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	9b02      	ldr	r3, [sp, #8]
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e7d9      	b.n	8006d82 <sniprintf+0x16>
 8006dce:	bf00      	nop
 8006dd0:	200001bc 	.word	0x200001bc

08006dd4 <siscanf>:
 8006dd4:	b40e      	push	{r1, r2, r3}
 8006dd6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006dda:	b530      	push	{r4, r5, lr}
 8006ddc:	b09c      	sub	sp, #112	; 0x70
 8006dde:	ac1f      	add	r4, sp, #124	; 0x7c
 8006de0:	f854 5b04 	ldr.w	r5, [r4], #4
 8006de4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006de8:	9002      	str	r0, [sp, #8]
 8006dea:	9006      	str	r0, [sp, #24]
 8006dec:	f7f9 f9c6 	bl	800017c <strlen>
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <siscanf+0x4c>)
 8006df2:	9003      	str	r0, [sp, #12]
 8006df4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df6:	2300      	movs	r3, #0
 8006df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dfa:	9314      	str	r3, [sp, #80]	; 0x50
 8006dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e00:	9007      	str	r0, [sp, #28]
 8006e02:	4808      	ldr	r0, [pc, #32]	; (8006e24 <siscanf+0x50>)
 8006e04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	a902      	add	r1, sp, #8
 8006e0e:	6800      	ldr	r0, [r0, #0]
 8006e10:	9401      	str	r4, [sp, #4]
 8006e12:	f000 fac9 	bl	80073a8 <__ssvfiscanf_r>
 8006e16:	b01c      	add	sp, #112	; 0x70
 8006e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e1c:	b003      	add	sp, #12
 8006e1e:	4770      	bx	lr
 8006e20:	08006e29 	.word	0x08006e29
 8006e24:	200001bc 	.word	0x200001bc

08006e28 <__seofread>:
 8006e28:	2000      	movs	r0, #0
 8006e2a:	4770      	bx	lr

08006e2c <strncmp>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	b16a      	cbz	r2, 8006e4c <strncmp+0x20>
 8006e30:	3901      	subs	r1, #1
 8006e32:	1884      	adds	r4, r0, r2
 8006e34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d103      	bne.n	8006e48 <strncmp+0x1c>
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d001      	beq.n	8006e48 <strncmp+0x1c>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f5      	bne.n	8006e34 <strncmp+0x8>
 8006e48:	1a98      	subs	r0, r3, r2
 8006e4a:	bd10      	pop	{r4, pc}
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	e7fc      	b.n	8006e4a <strncmp+0x1e>

08006e50 <strncpy>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	3901      	subs	r1, #1
 8006e56:	b902      	cbnz	r2, 8006e5a <strncpy+0xa>
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
 8006e5a:	4623      	mov	r3, r4
 8006e5c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006e60:	1e56      	subs	r6, r2, #1
 8006e62:	f803 5b01 	strb.w	r5, [r3], #1
 8006e66:	b92d      	cbnz	r5, 8006e74 <strncpy+0x24>
 8006e68:	4414      	add	r4, r2
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	d0f4      	beq.n	8006e58 <strncpy+0x8>
 8006e6e:	f803 5b01 	strb.w	r5, [r3], #1
 8006e72:	e7fa      	b.n	8006e6a <strncpy+0x1a>
 8006e74:	461c      	mov	r4, r3
 8006e76:	4632      	mov	r2, r6
 8006e78:	e7ed      	b.n	8006e56 <strncpy+0x6>

08006e7a <_strtol_l.isra.0>:
 8006e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	4692      	mov	sl, r2
 8006e84:	461e      	mov	r6, r3
 8006e86:	460f      	mov	r7, r1
 8006e88:	463d      	mov	r5, r7
 8006e8a:	9808      	ldr	r0, [sp, #32]
 8006e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e90:	f000 f8b8 	bl	8007004 <__locale_ctype_ptr_l>
 8006e94:	4420      	add	r0, r4
 8006e96:	7843      	ldrb	r3, [r0, #1]
 8006e98:	f013 0308 	ands.w	r3, r3, #8
 8006e9c:	d132      	bne.n	8006f04 <_strtol_l.isra.0+0x8a>
 8006e9e:	2c2d      	cmp	r4, #45	; 0x2d
 8006ea0:	d132      	bne.n	8006f08 <_strtol_l.isra.0+0x8e>
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	787c      	ldrb	r4, [r7, #1]
 8006ea6:	1cbd      	adds	r5, r7, #2
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	d05d      	beq.n	8006f68 <_strtol_l.isra.0+0xee>
 8006eac:	2e10      	cmp	r6, #16
 8006eae:	d109      	bne.n	8006ec4 <_strtol_l.isra.0+0x4a>
 8006eb0:	2c30      	cmp	r4, #48	; 0x30
 8006eb2:	d107      	bne.n	8006ec4 <_strtol_l.isra.0+0x4a>
 8006eb4:	782b      	ldrb	r3, [r5, #0]
 8006eb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006eba:	2b58      	cmp	r3, #88	; 0x58
 8006ebc:	d14f      	bne.n	8006f5e <_strtol_l.isra.0+0xe4>
 8006ebe:	2610      	movs	r6, #16
 8006ec0:	786c      	ldrb	r4, [r5, #1]
 8006ec2:	3502      	adds	r5, #2
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	bf14      	ite	ne
 8006ec8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006ecc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006ed0:	2700      	movs	r7, #0
 8006ed2:	fbb1 fcf6 	udiv	ip, r1, r6
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006edc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006ee0:	2b09      	cmp	r3, #9
 8006ee2:	d817      	bhi.n	8006f14 <_strtol_l.isra.0+0x9a>
 8006ee4:	461c      	mov	r4, r3
 8006ee6:	42a6      	cmp	r6, r4
 8006ee8:	dd23      	ble.n	8006f32 <_strtol_l.isra.0+0xb8>
 8006eea:	1c7b      	adds	r3, r7, #1
 8006eec:	d007      	beq.n	8006efe <_strtol_l.isra.0+0x84>
 8006eee:	4584      	cmp	ip, r0
 8006ef0:	d31c      	bcc.n	8006f2c <_strtol_l.isra.0+0xb2>
 8006ef2:	d101      	bne.n	8006ef8 <_strtol_l.isra.0+0x7e>
 8006ef4:	45a6      	cmp	lr, r4
 8006ef6:	db19      	blt.n	8006f2c <_strtol_l.isra.0+0xb2>
 8006ef8:	2701      	movs	r7, #1
 8006efa:	fb00 4006 	mla	r0, r0, r6, r4
 8006efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f02:	e7eb      	b.n	8006edc <_strtol_l.isra.0+0x62>
 8006f04:	462f      	mov	r7, r5
 8006f06:	e7bf      	b.n	8006e88 <_strtol_l.isra.0+0xe>
 8006f08:	2c2b      	cmp	r4, #43	; 0x2b
 8006f0a:	bf04      	itt	eq
 8006f0c:	1cbd      	addeq	r5, r7, #2
 8006f0e:	787c      	ldrbeq	r4, [r7, #1]
 8006f10:	461a      	mov	r2, r3
 8006f12:	e7c9      	b.n	8006ea8 <_strtol_l.isra.0+0x2e>
 8006f14:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006f18:	2b19      	cmp	r3, #25
 8006f1a:	d801      	bhi.n	8006f20 <_strtol_l.isra.0+0xa6>
 8006f1c:	3c37      	subs	r4, #55	; 0x37
 8006f1e:	e7e2      	b.n	8006ee6 <_strtol_l.isra.0+0x6c>
 8006f20:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006f24:	2b19      	cmp	r3, #25
 8006f26:	d804      	bhi.n	8006f32 <_strtol_l.isra.0+0xb8>
 8006f28:	3c57      	subs	r4, #87	; 0x57
 8006f2a:	e7dc      	b.n	8006ee6 <_strtol_l.isra.0+0x6c>
 8006f2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f30:	e7e5      	b.n	8006efe <_strtol_l.isra.0+0x84>
 8006f32:	1c7b      	adds	r3, r7, #1
 8006f34:	d108      	bne.n	8006f48 <_strtol_l.isra.0+0xce>
 8006f36:	2322      	movs	r3, #34	; 0x22
 8006f38:	4608      	mov	r0, r1
 8006f3a:	f8c8 3000 	str.w	r3, [r8]
 8006f3e:	f1ba 0f00 	cmp.w	sl, #0
 8006f42:	d107      	bne.n	8006f54 <_strtol_l.isra.0+0xda>
 8006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f48:	b102      	cbz	r2, 8006f4c <_strtol_l.isra.0+0xd2>
 8006f4a:	4240      	negs	r0, r0
 8006f4c:	f1ba 0f00 	cmp.w	sl, #0
 8006f50:	d0f8      	beq.n	8006f44 <_strtol_l.isra.0+0xca>
 8006f52:	b10f      	cbz	r7, 8006f58 <_strtol_l.isra.0+0xde>
 8006f54:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006f58:	f8ca 9000 	str.w	r9, [sl]
 8006f5c:	e7f2      	b.n	8006f44 <_strtol_l.isra.0+0xca>
 8006f5e:	2430      	movs	r4, #48	; 0x30
 8006f60:	2e00      	cmp	r6, #0
 8006f62:	d1af      	bne.n	8006ec4 <_strtol_l.isra.0+0x4a>
 8006f64:	2608      	movs	r6, #8
 8006f66:	e7ad      	b.n	8006ec4 <_strtol_l.isra.0+0x4a>
 8006f68:	2c30      	cmp	r4, #48	; 0x30
 8006f6a:	d0a3      	beq.n	8006eb4 <_strtol_l.isra.0+0x3a>
 8006f6c:	260a      	movs	r6, #10
 8006f6e:	e7a9      	b.n	8006ec4 <_strtol_l.isra.0+0x4a>

08006f70 <_strtol_r>:
 8006f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f72:	4c06      	ldr	r4, [pc, #24]	; (8006f8c <_strtol_r+0x1c>)
 8006f74:	4d06      	ldr	r5, [pc, #24]	; (8006f90 <_strtol_r+0x20>)
 8006f76:	6824      	ldr	r4, [r4, #0]
 8006f78:	6a24      	ldr	r4, [r4, #32]
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	bf08      	it	eq
 8006f7e:	462c      	moveq	r4, r5
 8006f80:	9400      	str	r4, [sp, #0]
 8006f82:	f7ff ff7a 	bl	8006e7a <_strtol_l.isra.0>
 8006f86:	b003      	add	sp, #12
 8006f88:	bd30      	pop	{r4, r5, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200001bc 	.word	0x200001bc
 8006f90:	20000220 	.word	0x20000220

08006f94 <strtol>:
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <strtol+0x24>)
 8006f96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	4d08      	ldr	r5, [pc, #32]	; (8006fbc <strtol+0x28>)
 8006f9c:	6a23      	ldr	r3, [r4, #32]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bf08      	it	eq
 8006fa2:	462b      	moveq	r3, r5
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	460a      	mov	r2, r1
 8006faa:	4601      	mov	r1, r0
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7ff ff64 	bl	8006e7a <_strtol_l.isra.0>
 8006fb2:	b003      	add	sp, #12
 8006fb4:	bd30      	pop	{r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200001bc 	.word	0x200001bc
 8006fbc:	20000220 	.word	0x20000220

08006fc0 <_vasiprintf_r>:
 8006fc0:	b530      	push	{r4, r5, lr}
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4909      	ldr	r1, [pc, #36]	; (8006fec <_vasiprintf_r+0x2c>)
 8006fc8:	b09b      	sub	sp, #108	; 0x6c
 8006fca:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8006fce:	4669      	mov	r1, sp
 8006fd0:	9400      	str	r4, [sp, #0]
 8006fd2:	9402      	str	r4, [sp, #8]
 8006fd4:	9405      	str	r4, [sp, #20]
 8006fd6:	f000 f895 	bl	8007104 <_svfiprintf_r>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	bfa1      	itttt	ge
 8006fde:	9b00      	ldrge	r3, [sp, #0]
 8006fe0:	701c      	strbge	r4, [r3, #0]
 8006fe2:	9b04      	ldrge	r3, [sp, #16]
 8006fe4:	602b      	strge	r3, [r5, #0]
 8006fe6:	b01b      	add	sp, #108	; 0x6c
 8006fe8:	bd30      	pop	{r4, r5, pc}
 8006fea:	bf00      	nop
 8006fec:	ffff0288 	.word	0xffff0288

08006ff0 <vasiprintf>:
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	460a      	mov	r2, r1
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	4802      	ldr	r0, [pc, #8]	; (8007000 <vasiprintf+0x10>)
 8006ff8:	6800      	ldr	r0, [r0, #0]
 8006ffa:	f7ff bfe1 	b.w	8006fc0 <_vasiprintf_r>
 8006ffe:	bf00      	nop
 8007000:	200001bc 	.word	0x200001bc

08007004 <__locale_ctype_ptr_l>:
 8007004:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007008:	4770      	bx	lr
	...

0800700c <__locale_ctype_ptr>:
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <__locale_ctype_ptr+0x14>)
 800700e:	4a05      	ldr	r2, [pc, #20]	; (8007024 <__locale_ctype_ptr+0x18>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf08      	it	eq
 8007018:	4613      	moveq	r3, r2
 800701a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800701e:	4770      	bx	lr
 8007020:	200001bc 	.word	0x200001bc
 8007024:	20000220 	.word	0x20000220

08007028 <__ascii_mbtowc>:
 8007028:	b082      	sub	sp, #8
 800702a:	b901      	cbnz	r1, 800702e <__ascii_mbtowc+0x6>
 800702c:	a901      	add	r1, sp, #4
 800702e:	b142      	cbz	r2, 8007042 <__ascii_mbtowc+0x1a>
 8007030:	b14b      	cbz	r3, 8007046 <__ascii_mbtowc+0x1e>
 8007032:	7813      	ldrb	r3, [r2, #0]
 8007034:	600b      	str	r3, [r1, #0]
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	1c10      	adds	r0, r2, #0
 800703a:	bf18      	it	ne
 800703c:	2001      	movne	r0, #1
 800703e:	b002      	add	sp, #8
 8007040:	4770      	bx	lr
 8007042:	4610      	mov	r0, r2
 8007044:	e7fb      	b.n	800703e <__ascii_mbtowc+0x16>
 8007046:	f06f 0001 	mvn.w	r0, #1
 800704a:	e7f8      	b.n	800703e <__ascii_mbtowc+0x16>

0800704c <__malloc_lock>:
 800704c:	4770      	bx	lr

0800704e <__malloc_unlock>:
 800704e:	4770      	bx	lr

08007050 <__ssputs_r>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	688e      	ldr	r6, [r1, #8]
 8007056:	4682      	mov	sl, r0
 8007058:	429e      	cmp	r6, r3
 800705a:	460c      	mov	r4, r1
 800705c:	4690      	mov	r8, r2
 800705e:	4699      	mov	r9, r3
 8007060:	d837      	bhi.n	80070d2 <__ssputs_r+0x82>
 8007062:	898a      	ldrh	r2, [r1, #12]
 8007064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007068:	d031      	beq.n	80070ce <__ssputs_r+0x7e>
 800706a:	2302      	movs	r3, #2
 800706c:	6825      	ldr	r5, [r4, #0]
 800706e:	6909      	ldr	r1, [r1, #16]
 8007070:	1a6f      	subs	r7, r5, r1
 8007072:	6965      	ldr	r5, [r4, #20]
 8007074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007078:	fb95 f5f3 	sdiv	r5, r5, r3
 800707c:	f109 0301 	add.w	r3, r9, #1
 8007080:	443b      	add	r3, r7
 8007082:	429d      	cmp	r5, r3
 8007084:	bf38      	it	cc
 8007086:	461d      	movcc	r5, r3
 8007088:	0553      	lsls	r3, r2, #21
 800708a:	d530      	bpl.n	80070ee <__ssputs_r+0x9e>
 800708c:	4629      	mov	r1, r5
 800708e:	f7ff fe03 	bl	8006c98 <_malloc_r>
 8007092:	4606      	mov	r6, r0
 8007094:	b950      	cbnz	r0, 80070ac <__ssputs_r+0x5c>
 8007096:	230c      	movs	r3, #12
 8007098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800709c:	f8ca 3000 	str.w	r3, [sl]
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	463a      	mov	r2, r7
 80070ae:	6921      	ldr	r1, [r4, #16]
 80070b0:	f000 febb 	bl	8007e2a <memcpy>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	6126      	str	r6, [r4, #16]
 80070c2:	443e      	add	r6, r7
 80070c4:	6026      	str	r6, [r4, #0]
 80070c6:	464e      	mov	r6, r9
 80070c8:	6165      	str	r5, [r4, #20]
 80070ca:	1bed      	subs	r5, r5, r7
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	454e      	cmp	r6, r9
 80070d0:	d900      	bls.n	80070d4 <__ssputs_r+0x84>
 80070d2:	464e      	mov	r6, r9
 80070d4:	4632      	mov	r2, r6
 80070d6:	4641      	mov	r1, r8
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	f000 feb1 	bl	8007e40 <memmove>
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	2000      	movs	r0, #0
 80070e2:	1b9b      	subs	r3, r3, r6
 80070e4:	60a3      	str	r3, [r4, #8]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	441e      	add	r6, r3
 80070ea:	6026      	str	r6, [r4, #0]
 80070ec:	e7dc      	b.n	80070a8 <__ssputs_r+0x58>
 80070ee:	462a      	mov	r2, r5
 80070f0:	f000 febf 	bl	8007e72 <_realloc_r>
 80070f4:	4606      	mov	r6, r0
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d1e2      	bne.n	80070c0 <__ssputs_r+0x70>
 80070fa:	6921      	ldr	r1, [r4, #16]
 80070fc:	4650      	mov	r0, sl
 80070fe:	f7ff fd7f 	bl	8006c00 <_free_r>
 8007102:	e7c8      	b.n	8007096 <__ssputs_r+0x46>

08007104 <_svfiprintf_r>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	461d      	mov	r5, r3
 800710a:	898b      	ldrh	r3, [r1, #12]
 800710c:	b09d      	sub	sp, #116	; 0x74
 800710e:	061f      	lsls	r7, r3, #24
 8007110:	4680      	mov	r8, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4616      	mov	r6, r2
 8007116:	d50f      	bpl.n	8007138 <_svfiprintf_r+0x34>
 8007118:	690b      	ldr	r3, [r1, #16]
 800711a:	b96b      	cbnz	r3, 8007138 <_svfiprintf_r+0x34>
 800711c:	2140      	movs	r1, #64	; 0x40
 800711e:	f7ff fdbb 	bl	8006c98 <_malloc_r>
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	6120      	str	r0, [r4, #16]
 8007126:	b928      	cbnz	r0, 8007134 <_svfiprintf_r+0x30>
 8007128:	230c      	movs	r3, #12
 800712a:	f8c8 3000 	str.w	r3, [r8]
 800712e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007132:	e0c8      	b.n	80072c6 <_svfiprintf_r+0x1c2>
 8007134:	2340      	movs	r3, #64	; 0x40
 8007136:	6163      	str	r3, [r4, #20]
 8007138:	2300      	movs	r3, #0
 800713a:	9309      	str	r3, [sp, #36]	; 0x24
 800713c:	2320      	movs	r3, #32
 800713e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007142:	2330      	movs	r3, #48	; 0x30
 8007144:	f04f 0b01 	mov.w	fp, #1
 8007148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800714c:	9503      	str	r5, [sp, #12]
 800714e:	4637      	mov	r7, r6
 8007150:	463d      	mov	r5, r7
 8007152:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007156:	b10b      	cbz	r3, 800715c <_svfiprintf_r+0x58>
 8007158:	2b25      	cmp	r3, #37	; 0x25
 800715a:	d13e      	bne.n	80071da <_svfiprintf_r+0xd6>
 800715c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007160:	d00b      	beq.n	800717a <_svfiprintf_r+0x76>
 8007162:	4653      	mov	r3, sl
 8007164:	4632      	mov	r2, r6
 8007166:	4621      	mov	r1, r4
 8007168:	4640      	mov	r0, r8
 800716a:	f7ff ff71 	bl	8007050 <__ssputs_r>
 800716e:	3001      	adds	r0, #1
 8007170:	f000 80a4 	beq.w	80072bc <_svfiprintf_r+0x1b8>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	4453      	add	r3, sl
 8007178:	9309      	str	r3, [sp, #36]	; 0x24
 800717a:	783b      	ldrb	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 809d 	beq.w	80072bc <_svfiprintf_r+0x1b8>
 8007182:	2300      	movs	r3, #0
 8007184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007194:	931a      	str	r3, [sp, #104]	; 0x68
 8007196:	462f      	mov	r7, r5
 8007198:	2205      	movs	r2, #5
 800719a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800719e:	4850      	ldr	r0, [pc, #320]	; (80072e0 <_svfiprintf_r+0x1dc>)
 80071a0:	f000 fe35 	bl	8007e0e <memchr>
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	b9d0      	cbnz	r0, 80071de <_svfiprintf_r+0xda>
 80071a8:	06d9      	lsls	r1, r3, #27
 80071aa:	bf44      	itt	mi
 80071ac:	2220      	movmi	r2, #32
 80071ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071b2:	071a      	lsls	r2, r3, #28
 80071b4:	bf44      	itt	mi
 80071b6:	222b      	movmi	r2, #43	; 0x2b
 80071b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071bc:	782a      	ldrb	r2, [r5, #0]
 80071be:	2a2a      	cmp	r2, #42	; 0x2a
 80071c0:	d015      	beq.n	80071ee <_svfiprintf_r+0xea>
 80071c2:	462f      	mov	r7, r5
 80071c4:	2000      	movs	r0, #0
 80071c6:	250a      	movs	r5, #10
 80071c8:	9a07      	ldr	r2, [sp, #28]
 80071ca:	4639      	mov	r1, r7
 80071cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d0:	3b30      	subs	r3, #48	; 0x30
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d94d      	bls.n	8007272 <_svfiprintf_r+0x16e>
 80071d6:	b1b8      	cbz	r0, 8007208 <_svfiprintf_r+0x104>
 80071d8:	e00f      	b.n	80071fa <_svfiprintf_r+0xf6>
 80071da:	462f      	mov	r7, r5
 80071dc:	e7b8      	b.n	8007150 <_svfiprintf_r+0x4c>
 80071de:	4a40      	ldr	r2, [pc, #256]	; (80072e0 <_svfiprintf_r+0x1dc>)
 80071e0:	463d      	mov	r5, r7
 80071e2:	1a80      	subs	r0, r0, r2
 80071e4:	fa0b f000 	lsl.w	r0, fp, r0
 80071e8:	4318      	orrs	r0, r3
 80071ea:	9004      	str	r0, [sp, #16]
 80071ec:	e7d3      	b.n	8007196 <_svfiprintf_r+0x92>
 80071ee:	9a03      	ldr	r2, [sp, #12]
 80071f0:	1d11      	adds	r1, r2, #4
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	9103      	str	r1, [sp, #12]
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	db01      	blt.n	80071fe <_svfiprintf_r+0xfa>
 80071fa:	9207      	str	r2, [sp, #28]
 80071fc:	e004      	b.n	8007208 <_svfiprintf_r+0x104>
 80071fe:	4252      	negs	r2, r2
 8007200:	f043 0302 	orr.w	r3, r3, #2
 8007204:	9207      	str	r2, [sp, #28]
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	783b      	ldrb	r3, [r7, #0]
 800720a:	2b2e      	cmp	r3, #46	; 0x2e
 800720c:	d10c      	bne.n	8007228 <_svfiprintf_r+0x124>
 800720e:	787b      	ldrb	r3, [r7, #1]
 8007210:	2b2a      	cmp	r3, #42	; 0x2a
 8007212:	d133      	bne.n	800727c <_svfiprintf_r+0x178>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	3702      	adds	r7, #2
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	9203      	str	r2, [sp, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	bfb8      	it	lt
 8007222:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007226:	9305      	str	r3, [sp, #20]
 8007228:	4d2e      	ldr	r5, [pc, #184]	; (80072e4 <_svfiprintf_r+0x1e0>)
 800722a:	2203      	movs	r2, #3
 800722c:	7839      	ldrb	r1, [r7, #0]
 800722e:	4628      	mov	r0, r5
 8007230:	f000 fded 	bl	8007e0e <memchr>
 8007234:	b138      	cbz	r0, 8007246 <_svfiprintf_r+0x142>
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	1b40      	subs	r0, r0, r5
 800723a:	fa03 f000 	lsl.w	r0, r3, r0
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	3701      	adds	r7, #1
 8007242:	4303      	orrs	r3, r0
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	7839      	ldrb	r1, [r7, #0]
 8007248:	2206      	movs	r2, #6
 800724a:	4827      	ldr	r0, [pc, #156]	; (80072e8 <_svfiprintf_r+0x1e4>)
 800724c:	1c7e      	adds	r6, r7, #1
 800724e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007252:	f000 fddc 	bl	8007e0e <memchr>
 8007256:	2800      	cmp	r0, #0
 8007258:	d038      	beq.n	80072cc <_svfiprintf_r+0x1c8>
 800725a:	4b24      	ldr	r3, [pc, #144]	; (80072ec <_svfiprintf_r+0x1e8>)
 800725c:	bb13      	cbnz	r3, 80072a4 <_svfiprintf_r+0x1a0>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	3307      	adds	r3, #7
 8007262:	f023 0307 	bic.w	r3, r3, #7
 8007266:	3308      	adds	r3, #8
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726c:	444b      	add	r3, r9
 800726e:	9309      	str	r3, [sp, #36]	; 0x24
 8007270:	e76d      	b.n	800714e <_svfiprintf_r+0x4a>
 8007272:	fb05 3202 	mla	r2, r5, r2, r3
 8007276:	2001      	movs	r0, #1
 8007278:	460f      	mov	r7, r1
 800727a:	e7a6      	b.n	80071ca <_svfiprintf_r+0xc6>
 800727c:	2300      	movs	r3, #0
 800727e:	250a      	movs	r5, #10
 8007280:	4619      	mov	r1, r3
 8007282:	3701      	adds	r7, #1
 8007284:	9305      	str	r3, [sp, #20]
 8007286:	4638      	mov	r0, r7
 8007288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728c:	3a30      	subs	r2, #48	; 0x30
 800728e:	2a09      	cmp	r2, #9
 8007290:	d903      	bls.n	800729a <_svfiprintf_r+0x196>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c8      	beq.n	8007228 <_svfiprintf_r+0x124>
 8007296:	9105      	str	r1, [sp, #20]
 8007298:	e7c6      	b.n	8007228 <_svfiprintf_r+0x124>
 800729a:	fb05 2101 	mla	r1, r5, r1, r2
 800729e:	2301      	movs	r3, #1
 80072a0:	4607      	mov	r7, r0
 80072a2:	e7f0      	b.n	8007286 <_svfiprintf_r+0x182>
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4622      	mov	r2, r4
 80072aa:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <_svfiprintf_r+0x1ec>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	4640      	mov	r0, r8
 80072b0:	f3af 8000 	nop.w
 80072b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80072b8:	4681      	mov	r9, r0
 80072ba:	d1d6      	bne.n	800726a <_svfiprintf_r+0x166>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	065b      	lsls	r3, r3, #25
 80072c0:	f53f af35 	bmi.w	800712e <_svfiprintf_r+0x2a>
 80072c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c6:	b01d      	add	sp, #116	; 0x74
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	ab03      	add	r3, sp, #12
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4622      	mov	r2, r4
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <_svfiprintf_r+0x1ec>)
 80072d4:	a904      	add	r1, sp, #16
 80072d6:	4640      	mov	r0, r8
 80072d8:	f000 fa2c 	bl	8007734 <_printf_i>
 80072dc:	e7ea      	b.n	80072b4 <_svfiprintf_r+0x1b0>
 80072de:	bf00      	nop
 80072e0:	080081de 	.word	0x080081de
 80072e4:	080081e4 	.word	0x080081e4
 80072e8:	080081e8 	.word	0x080081e8
 80072ec:	00000000 	.word	0x00000000
 80072f0:	08007051 	.word	0x08007051

080072f4 <_sungetc_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	1c4b      	adds	r3, r1, #1
 80072f8:	4614      	mov	r4, r2
 80072fa:	d103      	bne.n	8007304 <_sungetc_r+0x10>
 80072fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007300:	4628      	mov	r0, r5
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	8993      	ldrh	r3, [r2, #12]
 8007306:	b2cd      	uxtb	r5, r1
 8007308:	f023 0320 	bic.w	r3, r3, #32
 800730c:	8193      	strh	r3, [r2, #12]
 800730e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007310:	6852      	ldr	r2, [r2, #4]
 8007312:	b18b      	cbz	r3, 8007338 <_sungetc_r+0x44>
 8007314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007316:	4293      	cmp	r3, r2
 8007318:	dd08      	ble.n	800732c <_sungetc_r+0x38>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	1e5a      	subs	r2, r3, #1
 800731e:	6022      	str	r2, [r4, #0]
 8007320:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	3301      	adds	r3, #1
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	e7e9      	b.n	8007300 <_sungetc_r+0xc>
 800732c:	4621      	mov	r1, r4
 800732e:	f000 fd29 	bl	8007d84 <__submore>
 8007332:	2800      	cmp	r0, #0
 8007334:	d0f1      	beq.n	800731a <_sungetc_r+0x26>
 8007336:	e7e1      	b.n	80072fc <_sungetc_r+0x8>
 8007338:	6921      	ldr	r1, [r4, #16]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	b151      	cbz	r1, 8007354 <_sungetc_r+0x60>
 800733e:	4299      	cmp	r1, r3
 8007340:	d208      	bcs.n	8007354 <_sungetc_r+0x60>
 8007342:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007346:	42a9      	cmp	r1, r5
 8007348:	d104      	bne.n	8007354 <_sungetc_r+0x60>
 800734a:	3b01      	subs	r3, #1
 800734c:	3201      	adds	r2, #1
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	6062      	str	r2, [r4, #4]
 8007352:	e7d5      	b.n	8007300 <_sungetc_r+0xc>
 8007354:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800735c:	6363      	str	r3, [r4, #52]	; 0x34
 800735e:	2303      	movs	r3, #3
 8007360:	63a3      	str	r3, [r4, #56]	; 0x38
 8007362:	4623      	mov	r3, r4
 8007364:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	2301      	movs	r3, #1
 800736c:	e7dc      	b.n	8007328 <_sungetc_r+0x34>

0800736e <__ssrefill_r>:
 800736e:	b510      	push	{r4, lr}
 8007370:	460c      	mov	r4, r1
 8007372:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007374:	b169      	cbz	r1, 8007392 <__ssrefill_r+0x24>
 8007376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800737a:	4299      	cmp	r1, r3
 800737c:	d001      	beq.n	8007382 <__ssrefill_r+0x14>
 800737e:	f7ff fc3f 	bl	8006c00 <_free_r>
 8007382:	2000      	movs	r0, #0
 8007384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007386:	6360      	str	r0, [r4, #52]	; 0x34
 8007388:	6063      	str	r3, [r4, #4]
 800738a:	b113      	cbz	r3, 8007392 <__ssrefill_r+0x24>
 800738c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	bd10      	pop	{r4, pc}
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	6063      	str	r3, [r4, #4]
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f043 0320 	orr.w	r3, r3, #32
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	e7f3      	b.n	8007390 <__ssrefill_r+0x22>

080073a8 <__ssvfiscanf_r>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	2100      	movs	r1, #0
 80073b0:	4606      	mov	r6, r0
 80073b2:	4692      	mov	sl, r2
 80073b4:	270a      	movs	r7, #10
 80073b6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80073ba:	9144      	str	r1, [sp, #272]	; 0x110
 80073bc:	9145      	str	r1, [sp, #276]	; 0x114
 80073be:	499e      	ldr	r1, [pc, #632]	; (8007638 <__ssvfiscanf_r+0x290>)
 80073c0:	f10d 0804 	add.w	r8, sp, #4
 80073c4:	91a0      	str	r1, [sp, #640]	; 0x280
 80073c6:	499d      	ldr	r1, [pc, #628]	; (800763c <__ssvfiscanf_r+0x294>)
 80073c8:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8007640 <__ssvfiscanf_r+0x298>
 80073cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80073d0:	91a1      	str	r1, [sp, #644]	; 0x284
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	f89a 3000 	ldrb.w	r3, [sl]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 812a 	beq.w	8007632 <__ssvfiscanf_r+0x28a>
 80073de:	4655      	mov	r5, sl
 80073e0:	f7ff fe14 	bl	800700c <__locale_ctype_ptr>
 80073e4:	f815 bb01 	ldrb.w	fp, [r5], #1
 80073e8:	4458      	add	r0, fp
 80073ea:	7843      	ldrb	r3, [r0, #1]
 80073ec:	f013 0308 	ands.w	r3, r3, #8
 80073f0:	d01c      	beq.n	800742c <__ssvfiscanf_r+0x84>
 80073f2:	6863      	ldr	r3, [r4, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd12      	ble.n	800741e <__ssvfiscanf_r+0x76>
 80073f8:	f7ff fe08 	bl	800700c <__locale_ctype_ptr>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	4410      	add	r0, r2
 8007402:	7842      	ldrb	r2, [r0, #1]
 8007404:	0712      	lsls	r2, r2, #28
 8007406:	d401      	bmi.n	800740c <__ssvfiscanf_r+0x64>
 8007408:	46aa      	mov	sl, r5
 800740a:	e7e3      	b.n	80073d4 <__ssvfiscanf_r+0x2c>
 800740c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800740e:	3301      	adds	r3, #1
 8007410:	3201      	adds	r2, #1
 8007412:	9245      	str	r2, [sp, #276]	; 0x114
 8007414:	6862      	ldr	r2, [r4, #4]
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	3a01      	subs	r2, #1
 800741a:	6062      	str	r2, [r4, #4]
 800741c:	e7e9      	b.n	80073f2 <__ssvfiscanf_r+0x4a>
 800741e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007420:	4621      	mov	r1, r4
 8007422:	4630      	mov	r0, r6
 8007424:	4798      	blx	r3
 8007426:	2800      	cmp	r0, #0
 8007428:	d0e6      	beq.n	80073f8 <__ssvfiscanf_r+0x50>
 800742a:	e7ed      	b.n	8007408 <__ssvfiscanf_r+0x60>
 800742c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007430:	f040 8082 	bne.w	8007538 <__ssvfiscanf_r+0x190>
 8007434:	9343      	str	r3, [sp, #268]	; 0x10c
 8007436:	9341      	str	r3, [sp, #260]	; 0x104
 8007438:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800743c:	2b2a      	cmp	r3, #42	; 0x2a
 800743e:	d103      	bne.n	8007448 <__ssvfiscanf_r+0xa0>
 8007440:	2310      	movs	r3, #16
 8007442:	f10a 0502 	add.w	r5, sl, #2
 8007446:	9341      	str	r3, [sp, #260]	; 0x104
 8007448:	46aa      	mov	sl, r5
 800744a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800744e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007452:	2a09      	cmp	r2, #9
 8007454:	d922      	bls.n	800749c <__ssvfiscanf_r+0xf4>
 8007456:	2203      	movs	r2, #3
 8007458:	4879      	ldr	r0, [pc, #484]	; (8007640 <__ssvfiscanf_r+0x298>)
 800745a:	f000 fcd8 	bl	8007e0e <memchr>
 800745e:	b138      	cbz	r0, 8007470 <__ssvfiscanf_r+0xc8>
 8007460:	eba0 0309 	sub.w	r3, r0, r9
 8007464:	2001      	movs	r0, #1
 8007466:	46aa      	mov	sl, r5
 8007468:	4098      	lsls	r0, r3
 800746a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800746c:	4318      	orrs	r0, r3
 800746e:	9041      	str	r0, [sp, #260]	; 0x104
 8007470:	f89a 3000 	ldrb.w	r3, [sl]
 8007474:	f10a 0501 	add.w	r5, sl, #1
 8007478:	2b67      	cmp	r3, #103	; 0x67
 800747a:	d82b      	bhi.n	80074d4 <__ssvfiscanf_r+0x12c>
 800747c:	2b65      	cmp	r3, #101	; 0x65
 800747e:	f080 809f 	bcs.w	80075c0 <__ssvfiscanf_r+0x218>
 8007482:	2b47      	cmp	r3, #71	; 0x47
 8007484:	d810      	bhi.n	80074a8 <__ssvfiscanf_r+0x100>
 8007486:	2b45      	cmp	r3, #69	; 0x45
 8007488:	f080 809a 	bcs.w	80075c0 <__ssvfiscanf_r+0x218>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d06c      	beq.n	800756a <__ssvfiscanf_r+0x1c2>
 8007490:	2b25      	cmp	r3, #37	; 0x25
 8007492:	d051      	beq.n	8007538 <__ssvfiscanf_r+0x190>
 8007494:	2303      	movs	r3, #3
 8007496:	9742      	str	r7, [sp, #264]	; 0x108
 8007498:	9347      	str	r3, [sp, #284]	; 0x11c
 800749a:	e027      	b.n	80074ec <__ssvfiscanf_r+0x144>
 800749c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800749e:	fb07 1303 	mla	r3, r7, r3, r1
 80074a2:	3b30      	subs	r3, #48	; 0x30
 80074a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80074a6:	e7cf      	b.n	8007448 <__ssvfiscanf_r+0xa0>
 80074a8:	2b5b      	cmp	r3, #91	; 0x5b
 80074aa:	d06a      	beq.n	8007582 <__ssvfiscanf_r+0x1da>
 80074ac:	d80c      	bhi.n	80074c8 <__ssvfiscanf_r+0x120>
 80074ae:	2b58      	cmp	r3, #88	; 0x58
 80074b0:	d1f0      	bne.n	8007494 <__ssvfiscanf_r+0xec>
 80074b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b8:	9241      	str	r2, [sp, #260]	; 0x104
 80074ba:	2210      	movs	r2, #16
 80074bc:	9242      	str	r2, [sp, #264]	; 0x108
 80074be:	2b6e      	cmp	r3, #110	; 0x6e
 80074c0:	bf8c      	ite	hi
 80074c2:	2304      	movhi	r3, #4
 80074c4:	2303      	movls	r3, #3
 80074c6:	e010      	b.n	80074ea <__ssvfiscanf_r+0x142>
 80074c8:	2b63      	cmp	r3, #99	; 0x63
 80074ca:	d065      	beq.n	8007598 <__ssvfiscanf_r+0x1f0>
 80074cc:	2b64      	cmp	r3, #100	; 0x64
 80074ce:	d1e1      	bne.n	8007494 <__ssvfiscanf_r+0xec>
 80074d0:	9742      	str	r7, [sp, #264]	; 0x108
 80074d2:	e7f4      	b.n	80074be <__ssvfiscanf_r+0x116>
 80074d4:	2b70      	cmp	r3, #112	; 0x70
 80074d6:	d04b      	beq.n	8007570 <__ssvfiscanf_r+0x1c8>
 80074d8:	d826      	bhi.n	8007528 <__ssvfiscanf_r+0x180>
 80074da:	2b6e      	cmp	r3, #110	; 0x6e
 80074dc:	d062      	beq.n	80075a4 <__ssvfiscanf_r+0x1fc>
 80074de:	d84c      	bhi.n	800757a <__ssvfiscanf_r+0x1d2>
 80074e0:	2b69      	cmp	r3, #105	; 0x69
 80074e2:	d1d7      	bne.n	8007494 <__ssvfiscanf_r+0xec>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9342      	str	r3, [sp, #264]	; 0x108
 80074e8:	2303      	movs	r3, #3
 80074ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dd68      	ble.n	80075c4 <__ssvfiscanf_r+0x21c>
 80074f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074f4:	0659      	lsls	r1, r3, #25
 80074f6:	d407      	bmi.n	8007508 <__ssvfiscanf_r+0x160>
 80074f8:	f7ff fd88 	bl	800700c <__locale_ctype_ptr>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	4410      	add	r0, r2
 8007502:	7842      	ldrb	r2, [r0, #1]
 8007504:	0712      	lsls	r2, r2, #28
 8007506:	d464      	bmi.n	80075d2 <__ssvfiscanf_r+0x22a>
 8007508:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800750a:	2b02      	cmp	r3, #2
 800750c:	dc73      	bgt.n	80075f6 <__ssvfiscanf_r+0x24e>
 800750e:	466b      	mov	r3, sp
 8007510:	4622      	mov	r2, r4
 8007512:	a941      	add	r1, sp, #260	; 0x104
 8007514:	4630      	mov	r0, r6
 8007516:	f000 fa1f 	bl	8007958 <_scanf_chars>
 800751a:	2801      	cmp	r0, #1
 800751c:	f000 8089 	beq.w	8007632 <__ssvfiscanf_r+0x28a>
 8007520:	2802      	cmp	r0, #2
 8007522:	f47f af71 	bne.w	8007408 <__ssvfiscanf_r+0x60>
 8007526:	e01d      	b.n	8007564 <__ssvfiscanf_r+0x1bc>
 8007528:	2b75      	cmp	r3, #117	; 0x75
 800752a:	d0d1      	beq.n	80074d0 <__ssvfiscanf_r+0x128>
 800752c:	2b78      	cmp	r3, #120	; 0x78
 800752e:	d0c0      	beq.n	80074b2 <__ssvfiscanf_r+0x10a>
 8007530:	2b73      	cmp	r3, #115	; 0x73
 8007532:	d1af      	bne.n	8007494 <__ssvfiscanf_r+0xec>
 8007534:	2302      	movs	r3, #2
 8007536:	e7d8      	b.n	80074ea <__ssvfiscanf_r+0x142>
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	dd0c      	ble.n	8007558 <__ssvfiscanf_r+0x1b0>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	455a      	cmp	r2, fp
 8007544:	d175      	bne.n	8007632 <__ssvfiscanf_r+0x28a>
 8007546:	3301      	adds	r3, #1
 8007548:	6862      	ldr	r2, [r4, #4]
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800754e:	3a01      	subs	r2, #1
 8007550:	3301      	adds	r3, #1
 8007552:	6062      	str	r2, [r4, #4]
 8007554:	9345      	str	r3, [sp, #276]	; 0x114
 8007556:	e757      	b.n	8007408 <__ssvfiscanf_r+0x60>
 8007558:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800755a:	4621      	mov	r1, r4
 800755c:	4630      	mov	r0, r6
 800755e:	4798      	blx	r3
 8007560:	2800      	cmp	r0, #0
 8007562:	d0ec      	beq.n	800753e <__ssvfiscanf_r+0x196>
 8007564:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007566:	2800      	cmp	r0, #0
 8007568:	d159      	bne.n	800761e <__ssvfiscanf_r+0x276>
 800756a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800756e:	e05c      	b.n	800762a <__ssvfiscanf_r+0x282>
 8007570:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007572:	f042 0220 	orr.w	r2, r2, #32
 8007576:	9241      	str	r2, [sp, #260]	; 0x104
 8007578:	e79b      	b.n	80074b2 <__ssvfiscanf_r+0x10a>
 800757a:	2308      	movs	r3, #8
 800757c:	9342      	str	r3, [sp, #264]	; 0x108
 800757e:	2304      	movs	r3, #4
 8007580:	e7b3      	b.n	80074ea <__ssvfiscanf_r+0x142>
 8007582:	4629      	mov	r1, r5
 8007584:	4640      	mov	r0, r8
 8007586:	f000 fb3f 	bl	8007c08 <__sccl>
 800758a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800758c:	4605      	mov	r5, r0
 800758e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007592:	9341      	str	r3, [sp, #260]	; 0x104
 8007594:	2301      	movs	r3, #1
 8007596:	e7a8      	b.n	80074ea <__ssvfiscanf_r+0x142>
 8007598:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759e:	9341      	str	r3, [sp, #260]	; 0x104
 80075a0:	2300      	movs	r3, #0
 80075a2:	e7a2      	b.n	80074ea <__ssvfiscanf_r+0x142>
 80075a4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80075a6:	06c3      	lsls	r3, r0, #27
 80075a8:	f53f af2e 	bmi.w	8007408 <__ssvfiscanf_r+0x60>
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075b0:	1d19      	adds	r1, r3, #4
 80075b2:	9100      	str	r1, [sp, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	07c0      	lsls	r0, r0, #31
 80075b8:	bf4c      	ite	mi
 80075ba:	801a      	strhmi	r2, [r3, #0]
 80075bc:	601a      	strpl	r2, [r3, #0]
 80075be:	e723      	b.n	8007408 <__ssvfiscanf_r+0x60>
 80075c0:	2305      	movs	r3, #5
 80075c2:	e792      	b.n	80074ea <__ssvfiscanf_r+0x142>
 80075c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075c6:	4621      	mov	r1, r4
 80075c8:	4630      	mov	r0, r6
 80075ca:	4798      	blx	r3
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d090      	beq.n	80074f2 <__ssvfiscanf_r+0x14a>
 80075d0:	e7c8      	b.n	8007564 <__ssvfiscanf_r+0x1bc>
 80075d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075d4:	3201      	adds	r2, #1
 80075d6:	9245      	str	r2, [sp, #276]	; 0x114
 80075d8:	6862      	ldr	r2, [r4, #4]
 80075da:	3a01      	subs	r2, #1
 80075dc:	2a00      	cmp	r2, #0
 80075de:	6062      	str	r2, [r4, #4]
 80075e0:	dd02      	ble.n	80075e8 <__ssvfiscanf_r+0x240>
 80075e2:	3301      	adds	r3, #1
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	e787      	b.n	80074f8 <__ssvfiscanf_r+0x150>
 80075e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075ea:	4621      	mov	r1, r4
 80075ec:	4630      	mov	r0, r6
 80075ee:	4798      	blx	r3
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d081      	beq.n	80074f8 <__ssvfiscanf_r+0x150>
 80075f4:	e7b6      	b.n	8007564 <__ssvfiscanf_r+0x1bc>
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	dc06      	bgt.n	8007608 <__ssvfiscanf_r+0x260>
 80075fa:	466b      	mov	r3, sp
 80075fc:	4622      	mov	r2, r4
 80075fe:	a941      	add	r1, sp, #260	; 0x104
 8007600:	4630      	mov	r0, r6
 8007602:	f000 fa0b 	bl	8007a1c <_scanf_i>
 8007606:	e788      	b.n	800751a <__ssvfiscanf_r+0x172>
 8007608:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <__ssvfiscanf_r+0x29c>)
 800760a:	2b00      	cmp	r3, #0
 800760c:	f43f aefc 	beq.w	8007408 <__ssvfiscanf_r+0x60>
 8007610:	466b      	mov	r3, sp
 8007612:	4622      	mov	r2, r4
 8007614:	a941      	add	r1, sp, #260	; 0x104
 8007616:	4630      	mov	r0, r6
 8007618:	f3af 8000 	nop.w
 800761c:	e77d      	b.n	800751a <__ssvfiscanf_r+0x172>
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007624:	bf18      	it	ne
 8007626:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800762a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007634:	e7f9      	b.n	800762a <__ssvfiscanf_r+0x282>
 8007636:	bf00      	nop
 8007638:	080072f5 	.word	0x080072f5
 800763c:	0800736f 	.word	0x0800736f
 8007640:	080081e4 	.word	0x080081e4
 8007644:	00000000 	.word	0x00000000

08007648 <_printf_common>:
 8007648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764c:	4691      	mov	r9, r2
 800764e:	461f      	mov	r7, r3
 8007650:	688a      	ldr	r2, [r1, #8]
 8007652:	690b      	ldr	r3, [r1, #16]
 8007654:	4606      	mov	r6, r0
 8007656:	4293      	cmp	r3, r2
 8007658:	bfb8      	it	lt
 800765a:	4613      	movlt	r3, r2
 800765c:	f8c9 3000 	str.w	r3, [r9]
 8007660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007664:	460c      	mov	r4, r1
 8007666:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800766a:	b112      	cbz	r2, 8007672 <_printf_common+0x2a>
 800766c:	3301      	adds	r3, #1
 800766e:	f8c9 3000 	str.w	r3, [r9]
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	0699      	lsls	r1, r3, #26
 8007676:	bf42      	ittt	mi
 8007678:	f8d9 3000 	ldrmi.w	r3, [r9]
 800767c:	3302      	addmi	r3, #2
 800767e:	f8c9 3000 	strmi.w	r3, [r9]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d107      	bne.n	800769a <_printf_common+0x52>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	f8d9 2000 	ldr.w	r2, [r9]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	42ab      	cmp	r3, r5
 8007698:	dc29      	bgt.n	80076ee <_printf_common+0xa6>
 800769a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	3300      	adds	r3, #0
 80076a2:	bf18      	it	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	0692      	lsls	r2, r2, #26
 80076a8:	d42e      	bmi.n	8007708 <_printf_common+0xc0>
 80076aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ae:	4639      	mov	r1, r7
 80076b0:	4630      	mov	r0, r6
 80076b2:	47c0      	blx	r8
 80076b4:	3001      	adds	r0, #1
 80076b6:	d021      	beq.n	80076fc <_printf_common+0xb4>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	68e5      	ldr	r5, [r4, #12]
 80076bc:	f003 0306 	and.w	r3, r3, #6
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	bf18      	it	ne
 80076c4:	2500      	movne	r5, #0
 80076c6:	f8d9 2000 	ldr.w	r2, [r9]
 80076ca:	f04f 0900 	mov.w	r9, #0
 80076ce:	bf08      	it	eq
 80076d0:	1aad      	subeq	r5, r5, r2
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	6922      	ldr	r2, [r4, #16]
 80076d6:	bf08      	it	eq
 80076d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076dc:	4293      	cmp	r3, r2
 80076de:	bfc4      	itt	gt
 80076e0:	1a9b      	subgt	r3, r3, r2
 80076e2:	18ed      	addgt	r5, r5, r3
 80076e4:	341a      	adds	r4, #26
 80076e6:	454d      	cmp	r5, r9
 80076e8:	d11a      	bne.n	8007720 <_printf_common+0xd8>
 80076ea:	2000      	movs	r0, #0
 80076ec:	e008      	b.n	8007700 <_printf_common+0xb8>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4652      	mov	r2, sl
 80076f2:	4639      	mov	r1, r7
 80076f4:	4630      	mov	r0, r6
 80076f6:	47c0      	blx	r8
 80076f8:	3001      	adds	r0, #1
 80076fa:	d103      	bne.n	8007704 <_printf_common+0xbc>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007704:	3501      	adds	r5, #1
 8007706:	e7c2      	b.n	800768e <_printf_common+0x46>
 8007708:	2030      	movs	r0, #48	; 0x30
 800770a:	18e1      	adds	r1, r4, r3
 800770c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007716:	4422      	add	r2, r4
 8007718:	3302      	adds	r3, #2
 800771a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800771e:	e7c4      	b.n	80076aa <_printf_common+0x62>
 8007720:	2301      	movs	r3, #1
 8007722:	4622      	mov	r2, r4
 8007724:	4639      	mov	r1, r7
 8007726:	4630      	mov	r0, r6
 8007728:	47c0      	blx	r8
 800772a:	3001      	adds	r0, #1
 800772c:	d0e6      	beq.n	80076fc <_printf_common+0xb4>
 800772e:	f109 0901 	add.w	r9, r9, #1
 8007732:	e7d8      	b.n	80076e6 <_printf_common+0x9e>

08007734 <_printf_i>:
 8007734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007738:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800773c:	460c      	mov	r4, r1
 800773e:	7e09      	ldrb	r1, [r1, #24]
 8007740:	b085      	sub	sp, #20
 8007742:	296e      	cmp	r1, #110	; 0x6e
 8007744:	4617      	mov	r7, r2
 8007746:	4606      	mov	r6, r0
 8007748:	4698      	mov	r8, r3
 800774a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774c:	f000 80b3 	beq.w	80078b6 <_printf_i+0x182>
 8007750:	d822      	bhi.n	8007798 <_printf_i+0x64>
 8007752:	2963      	cmp	r1, #99	; 0x63
 8007754:	d036      	beq.n	80077c4 <_printf_i+0x90>
 8007756:	d80a      	bhi.n	800776e <_printf_i+0x3a>
 8007758:	2900      	cmp	r1, #0
 800775a:	f000 80b9 	beq.w	80078d0 <_printf_i+0x19c>
 800775e:	2958      	cmp	r1, #88	; 0x58
 8007760:	f000 8083 	beq.w	800786a <_printf_i+0x136>
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800776c:	e032      	b.n	80077d4 <_printf_i+0xa0>
 800776e:	2964      	cmp	r1, #100	; 0x64
 8007770:	d001      	beq.n	8007776 <_printf_i+0x42>
 8007772:	2969      	cmp	r1, #105	; 0x69
 8007774:	d1f6      	bne.n	8007764 <_printf_i+0x30>
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	6813      	ldr	r3, [r2, #0]
 800777a:	0605      	lsls	r5, r0, #24
 800777c:	f103 0104 	add.w	r1, r3, #4
 8007780:	d52a      	bpl.n	80077d8 <_printf_i+0xa4>
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da03      	bge.n	8007792 <_printf_i+0x5e>
 800778a:	222d      	movs	r2, #45	; 0x2d
 800778c:	425b      	negs	r3, r3
 800778e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007792:	486f      	ldr	r0, [pc, #444]	; (8007950 <_printf_i+0x21c>)
 8007794:	220a      	movs	r2, #10
 8007796:	e039      	b.n	800780c <_printf_i+0xd8>
 8007798:	2973      	cmp	r1, #115	; 0x73
 800779a:	f000 809d 	beq.w	80078d8 <_printf_i+0x1a4>
 800779e:	d808      	bhi.n	80077b2 <_printf_i+0x7e>
 80077a0:	296f      	cmp	r1, #111	; 0x6f
 80077a2:	d020      	beq.n	80077e6 <_printf_i+0xb2>
 80077a4:	2970      	cmp	r1, #112	; 0x70
 80077a6:	d1dd      	bne.n	8007764 <_printf_i+0x30>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	f043 0320 	orr.w	r3, r3, #32
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	e003      	b.n	80077ba <_printf_i+0x86>
 80077b2:	2975      	cmp	r1, #117	; 0x75
 80077b4:	d017      	beq.n	80077e6 <_printf_i+0xb2>
 80077b6:	2978      	cmp	r1, #120	; 0x78
 80077b8:	d1d4      	bne.n	8007764 <_printf_i+0x30>
 80077ba:	2378      	movs	r3, #120	; 0x78
 80077bc:	4865      	ldr	r0, [pc, #404]	; (8007954 <_printf_i+0x220>)
 80077be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077c2:	e055      	b.n	8007870 <_printf_i+0x13c>
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ca:	1d19      	adds	r1, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6011      	str	r1, [r2, #0]
 80077d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d4:	2301      	movs	r3, #1
 80077d6:	e08c      	b.n	80078f2 <_printf_i+0x1be>
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077de:	6011      	str	r1, [r2, #0]
 80077e0:	bf18      	it	ne
 80077e2:	b21b      	sxthne	r3, r3
 80077e4:	e7cf      	b.n	8007786 <_printf_i+0x52>
 80077e6:	6813      	ldr	r3, [r2, #0]
 80077e8:	6825      	ldr	r5, [r4, #0]
 80077ea:	1d18      	adds	r0, r3, #4
 80077ec:	6010      	str	r0, [r2, #0]
 80077ee:	0628      	lsls	r0, r5, #24
 80077f0:	d501      	bpl.n	80077f6 <_printf_i+0xc2>
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	e002      	b.n	80077fc <_printf_i+0xc8>
 80077f6:	0668      	lsls	r0, r5, #25
 80077f8:	d5fb      	bpl.n	80077f2 <_printf_i+0xbe>
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	296f      	cmp	r1, #111	; 0x6f
 80077fe:	bf14      	ite	ne
 8007800:	220a      	movne	r2, #10
 8007802:	2208      	moveq	r2, #8
 8007804:	4852      	ldr	r0, [pc, #328]	; (8007950 <_printf_i+0x21c>)
 8007806:	2100      	movs	r1, #0
 8007808:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800780c:	6865      	ldr	r5, [r4, #4]
 800780e:	2d00      	cmp	r5, #0
 8007810:	60a5      	str	r5, [r4, #8]
 8007812:	f2c0 8095 	blt.w	8007940 <_printf_i+0x20c>
 8007816:	6821      	ldr	r1, [r4, #0]
 8007818:	f021 0104 	bic.w	r1, r1, #4
 800781c:	6021      	str	r1, [r4, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d13d      	bne.n	800789e <_printf_i+0x16a>
 8007822:	2d00      	cmp	r5, #0
 8007824:	f040 808e 	bne.w	8007944 <_printf_i+0x210>
 8007828:	4665      	mov	r5, ip
 800782a:	2a08      	cmp	r2, #8
 800782c:	d10b      	bne.n	8007846 <_printf_i+0x112>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	07db      	lsls	r3, r3, #31
 8007832:	d508      	bpl.n	8007846 <_printf_i+0x112>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6862      	ldr	r2, [r4, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	bfde      	ittt	le
 800783c:	2330      	movle	r3, #48	; 0x30
 800783e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007842:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007846:	ebac 0305 	sub.w	r3, ip, r5
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	f8cd 8000 	str.w	r8, [sp]
 8007850:	463b      	mov	r3, r7
 8007852:	aa03      	add	r2, sp, #12
 8007854:	4621      	mov	r1, r4
 8007856:	4630      	mov	r0, r6
 8007858:	f7ff fef6 	bl	8007648 <_printf_common>
 800785c:	3001      	adds	r0, #1
 800785e:	d14d      	bne.n	80078fc <_printf_i+0x1c8>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007864:	b005      	add	sp, #20
 8007866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800786a:	4839      	ldr	r0, [pc, #228]	; (8007950 <_printf_i+0x21c>)
 800786c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	6821      	ldr	r1, [r4, #0]
 8007874:	1d1d      	adds	r5, r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6015      	str	r5, [r2, #0]
 800787a:	060a      	lsls	r2, r1, #24
 800787c:	d50b      	bpl.n	8007896 <_printf_i+0x162>
 800787e:	07ca      	lsls	r2, r1, #31
 8007880:	bf44      	itt	mi
 8007882:	f041 0120 	orrmi.w	r1, r1, #32
 8007886:	6021      	strmi	r1, [r4, #0]
 8007888:	b91b      	cbnz	r3, 8007892 <_printf_i+0x15e>
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	f022 0220 	bic.w	r2, r2, #32
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	e7b7      	b.n	8007806 <_printf_i+0xd2>
 8007896:	064d      	lsls	r5, r1, #25
 8007898:	bf48      	it	mi
 800789a:	b29b      	uxthmi	r3, r3
 800789c:	e7ef      	b.n	800787e <_printf_i+0x14a>
 800789e:	4665      	mov	r5, ip
 80078a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80078a4:	fb02 3311 	mls	r3, r2, r1, r3
 80078a8:	5cc3      	ldrb	r3, [r0, r3]
 80078aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80078ae:	460b      	mov	r3, r1
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d1f5      	bne.n	80078a0 <_printf_i+0x16c>
 80078b4:	e7b9      	b.n	800782a <_printf_i+0xf6>
 80078b6:	6813      	ldr	r3, [r2, #0]
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	1d18      	adds	r0, r3, #4
 80078bc:	6961      	ldr	r1, [r4, #20]
 80078be:	6010      	str	r0, [r2, #0]
 80078c0:	0628      	lsls	r0, r5, #24
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	d501      	bpl.n	80078ca <_printf_i+0x196>
 80078c6:	6019      	str	r1, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <_printf_i+0x19c>
 80078ca:	066a      	lsls	r2, r5, #25
 80078cc:	d5fb      	bpl.n	80078c6 <_printf_i+0x192>
 80078ce:	8019      	strh	r1, [r3, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	4665      	mov	r5, ip
 80078d4:	6123      	str	r3, [r4, #16]
 80078d6:	e7b9      	b.n	800784c <_printf_i+0x118>
 80078d8:	6813      	ldr	r3, [r2, #0]
 80078da:	1d19      	adds	r1, r3, #4
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	681d      	ldr	r5, [r3, #0]
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	2100      	movs	r1, #0
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 fa92 	bl	8007e0e <memchr>
 80078ea:	b108      	cbz	r0, 80078f0 <_printf_i+0x1bc>
 80078ec:	1b40      	subs	r0, r0, r5
 80078ee:	6060      	str	r0, [r4, #4]
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fa:	e7a7      	b.n	800784c <_printf_i+0x118>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	462a      	mov	r2, r5
 8007900:	4639      	mov	r1, r7
 8007902:	4630      	mov	r0, r6
 8007904:	47c0      	blx	r8
 8007906:	3001      	adds	r0, #1
 8007908:	d0aa      	beq.n	8007860 <_printf_i+0x12c>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d413      	bmi.n	8007938 <_printf_i+0x204>
 8007910:	68e0      	ldr	r0, [r4, #12]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	4298      	cmp	r0, r3
 8007916:	bfb8      	it	lt
 8007918:	4618      	movlt	r0, r3
 800791a:	e7a3      	b.n	8007864 <_printf_i+0x130>
 800791c:	2301      	movs	r3, #1
 800791e:	464a      	mov	r2, r9
 8007920:	4639      	mov	r1, r7
 8007922:	4630      	mov	r0, r6
 8007924:	47c0      	blx	r8
 8007926:	3001      	adds	r0, #1
 8007928:	d09a      	beq.n	8007860 <_printf_i+0x12c>
 800792a:	3501      	adds	r5, #1
 800792c:	68e3      	ldr	r3, [r4, #12]
 800792e:	9a03      	ldr	r2, [sp, #12]
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	42ab      	cmp	r3, r5
 8007934:	dcf2      	bgt.n	800791c <_printf_i+0x1e8>
 8007936:	e7eb      	b.n	8007910 <_printf_i+0x1dc>
 8007938:	2500      	movs	r5, #0
 800793a:	f104 0919 	add.w	r9, r4, #25
 800793e:	e7f5      	b.n	800792c <_printf_i+0x1f8>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1ac      	bne.n	800789e <_printf_i+0x16a>
 8007944:	7803      	ldrb	r3, [r0, #0]
 8007946:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800794a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800794e:	e76c      	b.n	800782a <_printf_i+0xf6>
 8007950:	080081ef 	.word	0x080081ef
 8007954:	08008200 	.word	0x08008200

08007958 <_scanf_chars>:
 8007958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795c:	4615      	mov	r5, r2
 800795e:	688a      	ldr	r2, [r1, #8]
 8007960:	4680      	mov	r8, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b932      	cbnz	r2, 8007974 <_scanf_chars+0x1c>
 8007966:	698a      	ldr	r2, [r1, #24]
 8007968:	2a00      	cmp	r2, #0
 800796a:	bf14      	ite	ne
 800796c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007970:	2201      	moveq	r2, #1
 8007972:	608a      	str	r2, [r1, #8]
 8007974:	2600      	movs	r6, #0
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	06d1      	lsls	r1, r2, #27
 800797a:	bf5f      	itttt	pl
 800797c:	681a      	ldrpl	r2, [r3, #0]
 800797e:	1d11      	addpl	r1, r2, #4
 8007980:	6019      	strpl	r1, [r3, #0]
 8007982:	6817      	ldrpl	r7, [r2, #0]
 8007984:	69a3      	ldr	r3, [r4, #24]
 8007986:	b1db      	cbz	r3, 80079c0 <_scanf_chars+0x68>
 8007988:	2b01      	cmp	r3, #1
 800798a:	d107      	bne.n	800799c <_scanf_chars+0x44>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	6962      	ldr	r2, [r4, #20]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	5cd3      	ldrb	r3, [r2, r3]
 8007994:	b9a3      	cbnz	r3, 80079c0 <_scanf_chars+0x68>
 8007996:	2e00      	cmp	r6, #0
 8007998:	d131      	bne.n	80079fe <_scanf_chars+0xa6>
 800799a:	e006      	b.n	80079aa <_scanf_chars+0x52>
 800799c:	2b02      	cmp	r3, #2
 800799e:	d007      	beq.n	80079b0 <_scanf_chars+0x58>
 80079a0:	2e00      	cmp	r6, #0
 80079a2:	d12c      	bne.n	80079fe <_scanf_chars+0xa6>
 80079a4:	69a3      	ldr	r3, [r4, #24]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d129      	bne.n	80079fe <_scanf_chars+0xa6>
 80079aa:	2001      	movs	r0, #1
 80079ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b0:	f7ff fb2c 	bl	800700c <__locale_ctype_ptr>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4418      	add	r0, r3
 80079ba:	7843      	ldrb	r3, [r0, #1]
 80079bc:	071b      	lsls	r3, r3, #28
 80079be:	d4ef      	bmi.n	80079a0 <_scanf_chars+0x48>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	3601      	adds	r6, #1
 80079c4:	06da      	lsls	r2, r3, #27
 80079c6:	bf5e      	ittt	pl
 80079c8:	682b      	ldrpl	r3, [r5, #0]
 80079ca:	781b      	ldrbpl	r3, [r3, #0]
 80079cc:	703b      	strbpl	r3, [r7, #0]
 80079ce:	682a      	ldr	r2, [r5, #0]
 80079d0:	686b      	ldr	r3, [r5, #4]
 80079d2:	f102 0201 	add.w	r2, r2, #1
 80079d6:	602a      	str	r2, [r5, #0]
 80079d8:	68a2      	ldr	r2, [r4, #8]
 80079da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80079de:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80079e2:	606b      	str	r3, [r5, #4]
 80079e4:	bf58      	it	pl
 80079e6:	3701      	addpl	r7, #1
 80079e8:	60a2      	str	r2, [r4, #8]
 80079ea:	b142      	cbz	r2, 80079fe <_scanf_chars+0xa6>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dcc9      	bgt.n	8007984 <_scanf_chars+0x2c>
 80079f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079f4:	4629      	mov	r1, r5
 80079f6:	4640      	mov	r0, r8
 80079f8:	4798      	blx	r3
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0c2      	beq.n	8007984 <_scanf_chars+0x2c>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	f013 0310 	ands.w	r3, r3, #16
 8007a04:	d105      	bne.n	8007a12 <_scanf_chars+0xba>
 8007a06:	68e2      	ldr	r2, [r4, #12]
 8007a08:	3201      	adds	r2, #1
 8007a0a:	60e2      	str	r2, [r4, #12]
 8007a0c:	69a2      	ldr	r2, [r4, #24]
 8007a0e:	b102      	cbz	r2, 8007a12 <_scanf_chars+0xba>
 8007a10:	703b      	strb	r3, [r7, #0]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	2000      	movs	r0, #0
 8007a16:	441e      	add	r6, r3
 8007a18:	6126      	str	r6, [r4, #16]
 8007a1a:	e7c7      	b.n	80079ac <_scanf_chars+0x54>

08007a1c <_scanf_i>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	469a      	mov	sl, r3
 8007a24:	4b74      	ldr	r3, [pc, #464]	; (8007bf8 <_scanf_i+0x1dc>)
 8007a26:	b087      	sub	sp, #28
 8007a28:	4683      	mov	fp, r0
 8007a2a:	4616      	mov	r6, r2
 8007a2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a30:	ab03      	add	r3, sp, #12
 8007a32:	68a7      	ldr	r7, [r4, #8]
 8007a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007a38:	4b70      	ldr	r3, [pc, #448]	; (8007bfc <_scanf_i+0x1e0>)
 8007a3a:	69a1      	ldr	r1, [r4, #24]
 8007a3c:	4a70      	ldr	r2, [pc, #448]	; (8007c00 <_scanf_i+0x1e4>)
 8007a3e:	f104 091c 	add.w	r9, r4, #28
 8007a42:	2903      	cmp	r1, #3
 8007a44:	bf08      	it	eq
 8007a46:	461a      	moveq	r2, r3
 8007a48:	1e7b      	subs	r3, r7, #1
 8007a4a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007a4e:	bf84      	itt	hi
 8007a50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a54:	60a3      	strhi	r3, [r4, #8]
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	bf88      	it	hi
 8007a5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a5e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	bf98      	it	ls
 8007a66:	2700      	movls	r7, #0
 8007a68:	464b      	mov	r3, r9
 8007a6a:	f04f 0800 	mov.w	r8, #0
 8007a6e:	9200      	str	r2, [sp, #0]
 8007a70:	bf88      	it	hi
 8007a72:	197f      	addhi	r7, r7, r5
 8007a74:	6831      	ldr	r1, [r6, #0]
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	ab03      	add	r3, sp, #12
 8007a7a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	7809      	ldrb	r1, [r1, #0]
 8007a82:	f000 f9c4 	bl	8007e0e <memchr>
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	b330      	cbz	r0, 8007ad8 <_scanf_i+0xbc>
 8007a8a:	f1b8 0f01 	cmp.w	r8, #1
 8007a8e:	d15a      	bne.n	8007b46 <_scanf_i+0x12a>
 8007a90:	6862      	ldr	r2, [r4, #4]
 8007a92:	b92a      	cbnz	r2, 8007aa0 <_scanf_i+0x84>
 8007a94:	2108      	movs	r1, #8
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	6061      	str	r1, [r4, #4]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	68a2      	ldr	r2, [r4, #8]
 8007aaa:	1e51      	subs	r1, r2, #1
 8007aac:	60a1      	str	r1, [r4, #8]
 8007aae:	b19a      	cbz	r2, 8007ad8 <_scanf_i+0xbc>
 8007ab0:	6832      	ldr	r2, [r6, #0]
 8007ab2:	1c5d      	adds	r5, r3, #1
 8007ab4:	1c51      	adds	r1, r2, #1
 8007ab6:	6031      	str	r1, [r6, #0]
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	6873      	ldr	r3, [r6, #4]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	6073      	str	r3, [r6, #4]
 8007ac4:	dc07      	bgt.n	8007ad6 <_scanf_i+0xba>
 8007ac6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007aca:	4631      	mov	r1, r6
 8007acc:	4658      	mov	r0, fp
 8007ace:	4798      	blx	r3
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f040 8087 	bne.w	8007be4 <_scanf_i+0x1c8>
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	f108 0801 	add.w	r8, r8, #1
 8007adc:	f1b8 0f03 	cmp.w	r8, #3
 8007ae0:	d1c8      	bne.n	8007a74 <_scanf_i+0x58>
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	b90a      	cbnz	r2, 8007aea <_scanf_i+0xce>
 8007ae6:	220a      	movs	r2, #10
 8007ae8:	6062      	str	r2, [r4, #4]
 8007aea:	6862      	ldr	r2, [r4, #4]
 8007aec:	4945      	ldr	r1, [pc, #276]	; (8007c04 <_scanf_i+0x1e8>)
 8007aee:	6960      	ldr	r0, [r4, #20]
 8007af0:	1a89      	subs	r1, r1, r2
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f000 f888 	bl	8007c08 <__sccl>
 8007af8:	9b01      	ldr	r3, [sp, #4]
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	461d      	mov	r5, r3
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d03b      	beq.n	8007b80 <_scanf_i+0x164>
 8007b08:	6831      	ldr	r1, [r6, #0]
 8007b0a:	6960      	ldr	r0, [r4, #20]
 8007b0c:	f891 c000 	ldrb.w	ip, [r1]
 8007b10:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d033      	beq.n	8007b80 <_scanf_i+0x164>
 8007b18:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007b1c:	d121      	bne.n	8007b62 <_scanf_i+0x146>
 8007b1e:	0510      	lsls	r0, r2, #20
 8007b20:	d51f      	bpl.n	8007b62 <_scanf_i+0x146>
 8007b22:	f108 0801 	add.w	r8, r8, #1
 8007b26:	b117      	cbz	r7, 8007b2e <_scanf_i+0x112>
 8007b28:	3301      	adds	r3, #1
 8007b2a:	3f01      	subs	r7, #1
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	6873      	ldr	r3, [r6, #4]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	6073      	str	r3, [r6, #4]
 8007b36:	dd1c      	ble.n	8007b72 <_scanf_i+0x156>
 8007b38:	6833      	ldr	r3, [r6, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	e7dc      	b.n	8007b00 <_scanf_i+0xe4>
 8007b46:	f1b8 0f02 	cmp.w	r8, #2
 8007b4a:	d1ad      	bne.n	8007aa8 <_scanf_i+0x8c>
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007b52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007b56:	d1bf      	bne.n	8007ad8 <_scanf_i+0xbc>
 8007b58:	2110      	movs	r1, #16
 8007b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5e:	6061      	str	r1, [r4, #4]
 8007b60:	e7a1      	b.n	8007aa6 <_scanf_i+0x8a>
 8007b62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	780b      	ldrb	r3, [r1, #0]
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007b70:	e7dd      	b.n	8007b2e <_scanf_i+0x112>
 8007b72:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b76:	4631      	mov	r1, r6
 8007b78:	4658      	mov	r0, fp
 8007b7a:	4798      	blx	r3
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0de      	beq.n	8007b3e <_scanf_i+0x122>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	05d9      	lsls	r1, r3, #23
 8007b84:	d50c      	bpl.n	8007ba0 <_scanf_i+0x184>
 8007b86:	454d      	cmp	r5, r9
 8007b88:	d908      	bls.n	8007b9c <_scanf_i+0x180>
 8007b8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b8e:	1e6f      	subs	r7, r5, #1
 8007b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b94:	4632      	mov	r2, r6
 8007b96:	4658      	mov	r0, fp
 8007b98:	4798      	blx	r3
 8007b9a:	463d      	mov	r5, r7
 8007b9c:	454d      	cmp	r5, r9
 8007b9e:	d029      	beq.n	8007bf4 <_scanf_i+0x1d8>
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	f012 0210 	ands.w	r2, r2, #16
 8007ba6:	d113      	bne.n	8007bd0 <_scanf_i+0x1b4>
 8007ba8:	702a      	strb	r2, [r5, #0]
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	4649      	mov	r1, r9
 8007bae:	4658      	mov	r0, fp
 8007bb0:	9e00      	ldr	r6, [sp, #0]
 8007bb2:	47b0      	blx	r6
 8007bb4:	f8da 3000 	ldr.w	r3, [sl]
 8007bb8:	6821      	ldr	r1, [r4, #0]
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	f8ca 2000 	str.w	r2, [sl]
 8007bc0:	f011 0f20 	tst.w	r1, #32
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	d010      	beq.n	8007bea <_scanf_i+0x1ce>
 8007bc8:	6018      	str	r0, [r3, #0]
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60e3      	str	r3, [r4, #12]
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	eba5 0509 	sub.w	r5, r5, r9
 8007bd6:	44a8      	add	r8, r5
 8007bd8:	6925      	ldr	r5, [r4, #16]
 8007bda:	4445      	add	r5, r8
 8007bdc:	6125      	str	r5, [r4, #16]
 8007bde:	b007      	add	sp, #28
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	f04f 0800 	mov.w	r8, #0
 8007be8:	e7ca      	b.n	8007b80 <_scanf_i+0x164>
 8007bea:	07ca      	lsls	r2, r1, #31
 8007bec:	bf4c      	ite	mi
 8007bee:	8018      	strhmi	r0, [r3, #0]
 8007bf0:	6018      	strpl	r0, [r3, #0]
 8007bf2:	e7ea      	b.n	8007bca <_scanf_i+0x1ae>
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e7f2      	b.n	8007bde <_scanf_i+0x1c2>
 8007bf8:	080081a4 	.word	0x080081a4
 8007bfc:	08006f71 	.word	0x08006f71
 8007c00:	08007d61 	.word	0x08007d61
 8007c04:	08008221 	.word	0x08008221

08007c08 <__sccl>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	780b      	ldrb	r3, [r1, #0]
 8007c0c:	1e44      	subs	r4, r0, #1
 8007c0e:	2b5e      	cmp	r3, #94	; 0x5e
 8007c10:	bf13      	iteet	ne
 8007c12:	1c4a      	addne	r2, r1, #1
 8007c14:	1c8a      	addeq	r2, r1, #2
 8007c16:	784b      	ldrbeq	r3, [r1, #1]
 8007c18:	2100      	movne	r1, #0
 8007c1a:	bf08      	it	eq
 8007c1c:	2101      	moveq	r1, #1
 8007c1e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007c22:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007c26:	42ac      	cmp	r4, r5
 8007c28:	d1fb      	bne.n	8007c22 <__sccl+0x1a>
 8007c2a:	b913      	cbnz	r3, 8007c32 <__sccl+0x2a>
 8007c2c:	3a01      	subs	r2, #1
 8007c2e:	4610      	mov	r0, r2
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	f081 0401 	eor.w	r4, r1, #1
 8007c36:	54c4      	strb	r4, [r0, r3]
 8007c38:	1c51      	adds	r1, r2, #1
 8007c3a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007c3e:	1e4e      	subs	r6, r1, #1
 8007c40:	2d2d      	cmp	r5, #45	; 0x2d
 8007c42:	460a      	mov	r2, r1
 8007c44:	d006      	beq.n	8007c54 <__sccl+0x4c>
 8007c46:	2d5d      	cmp	r5, #93	; 0x5d
 8007c48:	d0f1      	beq.n	8007c2e <__sccl+0x26>
 8007c4a:	b90d      	cbnz	r5, 8007c50 <__sccl+0x48>
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	e7ee      	b.n	8007c2e <__sccl+0x26>
 8007c50:	462b      	mov	r3, r5
 8007c52:	e7f0      	b.n	8007c36 <__sccl+0x2e>
 8007c54:	780e      	ldrb	r6, [r1, #0]
 8007c56:	2e5d      	cmp	r6, #93	; 0x5d
 8007c58:	d0fa      	beq.n	8007c50 <__sccl+0x48>
 8007c5a:	42b3      	cmp	r3, r6
 8007c5c:	dcf8      	bgt.n	8007c50 <__sccl+0x48>
 8007c5e:	3301      	adds	r3, #1
 8007c60:	429e      	cmp	r6, r3
 8007c62:	54c4      	strb	r4, [r0, r3]
 8007c64:	dcfb      	bgt.n	8007c5e <__sccl+0x56>
 8007c66:	3102      	adds	r1, #2
 8007c68:	e7e7      	b.n	8007c3a <__sccl+0x32>

08007c6a <_strtoul_l.isra.0>:
 8007c6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	4692      	mov	sl, r2
 8007c74:	461e      	mov	r6, r3
 8007c76:	460f      	mov	r7, r1
 8007c78:	463d      	mov	r5, r7
 8007c7a:	9808      	ldr	r0, [sp, #32]
 8007c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c80:	f7ff f9c0 	bl	8007004 <__locale_ctype_ptr_l>
 8007c84:	4420      	add	r0, r4
 8007c86:	7843      	ldrb	r3, [r0, #1]
 8007c88:	f013 0308 	ands.w	r3, r3, #8
 8007c8c:	d130      	bne.n	8007cf0 <_strtoul_l.isra.0+0x86>
 8007c8e:	2c2d      	cmp	r4, #45	; 0x2d
 8007c90:	d130      	bne.n	8007cf4 <_strtoul_l.isra.0+0x8a>
 8007c92:	2101      	movs	r1, #1
 8007c94:	787c      	ldrb	r4, [r7, #1]
 8007c96:	1cbd      	adds	r5, r7, #2
 8007c98:	2e00      	cmp	r6, #0
 8007c9a:	d05c      	beq.n	8007d56 <_strtoul_l.isra.0+0xec>
 8007c9c:	2e10      	cmp	r6, #16
 8007c9e:	d109      	bne.n	8007cb4 <_strtoul_l.isra.0+0x4a>
 8007ca0:	2c30      	cmp	r4, #48	; 0x30
 8007ca2:	d107      	bne.n	8007cb4 <_strtoul_l.isra.0+0x4a>
 8007ca4:	782b      	ldrb	r3, [r5, #0]
 8007ca6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007caa:	2b58      	cmp	r3, #88	; 0x58
 8007cac:	d14e      	bne.n	8007d4c <_strtoul_l.isra.0+0xe2>
 8007cae:	2610      	movs	r6, #16
 8007cb0:	786c      	ldrb	r4, [r5, #1]
 8007cb2:	3502      	adds	r5, #2
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cb8:	fbb2 f2f6 	udiv	r2, r2, r6
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	fb06 fc02 	mul.w	ip, r6, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	ea6f 0c0c 	mvn.w	ip, ip
 8007cc8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007ccc:	2f09      	cmp	r7, #9
 8007cce:	d817      	bhi.n	8007d00 <_strtoul_l.isra.0+0x96>
 8007cd0:	463c      	mov	r4, r7
 8007cd2:	42a6      	cmp	r6, r4
 8007cd4:	dd23      	ble.n	8007d1e <_strtoul_l.isra.0+0xb4>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db1e      	blt.n	8007d18 <_strtoul_l.isra.0+0xae>
 8007cda:	4282      	cmp	r2, r0
 8007cdc:	d31c      	bcc.n	8007d18 <_strtoul_l.isra.0+0xae>
 8007cde:	d101      	bne.n	8007ce4 <_strtoul_l.isra.0+0x7a>
 8007ce0:	45a4      	cmp	ip, r4
 8007ce2:	db19      	blt.n	8007d18 <_strtoul_l.isra.0+0xae>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	fb00 4006 	mla	r0, r0, r6, r4
 8007cea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cee:	e7eb      	b.n	8007cc8 <_strtoul_l.isra.0+0x5e>
 8007cf0:	462f      	mov	r7, r5
 8007cf2:	e7c1      	b.n	8007c78 <_strtoul_l.isra.0+0xe>
 8007cf4:	2c2b      	cmp	r4, #43	; 0x2b
 8007cf6:	bf04      	itt	eq
 8007cf8:	1cbd      	addeq	r5, r7, #2
 8007cfa:	787c      	ldrbeq	r4, [r7, #1]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	e7cb      	b.n	8007c98 <_strtoul_l.isra.0+0x2e>
 8007d00:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007d04:	2f19      	cmp	r7, #25
 8007d06:	d801      	bhi.n	8007d0c <_strtoul_l.isra.0+0xa2>
 8007d08:	3c37      	subs	r4, #55	; 0x37
 8007d0a:	e7e2      	b.n	8007cd2 <_strtoul_l.isra.0+0x68>
 8007d0c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d10:	2f19      	cmp	r7, #25
 8007d12:	d804      	bhi.n	8007d1e <_strtoul_l.isra.0+0xb4>
 8007d14:	3c57      	subs	r4, #87	; 0x57
 8007d16:	e7dc      	b.n	8007cd2 <_strtoul_l.isra.0+0x68>
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d1c:	e7e5      	b.n	8007cea <_strtoul_l.isra.0+0x80>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da09      	bge.n	8007d36 <_strtoul_l.isra.0+0xcc>
 8007d22:	2322      	movs	r3, #34	; 0x22
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d28:	f8c8 3000 	str.w	r3, [r8]
 8007d2c:	f1ba 0f00 	cmp.w	sl, #0
 8007d30:	d107      	bne.n	8007d42 <_strtoul_l.isra.0+0xd8>
 8007d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d36:	b101      	cbz	r1, 8007d3a <_strtoul_l.isra.0+0xd0>
 8007d38:	4240      	negs	r0, r0
 8007d3a:	f1ba 0f00 	cmp.w	sl, #0
 8007d3e:	d0f8      	beq.n	8007d32 <_strtoul_l.isra.0+0xc8>
 8007d40:	b10b      	cbz	r3, 8007d46 <_strtoul_l.isra.0+0xdc>
 8007d42:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007d46:	f8ca 9000 	str.w	r9, [sl]
 8007d4a:	e7f2      	b.n	8007d32 <_strtoul_l.isra.0+0xc8>
 8007d4c:	2430      	movs	r4, #48	; 0x30
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	d1b0      	bne.n	8007cb4 <_strtoul_l.isra.0+0x4a>
 8007d52:	2608      	movs	r6, #8
 8007d54:	e7ae      	b.n	8007cb4 <_strtoul_l.isra.0+0x4a>
 8007d56:	2c30      	cmp	r4, #48	; 0x30
 8007d58:	d0a4      	beq.n	8007ca4 <_strtoul_l.isra.0+0x3a>
 8007d5a:	260a      	movs	r6, #10
 8007d5c:	e7aa      	b.n	8007cb4 <_strtoul_l.isra.0+0x4a>
	...

08007d60 <_strtoul_r>:
 8007d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d62:	4c06      	ldr	r4, [pc, #24]	; (8007d7c <_strtoul_r+0x1c>)
 8007d64:	4d06      	ldr	r5, [pc, #24]	; (8007d80 <_strtoul_r+0x20>)
 8007d66:	6824      	ldr	r4, [r4, #0]
 8007d68:	6a24      	ldr	r4, [r4, #32]
 8007d6a:	2c00      	cmp	r4, #0
 8007d6c:	bf08      	it	eq
 8007d6e:	462c      	moveq	r4, r5
 8007d70:	9400      	str	r4, [sp, #0]
 8007d72:	f7ff ff7a 	bl	8007c6a <_strtoul_l.isra.0>
 8007d76:	b003      	add	sp, #12
 8007d78:	bd30      	pop	{r4, r5, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200001bc 	.word	0x200001bc
 8007d80:	20000220 	.word	0x20000220

08007d84 <__submore>:
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d90:	4299      	cmp	r1, r3
 8007d92:	d11b      	bne.n	8007dcc <__submore+0x48>
 8007d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d98:	f7fe ff7e 	bl	8006c98 <_malloc_r>
 8007d9c:	b918      	cbnz	r0, 8007da6 <__submore+0x22>
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007daa:	63a3      	str	r3, [r4, #56]	; 0x38
 8007dac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007db0:	6360      	str	r0, [r4, #52]	; 0x34
 8007db2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007db6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007dba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007dbe:	7043      	strb	r3, [r0, #1]
 8007dc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007dc4:	7003      	strb	r3, [r0, #0]
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	2000      	movs	r0, #0
 8007dca:	e7ea      	b.n	8007da2 <__submore+0x1e>
 8007dcc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007dce:	0077      	lsls	r7, r6, #1
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	f000 f84e 	bl	8007e72 <_realloc_r>
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d0e0      	beq.n	8007d9e <__submore+0x1a>
 8007ddc:	eb00 0806 	add.w	r8, r0, r6
 8007de0:	4601      	mov	r1, r0
 8007de2:	4632      	mov	r2, r6
 8007de4:	4640      	mov	r0, r8
 8007de6:	f000 f820 	bl	8007e2a <memcpy>
 8007dea:	f8c4 8000 	str.w	r8, [r4]
 8007dee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007df2:	e7e9      	b.n	8007dc8 <__submore+0x44>

08007df4 <__ascii_wctomb>:
 8007df4:	b149      	cbz	r1, 8007e0a <__ascii_wctomb+0x16>
 8007df6:	2aff      	cmp	r2, #255	; 0xff
 8007df8:	bf8b      	itete	hi
 8007dfa:	238a      	movhi	r3, #138	; 0x8a
 8007dfc:	700a      	strbls	r2, [r1, #0]
 8007dfe:	6003      	strhi	r3, [r0, #0]
 8007e00:	2001      	movls	r0, #1
 8007e02:	bf88      	it	hi
 8007e04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007e08:	4770      	bx	lr
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	4770      	bx	lr

08007e0e <memchr>:
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	b2c9      	uxtb	r1, r1
 8007e12:	4402      	add	r2, r0
 8007e14:	4290      	cmp	r0, r2
 8007e16:	4603      	mov	r3, r0
 8007e18:	d101      	bne.n	8007e1e <memchr+0x10>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e003      	b.n	8007e26 <memchr+0x18>
 8007e1e:	781c      	ldrb	r4, [r3, #0]
 8007e20:	3001      	adds	r0, #1
 8007e22:	428c      	cmp	r4, r1
 8007e24:	d1f6      	bne.n	8007e14 <memchr+0x6>
 8007e26:	4618      	mov	r0, r3
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <memcpy>:
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	1e43      	subs	r3, r0, #1
 8007e2e:	440a      	add	r2, r1
 8007e30:	4291      	cmp	r1, r2
 8007e32:	d100      	bne.n	8007e36 <memcpy+0xc>
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e3e:	e7f7      	b.n	8007e30 <memcpy+0x6>

08007e40 <memmove>:
 8007e40:	4288      	cmp	r0, r1
 8007e42:	b510      	push	{r4, lr}
 8007e44:	eb01 0302 	add.w	r3, r1, r2
 8007e48:	d807      	bhi.n	8007e5a <memmove+0x1a>
 8007e4a:	1e42      	subs	r2, r0, #1
 8007e4c:	4299      	cmp	r1, r3
 8007e4e:	d00a      	beq.n	8007e66 <memmove+0x26>
 8007e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e58:	e7f8      	b.n	8007e4c <memmove+0xc>
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	d9f5      	bls.n	8007e4a <memmove+0xa>
 8007e5e:	1881      	adds	r1, r0, r2
 8007e60:	1ad2      	subs	r2, r2, r3
 8007e62:	42d3      	cmn	r3, r2
 8007e64:	d100      	bne.n	8007e68 <memmove+0x28>
 8007e66:	bd10      	pop	{r4, pc}
 8007e68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e70:	e7f7      	b.n	8007e62 <memmove+0x22>

08007e72 <_realloc_r>:
 8007e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e74:	4607      	mov	r7, r0
 8007e76:	4614      	mov	r4, r2
 8007e78:	460e      	mov	r6, r1
 8007e7a:	b921      	cbnz	r1, 8007e86 <_realloc_r+0x14>
 8007e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e80:	4611      	mov	r1, r2
 8007e82:	f7fe bf09 	b.w	8006c98 <_malloc_r>
 8007e86:	b922      	cbnz	r2, 8007e92 <_realloc_r+0x20>
 8007e88:	f7fe feba 	bl	8006c00 <_free_r>
 8007e8c:	4625      	mov	r5, r4
 8007e8e:	4628      	mov	r0, r5
 8007e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e92:	f000 f814 	bl	8007ebe <_malloc_usable_size_r>
 8007e96:	42a0      	cmp	r0, r4
 8007e98:	d20f      	bcs.n	8007eba <_realloc_r+0x48>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7fe fefb 	bl	8006c98 <_malloc_r>
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d0f2      	beq.n	8007e8e <_realloc_r+0x1c>
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4622      	mov	r2, r4
 8007eac:	f7ff ffbd 	bl	8007e2a <memcpy>
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	f7fe fea4 	bl	8006c00 <_free_r>
 8007eb8:	e7e9      	b.n	8007e8e <_realloc_r+0x1c>
 8007eba:	4635      	mov	r5, r6
 8007ebc:	e7e7      	b.n	8007e8e <_realloc_r+0x1c>

08007ebe <_malloc_usable_size_r>:
 8007ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec2:	1f18      	subs	r0, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfbc      	itt	lt
 8007ec8:	580b      	ldrlt	r3, [r1, r0]
 8007eca:	18c0      	addlt	r0, r0, r3
 8007ecc:	4770      	bx	lr
	...

08007ed0 <_init>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr

08007edc <_fini>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr
